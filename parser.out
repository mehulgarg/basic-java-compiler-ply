Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> type_declarations
Rule 2     type_declarations -> type_declaration
Rule 3     type_declarations -> type_declarations , type_declaration
Rule 4     type_declaration -> class_declaration
Rule 5     class_header_name -> modifiers_opt CLASS NAME
Rule 6     class_declaration -> class_header_name class_body
Rule 7     modifiers_opt -> modifiers
Rule 8     modifiers_opt -> empty
Rule 9     modifiers -> modifier
Rule 10    modifiers -> modifiers modifier
Rule 11    class_body -> opening_bracket classbodydecllist closing_bracket
Rule 12    tmain -> tmain_header opening_bracket method_body closing_bracket
Rule 13    tmain_header -> tmain_name ( formal_parameter_list_opt )
Rule 14    tmain_name -> modifiers_opt type MAIN
Rule 15    opening_bracket -> {
Rule 16    closing_bracket -> }
Rule 17    classbodydecllist -> classbodydecl
Rule 18    classbodydecllist -> classbodydecllist classbodydecl
Rule 19    classbodydecl -> method_declaration
Rule 20    classbodydecl -> tmain
Rule 21    classbodydecl -> field_declartaion
Rule 22    field_declartaion -> modifiers_opt type variable_declarators ;
Rule 23    method_declaration -> abstract_method_declaration
Rule 24    method_declaration -> method_header opening_bracket method_body closing_bracket
Rule 25    abstract_method_declaration -> method_header ;
Rule 26    method_header -> method_header_name ( formal_parameter_list_opt )
Rule 27    method_header_name -> modifiers_opt type NAME
Rule 28    method_body -> block_statements
Rule 29    formal_parameter_list_opt -> formal_parameter_list
Rule 30    formal_parameter_list_opt -> empty
Rule 31    formal_parameter_list -> formal_parameter
Rule 32    formal_parameter_list -> formal_parameter_list , formal_parameter
Rule 33    formal_parameter -> type variable_declarator_id
Rule 34    variable_declarator_id -> NAME
Rule 35    type -> primitive_type
Rule 36    type -> array_type
Rule 37    array_type -> primitive_type dims
Rule 38    array_type -> name dims
Rule 39    dims -> [ ]
Rule 40    dims -> dims [ ]
Rule 41    primitive_type -> BOOLEAN
Rule 42    primitive_type -> VOID
Rule 43    primitive_type -> BYTE
Rule 44    primitive_type -> SHORT
Rule 45    primitive_type -> INT
Rule 46    primitive_type -> LONG
Rule 47    primitive_type -> CHAR
Rule 48    primitive_type -> FLOAT
Rule 49    primitive_type -> DOUBLE
Rule 50    primitive_type -> STRING
Rule 51    modifier -> PUBLIC
Rule 52    modifier -> PROTECTED
Rule 53    modifier -> PRIVATE
Rule 54    modifier -> STATIC
Rule 55    modifier -> ABSTRACT
Rule 56    modifier -> FINAL
Rule 57    modifier -> NATIVE
Rule 58    name -> simple_name
Rule 59    name -> qualified_name
Rule 60    simple_name -> NAME
Rule 61    qualified_name -> name . simple_name
Rule 62    empty -> <empty>
Rule 63    block_statements -> block_statement
Rule 64    block_statements -> block_statements block_statement
Rule 65    block_statement -> local_variable_declaration_statement
Rule 66    block_statement -> statement
Rule 67    local_variable_declaration_statement -> local_variable_declaration ;
Rule 68    local_variable_declaration -> type variable_declarators
Rule 69    local_variable_declaration -> modifiers type variable_declarators
Rule 70    variable_declarators -> variable_declarator
Rule 71    variable_declarators -> variable_declarators , variable_declarator
Rule 72    variable_declarator -> variable_declarator_id
Rule 73    variable_declarator -> variable_declarator_id = variable_initializer
Rule 74    variable_initializer -> primary
Rule 75    statement -> other_statement
Rule 76    statement -> if_then_statement
Rule 77    statement -> if_then_else_statement
Rule 78    statement -> while_statement
Rule 79    statement -> do_while_statement
Rule 80    other_statement -> expression_statement
Rule 81    other_statement -> break_statement
Rule 82    other_statement -> return_statement
Rule 83    other_statement -> continue_statement
Rule 84    other_statement -> ;
Rule 85    expression_statement -> statement_expression ;
Rule 86    statement_expression -> assignment
Rule 87    statement_expression -> unary_expression
Rule 88    statement_expression -> method_invocation
Rule 89    method_invocation -> NAME ( argument_list )
Rule 90    method_invocation -> NAME ( )
Rule 91    argument_list -> expression
Rule 92    argument_list -> argument_list , expression
Rule 93    break_statement -> BREAK ;
Rule 94    break_statement -> BREAK NAME ;
Rule 95    return_statement -> RETURN expression_opt ;
Rule 96    expression_opt -> expression
Rule 97    expression_opt -> empty
Rule 98    continue_statement -> CONTINUE ;
Rule 99    if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket
Rule 100   if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else
Rule 101   else -> ELSE opening_bracket block_statements closing_bracket
Rule 102   while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket
Rule 103   do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ;
Rule 104   expression -> assignment_expression
Rule 105   assignment_expression -> assignment
Rule 106   assignment_expression -> conditional_expression
Rule 107   assignment -> postfix_expression assignment_operator assignment_expression
Rule 108   assignment_operator -> =
Rule 109   assignment_operator -> TIMES_ASSIGN
Rule 110   assignment_operator -> DIVIDE_ASSIGN
Rule 111   assignment_operator -> REMAINDER_ASSIGN
Rule 112   assignment_operator -> PLUS_ASSIGN
Rule 113   assignment_operator -> MINUS_ASSIGN
Rule 114   conditional_expression -> conditional_or_expression
Rule 115   conditional_or_expression -> conditional_and_expression
Rule 116   conditional_or_expression -> conditional_or_expression OR conditional_and_expression
Rule 117   conditional_and_expression -> inclusive_or_expression
Rule 118   conditional_and_expression -> conditional_and_expression AND inclusive_or_expression
Rule 119   inclusive_or_expression -> and_expression
Rule 120   inclusive_or_expression -> inclusive_or_expression | and_expression
Rule 121   and_expression -> equality_expression
Rule 122   and_expression -> and_expression & equality_expression
Rule 123   equality_expression -> equality_expression EQ relational_expression
Rule 124   equality_expression -> equality_expression NEQ relational_expression
Rule 125   equality_expression -> relational_expression
Rule 126   relational_expression -> additive_expression
Rule 127   relational_expression -> relational_expression > additive_expression
Rule 128   relational_expression -> relational_expression < additive_expression
Rule 129   relational_expression -> relational_expression GTEQ additive_expression
Rule 130   relational_expression -> relational_expression LTEQ additive_expression
Rule 131   additive_expression -> multiplicative_expression
Rule 132   additive_expression -> additive_expression + multiplicative_expression
Rule 133   additive_expression -> additive_expression - multiplicative_expression
Rule 134   multiplicative_expression -> unary_expression
Rule 135   multiplicative_expression -> multiplicative_expression * unary_expression
Rule 136   multiplicative_expression -> multiplicative_expression / unary_expression
Rule 137   multiplicative_expression -> multiplicative_expression % unary_expression
Rule 138   unary_expression -> pre_increment_expression
Rule 139   unary_expression -> pre_decrement_expression
Rule 140   unary_expression -> + unary_expression
Rule 141   unary_expression -> - unary_expression
Rule 142   unary_expression -> postfix_expression
Rule 143   pre_increment_expression -> PLUSPLUS unary_expression
Rule 144   pre_decrement_expression -> MINUSMINUS unary_expression
Rule 145   postfix_expression -> primary
Rule 146   postfix_expression -> name
Rule 147   postfix_expression -> post_increment_expression
Rule 148   postfix_expression -> post_decrement_expression
Rule 149   post_increment_expression -> postfix_expression PLUSPLUS
Rule 150   post_decrement_expression -> postfix_expression MINUSMINUS
Rule 151   primary -> literal
Rule 152   primary -> array_access
Rule 153   array_access -> name [ expression ]
Rule 154   literal -> NUM
Rule 155   literal -> CHAR_LITERAL
Rule 156   literal -> STRING_LITERAL
Rule 157   literal -> TRUE
Rule 158   literal -> FALSE
Rule 159   literal -> NULL

Terminals, with rules where they appear

%                    : 137
&                    : 122
(                    : 13 26 89 90 99 100 102 103
)                    : 13 26 89 90 99 100 102 103
*                    : 135
+                    : 132 140
,                    : 3 32 71 92
-                    : 133 141
.                    : 61
/                    : 136
;                    : 22 25 67 84 85 93 94 95 98 103
<                    : 128
=                    : 73 108
>                    : 127
ABSTRACT             : 55
AND                  : 118
BOOLEAN              : 41
BREAK                : 93 94
BYTE                 : 43
CHAR                 : 47
CHAR_LITERAL         : 155
CLASS                : 5
CONTINUE             : 98
DIVIDE_ASSIGN        : 110
DO                   : 103
DOUBLE               : 49
ELSE                 : 101
EQ                   : 123
FALSE                : 158
FINAL                : 56
FLOAT                : 48
GTEQ                 : 129
IF                   : 99 100
INT                  : 45
LONG                 : 46
LTEQ                 : 130
MAIN                 : 14
MINUSMINUS           : 144 150
MINUS_ASSIGN         : 113
NAME                 : 5 27 34 60 89 90 94
NATIVE               : 57
NEQ                  : 124
NULL                 : 159
NUM                  : 154
OR                   : 116
PLUSPLUS             : 143 149
PLUS_ASSIGN          : 112
PRIVATE              : 53
PROTECTED            : 52
PUBLIC               : 51
REMAINDER_ASSIGN     : 111
RETURN               : 95
SHORT                : 44
STATIC               : 54
STRING               : 50
STRING_LITERAL       : 156
TIMES_ASSIGN         : 109
TRUE                 : 157
VOID                 : 42
WHILE                : 102 103
[                    : 39 40 153
]                    : 39 40 153
error                : 
{                    : 15
|                    : 120
}                    : 16

Nonterminals, with rules where they appear

abstract_method_declaration : 23
additive_expression  : 126 127 128 129 130 132 133
and_expression       : 119 120 122
argument_list        : 89 92
array_access         : 152
array_type           : 36
assignment           : 86 105
assignment_expression : 104 107
assignment_operator  : 107
block_statement      : 63 64
block_statements     : 28 64 99 100 101 102 103
break_statement      : 81
class_body           : 6
class_declaration    : 4
class_header_name    : 6
classbodydecl        : 17 18
classbodydecllist    : 11 18
closing_bracket      : 11 12 24 99 100 101 102 103
conditional_and_expression : 115 116 118
conditional_expression : 106
conditional_or_expression : 114 116
continue_statement   : 83
dims                 : 37 38 40
do_while_statement   : 79
else                 : 100
empty                : 8 30 97
equality_expression  : 121 122 123 124
expression           : 91 92 96 99 100 102 103 153
expression_opt       : 95
expression_statement : 80
field_declartaion    : 21
formal_parameter     : 31 32
formal_parameter_list : 29 32
formal_parameter_list_opt : 13 26
if_then_else_statement : 77
if_then_statement    : 76
inclusive_or_expression : 117 118 120
literal              : 151
local_variable_declaration : 67
local_variable_declaration_statement : 65
method_body          : 12 24
method_declaration   : 19
method_header        : 24 25
method_header_name   : 26
method_invocation    : 88
modifier             : 9 10
modifiers            : 7 10 69
modifiers_opt        : 5 14 22 27
multiplicative_expression : 131 132 133 135 136 137
name                 : 38 61 146 153
opening_bracket      : 11 12 24 99 100 101 102 103
other_statement      : 75
post_decrement_expression : 148
post_increment_expression : 147
postfix_expression   : 107 142 149 150
pre_decrement_expression : 139
pre_increment_expression : 138
primary              : 74 145
primitive_type       : 35 37
qualified_name       : 59
relational_expression : 123 124 125 127 128 129 130
return_statement     : 82
simple_name          : 58 61
start                : 0
statement            : 66
statement_expression : 85
tmain                : 20
tmain_header         : 12
tmain_name           : 13
type                 : 14 22 27 33 68 69
type_declaration     : 2 3
type_declarations    : 1 3
unary_expression     : 87 134 135 136 137 140 141 143 144
variable_declarator  : 70 71
variable_declarator_id : 33 72 73
variable_declarators : 22 68 69 71
variable_initializer : 73
while_statement      : 78

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . type_declarations
    (2) type_declarations -> . type_declaration
    (3) type_declarations -> . type_declarations , type_declaration
    (4) type_declaration -> . class_declaration
    (6) class_declaration -> . class_header_name class_body
    (5) class_header_name -> . modifiers_opt CLASS NAME
    (7) modifiers_opt -> . modifiers
    (8) modifiers_opt -> . empty
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (62) empty -> .
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE

    CLASS           reduce using rule 62 (empty -> .)
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16

    start                          shift and go to state 1
    type_declarations              shift and go to state 2
    type_declaration               shift and go to state 3
    class_declaration              shift and go to state 4
    class_header_name              shift and go to state 5
    modifiers_opt                  shift and go to state 6
    modifiers                      shift and go to state 7
    empty                          shift and go to state 8
    modifier                       shift and go to state 9

state 1

    (0) S' -> start .



state 2

    (1) start -> type_declarations .
    (3) type_declarations -> type_declarations . , type_declaration

    $end            reduce using rule 1 (start -> type_declarations .)
    ,               shift and go to state 17


state 3

    (2) type_declarations -> type_declaration .

    ,               reduce using rule 2 (type_declarations -> type_declaration .)
    $end            reduce using rule 2 (type_declarations -> type_declaration .)


state 4

    (4) type_declaration -> class_declaration .

    ,               reduce using rule 4 (type_declaration -> class_declaration .)
    $end            reduce using rule 4 (type_declaration -> class_declaration .)


state 5

    (6) class_declaration -> class_header_name . class_body
    (11) class_body -> . opening_bracket classbodydecllist closing_bracket
    (15) opening_bracket -> . {

    {               shift and go to state 20

    class_body                     shift and go to state 18
    opening_bracket                shift and go to state 19

state 6

    (5) class_header_name -> modifiers_opt . CLASS NAME

    CLASS           shift and go to state 21


state 7

    (7) modifiers_opt -> modifiers .
    (10) modifiers -> modifiers . modifier
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE

    CLASS           reduce using rule 7 (modifiers_opt -> modifiers .)
    BOOLEAN         reduce using rule 7 (modifiers_opt -> modifiers .)
    VOID            reduce using rule 7 (modifiers_opt -> modifiers .)
    BYTE            reduce using rule 7 (modifiers_opt -> modifiers .)
    SHORT           reduce using rule 7 (modifiers_opt -> modifiers .)
    INT             reduce using rule 7 (modifiers_opt -> modifiers .)
    LONG            reduce using rule 7 (modifiers_opt -> modifiers .)
    CHAR            reduce using rule 7 (modifiers_opt -> modifiers .)
    FLOAT           reduce using rule 7 (modifiers_opt -> modifiers .)
    DOUBLE          reduce using rule 7 (modifiers_opt -> modifiers .)
    STRING          reduce using rule 7 (modifiers_opt -> modifiers .)
    NAME            reduce using rule 7 (modifiers_opt -> modifiers .)
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16

    modifier                       shift and go to state 22

state 8

    (8) modifiers_opt -> empty .

    CLASS           reduce using rule 8 (modifiers_opt -> empty .)
    BOOLEAN         reduce using rule 8 (modifiers_opt -> empty .)
    VOID            reduce using rule 8 (modifiers_opt -> empty .)
    BYTE            reduce using rule 8 (modifiers_opt -> empty .)
    SHORT           reduce using rule 8 (modifiers_opt -> empty .)
    INT             reduce using rule 8 (modifiers_opt -> empty .)
    LONG            reduce using rule 8 (modifiers_opt -> empty .)
    CHAR            reduce using rule 8 (modifiers_opt -> empty .)
    FLOAT           reduce using rule 8 (modifiers_opt -> empty .)
    DOUBLE          reduce using rule 8 (modifiers_opt -> empty .)
    STRING          reduce using rule 8 (modifiers_opt -> empty .)
    NAME            reduce using rule 8 (modifiers_opt -> empty .)


state 9

    (9) modifiers -> modifier .

    PUBLIC          reduce using rule 9 (modifiers -> modifier .)
    PROTECTED       reduce using rule 9 (modifiers -> modifier .)
    PRIVATE         reduce using rule 9 (modifiers -> modifier .)
    STATIC          reduce using rule 9 (modifiers -> modifier .)
    ABSTRACT        reduce using rule 9 (modifiers -> modifier .)
    FINAL           reduce using rule 9 (modifiers -> modifier .)
    NATIVE          reduce using rule 9 (modifiers -> modifier .)
    CLASS           reduce using rule 9 (modifiers -> modifier .)
    BOOLEAN         reduce using rule 9 (modifiers -> modifier .)
    VOID            reduce using rule 9 (modifiers -> modifier .)
    BYTE            reduce using rule 9 (modifiers -> modifier .)
    SHORT           reduce using rule 9 (modifiers -> modifier .)
    INT             reduce using rule 9 (modifiers -> modifier .)
    LONG            reduce using rule 9 (modifiers -> modifier .)
    CHAR            reduce using rule 9 (modifiers -> modifier .)
    FLOAT           reduce using rule 9 (modifiers -> modifier .)
    DOUBLE          reduce using rule 9 (modifiers -> modifier .)
    STRING          reduce using rule 9 (modifiers -> modifier .)
    NAME            reduce using rule 9 (modifiers -> modifier .)


state 10

    (51) modifier -> PUBLIC .

    PUBLIC          reduce using rule 51 (modifier -> PUBLIC .)
    PROTECTED       reduce using rule 51 (modifier -> PUBLIC .)
    PRIVATE         reduce using rule 51 (modifier -> PUBLIC .)
    STATIC          reduce using rule 51 (modifier -> PUBLIC .)
    ABSTRACT        reduce using rule 51 (modifier -> PUBLIC .)
    FINAL           reduce using rule 51 (modifier -> PUBLIC .)
    NATIVE          reduce using rule 51 (modifier -> PUBLIC .)
    CLASS           reduce using rule 51 (modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 51 (modifier -> PUBLIC .)
    VOID            reduce using rule 51 (modifier -> PUBLIC .)
    BYTE            reduce using rule 51 (modifier -> PUBLIC .)
    SHORT           reduce using rule 51 (modifier -> PUBLIC .)
    INT             reduce using rule 51 (modifier -> PUBLIC .)
    LONG            reduce using rule 51 (modifier -> PUBLIC .)
    CHAR            reduce using rule 51 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 51 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 51 (modifier -> PUBLIC .)
    STRING          reduce using rule 51 (modifier -> PUBLIC .)
    NAME            reduce using rule 51 (modifier -> PUBLIC .)


state 11

    (52) modifier -> PROTECTED .

    PUBLIC          reduce using rule 52 (modifier -> PROTECTED .)
    PROTECTED       reduce using rule 52 (modifier -> PROTECTED .)
    PRIVATE         reduce using rule 52 (modifier -> PROTECTED .)
    STATIC          reduce using rule 52 (modifier -> PROTECTED .)
    ABSTRACT        reduce using rule 52 (modifier -> PROTECTED .)
    FINAL           reduce using rule 52 (modifier -> PROTECTED .)
    NATIVE          reduce using rule 52 (modifier -> PROTECTED .)
    CLASS           reduce using rule 52 (modifier -> PROTECTED .)
    BOOLEAN         reduce using rule 52 (modifier -> PROTECTED .)
    VOID            reduce using rule 52 (modifier -> PROTECTED .)
    BYTE            reduce using rule 52 (modifier -> PROTECTED .)
    SHORT           reduce using rule 52 (modifier -> PROTECTED .)
    INT             reduce using rule 52 (modifier -> PROTECTED .)
    LONG            reduce using rule 52 (modifier -> PROTECTED .)
    CHAR            reduce using rule 52 (modifier -> PROTECTED .)
    FLOAT           reduce using rule 52 (modifier -> PROTECTED .)
    DOUBLE          reduce using rule 52 (modifier -> PROTECTED .)
    STRING          reduce using rule 52 (modifier -> PROTECTED .)
    NAME            reduce using rule 52 (modifier -> PROTECTED .)


state 12

    (53) modifier -> PRIVATE .

    PUBLIC          reduce using rule 53 (modifier -> PRIVATE .)
    PROTECTED       reduce using rule 53 (modifier -> PRIVATE .)
    PRIVATE         reduce using rule 53 (modifier -> PRIVATE .)
    STATIC          reduce using rule 53 (modifier -> PRIVATE .)
    ABSTRACT        reduce using rule 53 (modifier -> PRIVATE .)
    FINAL           reduce using rule 53 (modifier -> PRIVATE .)
    NATIVE          reduce using rule 53 (modifier -> PRIVATE .)
    CLASS           reduce using rule 53 (modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 53 (modifier -> PRIVATE .)
    VOID            reduce using rule 53 (modifier -> PRIVATE .)
    BYTE            reduce using rule 53 (modifier -> PRIVATE .)
    SHORT           reduce using rule 53 (modifier -> PRIVATE .)
    INT             reduce using rule 53 (modifier -> PRIVATE .)
    LONG            reduce using rule 53 (modifier -> PRIVATE .)
    CHAR            reduce using rule 53 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 53 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 53 (modifier -> PRIVATE .)
    STRING          reduce using rule 53 (modifier -> PRIVATE .)
    NAME            reduce using rule 53 (modifier -> PRIVATE .)


state 13

    (54) modifier -> STATIC .

    PUBLIC          reduce using rule 54 (modifier -> STATIC .)
    PROTECTED       reduce using rule 54 (modifier -> STATIC .)
    PRIVATE         reduce using rule 54 (modifier -> STATIC .)
    STATIC          reduce using rule 54 (modifier -> STATIC .)
    ABSTRACT        reduce using rule 54 (modifier -> STATIC .)
    FINAL           reduce using rule 54 (modifier -> STATIC .)
    NATIVE          reduce using rule 54 (modifier -> STATIC .)
    CLASS           reduce using rule 54 (modifier -> STATIC .)
    BOOLEAN         reduce using rule 54 (modifier -> STATIC .)
    VOID            reduce using rule 54 (modifier -> STATIC .)
    BYTE            reduce using rule 54 (modifier -> STATIC .)
    SHORT           reduce using rule 54 (modifier -> STATIC .)
    INT             reduce using rule 54 (modifier -> STATIC .)
    LONG            reduce using rule 54 (modifier -> STATIC .)
    CHAR            reduce using rule 54 (modifier -> STATIC .)
    FLOAT           reduce using rule 54 (modifier -> STATIC .)
    DOUBLE          reduce using rule 54 (modifier -> STATIC .)
    STRING          reduce using rule 54 (modifier -> STATIC .)
    NAME            reduce using rule 54 (modifier -> STATIC .)


state 14

    (55) modifier -> ABSTRACT .

    PUBLIC          reduce using rule 55 (modifier -> ABSTRACT .)
    PROTECTED       reduce using rule 55 (modifier -> ABSTRACT .)
    PRIVATE         reduce using rule 55 (modifier -> ABSTRACT .)
    STATIC          reduce using rule 55 (modifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 55 (modifier -> ABSTRACT .)
    FINAL           reduce using rule 55 (modifier -> ABSTRACT .)
    NATIVE          reduce using rule 55 (modifier -> ABSTRACT .)
    CLASS           reduce using rule 55 (modifier -> ABSTRACT .)
    BOOLEAN         reduce using rule 55 (modifier -> ABSTRACT .)
    VOID            reduce using rule 55 (modifier -> ABSTRACT .)
    BYTE            reduce using rule 55 (modifier -> ABSTRACT .)
    SHORT           reduce using rule 55 (modifier -> ABSTRACT .)
    INT             reduce using rule 55 (modifier -> ABSTRACT .)
    LONG            reduce using rule 55 (modifier -> ABSTRACT .)
    CHAR            reduce using rule 55 (modifier -> ABSTRACT .)
    FLOAT           reduce using rule 55 (modifier -> ABSTRACT .)
    DOUBLE          reduce using rule 55 (modifier -> ABSTRACT .)
    STRING          reduce using rule 55 (modifier -> ABSTRACT .)
    NAME            reduce using rule 55 (modifier -> ABSTRACT .)


state 15

    (56) modifier -> FINAL .

    PUBLIC          reduce using rule 56 (modifier -> FINAL .)
    PROTECTED       reduce using rule 56 (modifier -> FINAL .)
    PRIVATE         reduce using rule 56 (modifier -> FINAL .)
    STATIC          reduce using rule 56 (modifier -> FINAL .)
    ABSTRACT        reduce using rule 56 (modifier -> FINAL .)
    FINAL           reduce using rule 56 (modifier -> FINAL .)
    NATIVE          reduce using rule 56 (modifier -> FINAL .)
    CLASS           reduce using rule 56 (modifier -> FINAL .)
    BOOLEAN         reduce using rule 56 (modifier -> FINAL .)
    VOID            reduce using rule 56 (modifier -> FINAL .)
    BYTE            reduce using rule 56 (modifier -> FINAL .)
    SHORT           reduce using rule 56 (modifier -> FINAL .)
    INT             reduce using rule 56 (modifier -> FINAL .)
    LONG            reduce using rule 56 (modifier -> FINAL .)
    CHAR            reduce using rule 56 (modifier -> FINAL .)
    FLOAT           reduce using rule 56 (modifier -> FINAL .)
    DOUBLE          reduce using rule 56 (modifier -> FINAL .)
    STRING          reduce using rule 56 (modifier -> FINAL .)
    NAME            reduce using rule 56 (modifier -> FINAL .)


state 16

    (57) modifier -> NATIVE .

    PUBLIC          reduce using rule 57 (modifier -> NATIVE .)
    PROTECTED       reduce using rule 57 (modifier -> NATIVE .)
    PRIVATE         reduce using rule 57 (modifier -> NATIVE .)
    STATIC          reduce using rule 57 (modifier -> NATIVE .)
    ABSTRACT        reduce using rule 57 (modifier -> NATIVE .)
    FINAL           reduce using rule 57 (modifier -> NATIVE .)
    NATIVE          reduce using rule 57 (modifier -> NATIVE .)
    CLASS           reduce using rule 57 (modifier -> NATIVE .)
    BOOLEAN         reduce using rule 57 (modifier -> NATIVE .)
    VOID            reduce using rule 57 (modifier -> NATIVE .)
    BYTE            reduce using rule 57 (modifier -> NATIVE .)
    SHORT           reduce using rule 57 (modifier -> NATIVE .)
    INT             reduce using rule 57 (modifier -> NATIVE .)
    LONG            reduce using rule 57 (modifier -> NATIVE .)
    CHAR            reduce using rule 57 (modifier -> NATIVE .)
    FLOAT           reduce using rule 57 (modifier -> NATIVE .)
    DOUBLE          reduce using rule 57 (modifier -> NATIVE .)
    STRING          reduce using rule 57 (modifier -> NATIVE .)
    NAME            reduce using rule 57 (modifier -> NATIVE .)


state 17

    (3) type_declarations -> type_declarations , . type_declaration
    (4) type_declaration -> . class_declaration
    (6) class_declaration -> . class_header_name class_body
    (5) class_header_name -> . modifiers_opt CLASS NAME
    (7) modifiers_opt -> . modifiers
    (8) modifiers_opt -> . empty
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (62) empty -> .
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE

    CLASS           reduce using rule 62 (empty -> .)
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16

    type_declaration               shift and go to state 23
    class_declaration              shift and go to state 4
    class_header_name              shift and go to state 5
    modifiers_opt                  shift and go to state 6
    modifiers                      shift and go to state 7
    empty                          shift and go to state 8
    modifier                       shift and go to state 9

state 18

    (6) class_declaration -> class_header_name class_body .

    ,               reduce using rule 6 (class_declaration -> class_header_name class_body .)
    $end            reduce using rule 6 (class_declaration -> class_header_name class_body .)


state 19

    (11) class_body -> opening_bracket . classbodydecllist closing_bracket
    (17) classbodydecllist -> . classbodydecl
    (18) classbodydecllist -> . classbodydecllist classbodydecl
    (19) classbodydecl -> . method_declaration
    (20) classbodydecl -> . tmain
    (21) classbodydecl -> . field_declartaion
    (23) method_declaration -> . abstract_method_declaration
    (24) method_declaration -> . method_header opening_bracket method_body closing_bracket
    (12) tmain -> . tmain_header opening_bracket method_body closing_bracket
    (22) field_declartaion -> . modifiers_opt type variable_declarators ;
    (25) abstract_method_declaration -> . method_header ;
    (26) method_header -> . method_header_name ( formal_parameter_list_opt )
    (13) tmain_header -> . tmain_name ( formal_parameter_list_opt )
    (7) modifiers_opt -> . modifiers
    (8) modifiers_opt -> . empty
    (27) method_header_name -> . modifiers_opt type NAME
    (14) tmain_name -> . modifiers_opt type MAIN
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (62) empty -> .
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE

    BOOLEAN         reduce using rule 62 (empty -> .)
    VOID            reduce using rule 62 (empty -> .)
    BYTE            reduce using rule 62 (empty -> .)
    SHORT           reduce using rule 62 (empty -> .)
    INT             reduce using rule 62 (empty -> .)
    LONG            reduce using rule 62 (empty -> .)
    CHAR            reduce using rule 62 (empty -> .)
    FLOAT           reduce using rule 62 (empty -> .)
    DOUBLE          reduce using rule 62 (empty -> .)
    STRING          reduce using rule 62 (empty -> .)
    NAME            reduce using rule 62 (empty -> .)
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16

    classbodydecllist              shift and go to state 24
    classbodydecl                  shift and go to state 25
    method_declaration             shift and go to state 26
    tmain                          shift and go to state 27
    field_declartaion              shift and go to state 28
    abstract_method_declaration    shift and go to state 29
    method_header                  shift and go to state 30
    tmain_header                   shift and go to state 31
    modifiers_opt                  shift and go to state 32
    method_header_name             shift and go to state 33
    tmain_name                     shift and go to state 34
    modifiers                      shift and go to state 7
    empty                          shift and go to state 8
    modifier                       shift and go to state 9

state 20

    (15) opening_bracket -> { .

    PUBLIC          reduce using rule 15 (opening_bracket -> { .)
    PROTECTED       reduce using rule 15 (opening_bracket -> { .)
    PRIVATE         reduce using rule 15 (opening_bracket -> { .)
    STATIC          reduce using rule 15 (opening_bracket -> { .)
    ABSTRACT        reduce using rule 15 (opening_bracket -> { .)
    FINAL           reduce using rule 15 (opening_bracket -> { .)
    NATIVE          reduce using rule 15 (opening_bracket -> { .)
    BOOLEAN         reduce using rule 15 (opening_bracket -> { .)
    VOID            reduce using rule 15 (opening_bracket -> { .)
    BYTE            reduce using rule 15 (opening_bracket -> { .)
    SHORT           reduce using rule 15 (opening_bracket -> { .)
    INT             reduce using rule 15 (opening_bracket -> { .)
    LONG            reduce using rule 15 (opening_bracket -> { .)
    CHAR            reduce using rule 15 (opening_bracket -> { .)
    FLOAT           reduce using rule 15 (opening_bracket -> { .)
    DOUBLE          reduce using rule 15 (opening_bracket -> { .)
    STRING          reduce using rule 15 (opening_bracket -> { .)
    NAME            reduce using rule 15 (opening_bracket -> { .)
    ;               reduce using rule 15 (opening_bracket -> { .)
    IF              reduce using rule 15 (opening_bracket -> { .)
    WHILE           reduce using rule 15 (opening_bracket -> { .)
    DO              reduce using rule 15 (opening_bracket -> { .)
    BREAK           reduce using rule 15 (opening_bracket -> { .)
    RETURN          reduce using rule 15 (opening_bracket -> { .)
    CONTINUE        reduce using rule 15 (opening_bracket -> { .)
    +               reduce using rule 15 (opening_bracket -> { .)
    -               reduce using rule 15 (opening_bracket -> { .)
    PLUSPLUS        reduce using rule 15 (opening_bracket -> { .)
    MINUSMINUS      reduce using rule 15 (opening_bracket -> { .)
    NUM             reduce using rule 15 (opening_bracket -> { .)
    CHAR_LITERAL    reduce using rule 15 (opening_bracket -> { .)
    STRING_LITERAL  reduce using rule 15 (opening_bracket -> { .)
    TRUE            reduce using rule 15 (opening_bracket -> { .)
    FALSE           reduce using rule 15 (opening_bracket -> { .)
    NULL            reduce using rule 15 (opening_bracket -> { .)


state 21

    (5) class_header_name -> modifiers_opt CLASS . NAME

    NAME            shift and go to state 35


state 22

    (10) modifiers -> modifiers modifier .

    PUBLIC          reduce using rule 10 (modifiers -> modifiers modifier .)
    PROTECTED       reduce using rule 10 (modifiers -> modifiers modifier .)
    PRIVATE         reduce using rule 10 (modifiers -> modifiers modifier .)
    STATIC          reduce using rule 10 (modifiers -> modifiers modifier .)
    ABSTRACT        reduce using rule 10 (modifiers -> modifiers modifier .)
    FINAL           reduce using rule 10 (modifiers -> modifiers modifier .)
    NATIVE          reduce using rule 10 (modifiers -> modifiers modifier .)
    CLASS           reduce using rule 10 (modifiers -> modifiers modifier .)
    BOOLEAN         reduce using rule 10 (modifiers -> modifiers modifier .)
    VOID            reduce using rule 10 (modifiers -> modifiers modifier .)
    BYTE            reduce using rule 10 (modifiers -> modifiers modifier .)
    SHORT           reduce using rule 10 (modifiers -> modifiers modifier .)
    INT             reduce using rule 10 (modifiers -> modifiers modifier .)
    LONG            reduce using rule 10 (modifiers -> modifiers modifier .)
    CHAR            reduce using rule 10 (modifiers -> modifiers modifier .)
    FLOAT           reduce using rule 10 (modifiers -> modifiers modifier .)
    DOUBLE          reduce using rule 10 (modifiers -> modifiers modifier .)
    STRING          reduce using rule 10 (modifiers -> modifiers modifier .)
    NAME            reduce using rule 10 (modifiers -> modifiers modifier .)


state 23

    (3) type_declarations -> type_declarations , type_declaration .

    ,               reduce using rule 3 (type_declarations -> type_declarations , type_declaration .)
    $end            reduce using rule 3 (type_declarations -> type_declarations , type_declaration .)


state 24

    (11) class_body -> opening_bracket classbodydecllist . closing_bracket
    (18) classbodydecllist -> classbodydecllist . classbodydecl
    (16) closing_bracket -> . }
    (19) classbodydecl -> . method_declaration
    (20) classbodydecl -> . tmain
    (21) classbodydecl -> . field_declartaion
    (23) method_declaration -> . abstract_method_declaration
    (24) method_declaration -> . method_header opening_bracket method_body closing_bracket
    (12) tmain -> . tmain_header opening_bracket method_body closing_bracket
    (22) field_declartaion -> . modifiers_opt type variable_declarators ;
    (25) abstract_method_declaration -> . method_header ;
    (26) method_header -> . method_header_name ( formal_parameter_list_opt )
    (13) tmain_header -> . tmain_name ( formal_parameter_list_opt )
    (7) modifiers_opt -> . modifiers
    (8) modifiers_opt -> . empty
    (27) method_header_name -> . modifiers_opt type NAME
    (14) tmain_name -> . modifiers_opt type MAIN
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (62) empty -> .
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE

    }               shift and go to state 38
    BOOLEAN         reduce using rule 62 (empty -> .)
    VOID            reduce using rule 62 (empty -> .)
    BYTE            reduce using rule 62 (empty -> .)
    SHORT           reduce using rule 62 (empty -> .)
    INT             reduce using rule 62 (empty -> .)
    LONG            reduce using rule 62 (empty -> .)
    CHAR            reduce using rule 62 (empty -> .)
    FLOAT           reduce using rule 62 (empty -> .)
    DOUBLE          reduce using rule 62 (empty -> .)
    STRING          reduce using rule 62 (empty -> .)
    NAME            reduce using rule 62 (empty -> .)
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16

    closing_bracket                shift and go to state 36
    classbodydecl                  shift and go to state 37
    method_declaration             shift and go to state 26
    tmain                          shift and go to state 27
    field_declartaion              shift and go to state 28
    abstract_method_declaration    shift and go to state 29
    method_header                  shift and go to state 30
    tmain_header                   shift and go to state 31
    modifiers_opt                  shift and go to state 32
    method_header_name             shift and go to state 33
    tmain_name                     shift and go to state 34
    modifiers                      shift and go to state 7
    empty                          shift and go to state 8
    modifier                       shift and go to state 9

state 25

    (17) classbodydecllist -> classbodydecl .

    }               reduce using rule 17 (classbodydecllist -> classbodydecl .)
    PUBLIC          reduce using rule 17 (classbodydecllist -> classbodydecl .)
    PROTECTED       reduce using rule 17 (classbodydecllist -> classbodydecl .)
    PRIVATE         reduce using rule 17 (classbodydecllist -> classbodydecl .)
    STATIC          reduce using rule 17 (classbodydecllist -> classbodydecl .)
    ABSTRACT        reduce using rule 17 (classbodydecllist -> classbodydecl .)
    FINAL           reduce using rule 17 (classbodydecllist -> classbodydecl .)
    NATIVE          reduce using rule 17 (classbodydecllist -> classbodydecl .)
    BOOLEAN         reduce using rule 17 (classbodydecllist -> classbodydecl .)
    VOID            reduce using rule 17 (classbodydecllist -> classbodydecl .)
    BYTE            reduce using rule 17 (classbodydecllist -> classbodydecl .)
    SHORT           reduce using rule 17 (classbodydecllist -> classbodydecl .)
    INT             reduce using rule 17 (classbodydecllist -> classbodydecl .)
    LONG            reduce using rule 17 (classbodydecllist -> classbodydecl .)
    CHAR            reduce using rule 17 (classbodydecllist -> classbodydecl .)
    FLOAT           reduce using rule 17 (classbodydecllist -> classbodydecl .)
    DOUBLE          reduce using rule 17 (classbodydecllist -> classbodydecl .)
    STRING          reduce using rule 17 (classbodydecllist -> classbodydecl .)
    NAME            reduce using rule 17 (classbodydecllist -> classbodydecl .)


state 26

    (19) classbodydecl -> method_declaration .

    }               reduce using rule 19 (classbodydecl -> method_declaration .)
    PUBLIC          reduce using rule 19 (classbodydecl -> method_declaration .)
    PROTECTED       reduce using rule 19 (classbodydecl -> method_declaration .)
    PRIVATE         reduce using rule 19 (classbodydecl -> method_declaration .)
    STATIC          reduce using rule 19 (classbodydecl -> method_declaration .)
    ABSTRACT        reduce using rule 19 (classbodydecl -> method_declaration .)
    FINAL           reduce using rule 19 (classbodydecl -> method_declaration .)
    NATIVE          reduce using rule 19 (classbodydecl -> method_declaration .)
    BOOLEAN         reduce using rule 19 (classbodydecl -> method_declaration .)
    VOID            reduce using rule 19 (classbodydecl -> method_declaration .)
    BYTE            reduce using rule 19 (classbodydecl -> method_declaration .)
    SHORT           reduce using rule 19 (classbodydecl -> method_declaration .)
    INT             reduce using rule 19 (classbodydecl -> method_declaration .)
    LONG            reduce using rule 19 (classbodydecl -> method_declaration .)
    CHAR            reduce using rule 19 (classbodydecl -> method_declaration .)
    FLOAT           reduce using rule 19 (classbodydecl -> method_declaration .)
    DOUBLE          reduce using rule 19 (classbodydecl -> method_declaration .)
    STRING          reduce using rule 19 (classbodydecl -> method_declaration .)
    NAME            reduce using rule 19 (classbodydecl -> method_declaration .)


state 27

    (20) classbodydecl -> tmain .

    }               reduce using rule 20 (classbodydecl -> tmain .)
    PUBLIC          reduce using rule 20 (classbodydecl -> tmain .)
    PROTECTED       reduce using rule 20 (classbodydecl -> tmain .)
    PRIVATE         reduce using rule 20 (classbodydecl -> tmain .)
    STATIC          reduce using rule 20 (classbodydecl -> tmain .)
    ABSTRACT        reduce using rule 20 (classbodydecl -> tmain .)
    FINAL           reduce using rule 20 (classbodydecl -> tmain .)
    NATIVE          reduce using rule 20 (classbodydecl -> tmain .)
    BOOLEAN         reduce using rule 20 (classbodydecl -> tmain .)
    VOID            reduce using rule 20 (classbodydecl -> tmain .)
    BYTE            reduce using rule 20 (classbodydecl -> tmain .)
    SHORT           reduce using rule 20 (classbodydecl -> tmain .)
    INT             reduce using rule 20 (classbodydecl -> tmain .)
    LONG            reduce using rule 20 (classbodydecl -> tmain .)
    CHAR            reduce using rule 20 (classbodydecl -> tmain .)
    FLOAT           reduce using rule 20 (classbodydecl -> tmain .)
    DOUBLE          reduce using rule 20 (classbodydecl -> tmain .)
    STRING          reduce using rule 20 (classbodydecl -> tmain .)
    NAME            reduce using rule 20 (classbodydecl -> tmain .)


state 28

    (21) classbodydecl -> field_declartaion .

    }               reduce using rule 21 (classbodydecl -> field_declartaion .)
    PUBLIC          reduce using rule 21 (classbodydecl -> field_declartaion .)
    PROTECTED       reduce using rule 21 (classbodydecl -> field_declartaion .)
    PRIVATE         reduce using rule 21 (classbodydecl -> field_declartaion .)
    STATIC          reduce using rule 21 (classbodydecl -> field_declartaion .)
    ABSTRACT        reduce using rule 21 (classbodydecl -> field_declartaion .)
    FINAL           reduce using rule 21 (classbodydecl -> field_declartaion .)
    NATIVE          reduce using rule 21 (classbodydecl -> field_declartaion .)
    BOOLEAN         reduce using rule 21 (classbodydecl -> field_declartaion .)
    VOID            reduce using rule 21 (classbodydecl -> field_declartaion .)
    BYTE            reduce using rule 21 (classbodydecl -> field_declartaion .)
    SHORT           reduce using rule 21 (classbodydecl -> field_declartaion .)
    INT             reduce using rule 21 (classbodydecl -> field_declartaion .)
    LONG            reduce using rule 21 (classbodydecl -> field_declartaion .)
    CHAR            reduce using rule 21 (classbodydecl -> field_declartaion .)
    FLOAT           reduce using rule 21 (classbodydecl -> field_declartaion .)
    DOUBLE          reduce using rule 21 (classbodydecl -> field_declartaion .)
    STRING          reduce using rule 21 (classbodydecl -> field_declartaion .)
    NAME            reduce using rule 21 (classbodydecl -> field_declartaion .)


state 29

    (23) method_declaration -> abstract_method_declaration .

    }               reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    PUBLIC          reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    PROTECTED       reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    PRIVATE         reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    STATIC          reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    ABSTRACT        reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    FINAL           reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    NATIVE          reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    BOOLEAN         reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    VOID            reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    BYTE            reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    SHORT           reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    INT             reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    LONG            reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    CHAR            reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    FLOAT           reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    DOUBLE          reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    STRING          reduce using rule 23 (method_declaration -> abstract_method_declaration .)
    NAME            reduce using rule 23 (method_declaration -> abstract_method_declaration .)


state 30

    (24) method_declaration -> method_header . opening_bracket method_body closing_bracket
    (25) abstract_method_declaration -> method_header . ;
    (15) opening_bracket -> . {

    ;               shift and go to state 40
    {               shift and go to state 20

    opening_bracket                shift and go to state 39

state 31

    (12) tmain -> tmain_header . opening_bracket method_body closing_bracket
    (15) opening_bracket -> . {

    {               shift and go to state 20

    opening_bracket                shift and go to state 41

state 32

    (22) field_declartaion -> modifiers_opt . type variable_declarators ;
    (27) method_header_name -> modifiers_opt . type NAME
    (14) tmain_name -> modifiers_opt . type MAIN
    (35) type -> . primitive_type
    (36) type -> . array_type
    (41) primitive_type -> . BOOLEAN
    (42) primitive_type -> . VOID
    (43) primitive_type -> . BYTE
    (44) primitive_type -> . SHORT
    (45) primitive_type -> . INT
    (46) primitive_type -> . LONG
    (47) primitive_type -> . CHAR
    (48) primitive_type -> . FLOAT
    (49) primitive_type -> . DOUBLE
    (50) primitive_type -> . STRING
    (37) array_type -> . primitive_type dims
    (38) array_type -> . name dims
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 46
    VOID            shift and go to state 47
    BYTE            shift and go to state 48
    SHORT           shift and go to state 49
    INT             shift and go to state 50
    LONG            shift and go to state 51
    CHAR            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    NAME            shift and go to state 43

    type                           shift and go to state 42
    primitive_type                 shift and go to state 44
    array_type                     shift and go to state 45
    name                           shift and go to state 56
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 33

    (26) method_header -> method_header_name . ( formal_parameter_list_opt )

    (               shift and go to state 59


state 34

    (13) tmain_header -> tmain_name . ( formal_parameter_list_opt )

    (               shift and go to state 60


state 35

    (5) class_header_name -> modifiers_opt CLASS NAME .

    {               reduce using rule 5 (class_header_name -> modifiers_opt CLASS NAME .)


state 36

    (11) class_body -> opening_bracket classbodydecllist closing_bracket .

    ,               reduce using rule 11 (class_body -> opening_bracket classbodydecllist closing_bracket .)
    $end            reduce using rule 11 (class_body -> opening_bracket classbodydecllist closing_bracket .)


state 37

    (18) classbodydecllist -> classbodydecllist classbodydecl .

    }               reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    PUBLIC          reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    PROTECTED       reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    PRIVATE         reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    STATIC          reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    ABSTRACT        reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    FINAL           reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    NATIVE          reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    BOOLEAN         reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    VOID            reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    BYTE            reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    SHORT           reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    INT             reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    LONG            reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    CHAR            reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    FLOAT           reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    DOUBLE          reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    STRING          reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    NAME            reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)


state 38

    (16) closing_bracket -> } .

    ,               reduce using rule 16 (closing_bracket -> } .)
    $end            reduce using rule 16 (closing_bracket -> } .)
    }               reduce using rule 16 (closing_bracket -> } .)
    PUBLIC          reduce using rule 16 (closing_bracket -> } .)
    PROTECTED       reduce using rule 16 (closing_bracket -> } .)
    PRIVATE         reduce using rule 16 (closing_bracket -> } .)
    STATIC          reduce using rule 16 (closing_bracket -> } .)
    ABSTRACT        reduce using rule 16 (closing_bracket -> } .)
    FINAL           reduce using rule 16 (closing_bracket -> } .)
    NATIVE          reduce using rule 16 (closing_bracket -> } .)
    BOOLEAN         reduce using rule 16 (closing_bracket -> } .)
    VOID            reduce using rule 16 (closing_bracket -> } .)
    BYTE            reduce using rule 16 (closing_bracket -> } .)
    SHORT           reduce using rule 16 (closing_bracket -> } .)
    INT             reduce using rule 16 (closing_bracket -> } .)
    LONG            reduce using rule 16 (closing_bracket -> } .)
    CHAR            reduce using rule 16 (closing_bracket -> } .)
    FLOAT           reduce using rule 16 (closing_bracket -> } .)
    DOUBLE          reduce using rule 16 (closing_bracket -> } .)
    STRING          reduce using rule 16 (closing_bracket -> } .)
    NAME            reduce using rule 16 (closing_bracket -> } .)
    WHILE           reduce using rule 16 (closing_bracket -> } .)
    ELSE            reduce using rule 16 (closing_bracket -> } .)
    ;               reduce using rule 16 (closing_bracket -> } .)
    IF              reduce using rule 16 (closing_bracket -> } .)
    DO              reduce using rule 16 (closing_bracket -> } .)
    BREAK           reduce using rule 16 (closing_bracket -> } .)
    RETURN          reduce using rule 16 (closing_bracket -> } .)
    CONTINUE        reduce using rule 16 (closing_bracket -> } .)
    +               reduce using rule 16 (closing_bracket -> } .)
    -               reduce using rule 16 (closing_bracket -> } .)
    PLUSPLUS        reduce using rule 16 (closing_bracket -> } .)
    MINUSMINUS      reduce using rule 16 (closing_bracket -> } .)
    NUM             reduce using rule 16 (closing_bracket -> } .)
    CHAR_LITERAL    reduce using rule 16 (closing_bracket -> } .)
    STRING_LITERAL  reduce using rule 16 (closing_bracket -> } .)
    TRUE            reduce using rule 16 (closing_bracket -> } .)
    FALSE           reduce using rule 16 (closing_bracket -> } .)
    NULL            reduce using rule 16 (closing_bracket -> } .)


state 39

    (24) method_declaration -> method_header opening_bracket . method_body closing_bracket
    (28) method_body -> . block_statements
    (63) block_statements -> . block_statement
    (64) block_statements -> . block_statements block_statement
    (65) block_statement -> . local_variable_declaration_statement
    (66) block_statement -> . statement
    (67) local_variable_declaration_statement -> . local_variable_declaration ;
    (75) statement -> . other_statement
    (76) statement -> . if_then_statement
    (77) statement -> . if_then_else_statement
    (78) statement -> . while_statement
    (79) statement -> . do_while_statement
    (68) local_variable_declaration -> . type variable_declarators
    (69) local_variable_declaration -> . modifiers type variable_declarators
    (80) other_statement -> . expression_statement
    (81) other_statement -> . break_statement
    (82) other_statement -> . return_statement
    (83) other_statement -> . continue_statement
    (84) other_statement -> . ;
    (99) if_then_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket
    (100) if_then_else_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket else
    (102) while_statement -> . WHILE ( expression ) opening_bracket block_statements closing_bracket
    (103) do_while_statement -> . DO opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (35) type -> . primitive_type
    (36) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (85) expression_statement -> . statement_expression ;
    (93) break_statement -> . BREAK ;
    (94) break_statement -> . BREAK NAME ;
    (95) return_statement -> . RETURN expression_opt ;
    (98) continue_statement -> . CONTINUE ;
    (41) primitive_type -> . BOOLEAN
    (42) primitive_type -> . VOID
    (43) primitive_type -> . BYTE
    (44) primitive_type -> . SHORT
    (45) primitive_type -> . INT
    (46) primitive_type -> . LONG
    (47) primitive_type -> . CHAR
    (48) primitive_type -> . FLOAT
    (49) primitive_type -> . DOUBLE
    (50) primitive_type -> . STRING
    (37) array_type -> . primitive_type dims
    (38) array_type -> . name dims
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE
    (86) statement_expression -> . assignment
    (87) statement_expression -> . unary_expression
    (88) statement_expression -> . method_invocation
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (89) method_invocation -> . NAME ( argument_list )
    (90) method_invocation -> . NAME ( )
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]

    ;               shift and go to state 67
    IF              shift and go to state 79
    WHILE           shift and go to state 80
    DO              shift and go to state 81
    BREAK           shift and go to state 83
    RETURN          shift and go to state 85
    CONTINUE        shift and go to state 86
    BOOLEAN         shift and go to state 46
    VOID            shift and go to state 47
    BYTE            shift and go to state 48
    SHORT           shift and go to state 49
    INT             shift and go to state 50
    LONG            shift and go to state 51
    CHAR            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    +               shift and go to state 94
    -               shift and go to state 95
    NAME            shift and go to state 84
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108

    method_body                    shift and go to state 61
    block_statements               shift and go to state 62
    block_statement                shift and go to state 63
    local_variable_declaration_statement shift and go to state 64
    statement                      shift and go to state 65
    local_variable_declaration     shift and go to state 66
    other_statement                shift and go to state 68
    if_then_statement              shift and go to state 69
    if_then_else_statement         shift and go to state 70
    while_statement                shift and go to state 71
    do_while_statement             shift and go to state 72
    type                           shift and go to state 73
    modifiers                      shift and go to state 74
    expression_statement           shift and go to state 75
    break_statement                shift and go to state 76
    return_statement               shift and go to state 77
    continue_statement             shift and go to state 78
    primitive_type                 shift and go to state 44
    array_type                     shift and go to state 45
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 82
    name                           shift and go to state 87
    assignment                     shift and go to state 88
    unary_expression               shift and go to state 89
    method_invocation              shift and go to state 90
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    postfix_expression             shift and go to state 91
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    primary                        shift and go to state 96
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102

state 40

    (25) abstract_method_declaration -> method_header ; .

    }               reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    PUBLIC          reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    PROTECTED       reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    PRIVATE         reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    STATIC          reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    ABSTRACT        reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    FINAL           reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    NATIVE          reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    BOOLEAN         reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    VOID            reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    BYTE            reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    SHORT           reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    INT             reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    LONG            reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    CHAR            reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    FLOAT           reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    DOUBLE          reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    STRING          reduce using rule 25 (abstract_method_declaration -> method_header ; .)
    NAME            reduce using rule 25 (abstract_method_declaration -> method_header ; .)


state 41

    (12) tmain -> tmain_header opening_bracket . method_body closing_bracket
    (28) method_body -> . block_statements
    (63) block_statements -> . block_statement
    (64) block_statements -> . block_statements block_statement
    (65) block_statement -> . local_variable_declaration_statement
    (66) block_statement -> . statement
    (67) local_variable_declaration_statement -> . local_variable_declaration ;
    (75) statement -> . other_statement
    (76) statement -> . if_then_statement
    (77) statement -> . if_then_else_statement
    (78) statement -> . while_statement
    (79) statement -> . do_while_statement
    (68) local_variable_declaration -> . type variable_declarators
    (69) local_variable_declaration -> . modifiers type variable_declarators
    (80) other_statement -> . expression_statement
    (81) other_statement -> . break_statement
    (82) other_statement -> . return_statement
    (83) other_statement -> . continue_statement
    (84) other_statement -> . ;
    (99) if_then_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket
    (100) if_then_else_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket else
    (102) while_statement -> . WHILE ( expression ) opening_bracket block_statements closing_bracket
    (103) do_while_statement -> . DO opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (35) type -> . primitive_type
    (36) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (85) expression_statement -> . statement_expression ;
    (93) break_statement -> . BREAK ;
    (94) break_statement -> . BREAK NAME ;
    (95) return_statement -> . RETURN expression_opt ;
    (98) continue_statement -> . CONTINUE ;
    (41) primitive_type -> . BOOLEAN
    (42) primitive_type -> . VOID
    (43) primitive_type -> . BYTE
    (44) primitive_type -> . SHORT
    (45) primitive_type -> . INT
    (46) primitive_type -> . LONG
    (47) primitive_type -> . CHAR
    (48) primitive_type -> . FLOAT
    (49) primitive_type -> . DOUBLE
    (50) primitive_type -> . STRING
    (37) array_type -> . primitive_type dims
    (38) array_type -> . name dims
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE
    (86) statement_expression -> . assignment
    (87) statement_expression -> . unary_expression
    (88) statement_expression -> . method_invocation
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (89) method_invocation -> . NAME ( argument_list )
    (90) method_invocation -> . NAME ( )
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]

    ;               shift and go to state 67
    IF              shift and go to state 79
    WHILE           shift and go to state 80
    DO              shift and go to state 81
    BREAK           shift and go to state 83
    RETURN          shift and go to state 85
    CONTINUE        shift and go to state 86
    BOOLEAN         shift and go to state 46
    VOID            shift and go to state 47
    BYTE            shift and go to state 48
    SHORT           shift and go to state 49
    INT             shift and go to state 50
    LONG            shift and go to state 51
    CHAR            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    +               shift and go to state 94
    -               shift and go to state 95
    NAME            shift and go to state 84
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108

    method_body                    shift and go to state 109
    block_statements               shift and go to state 62
    block_statement                shift and go to state 63
    local_variable_declaration_statement shift and go to state 64
    statement                      shift and go to state 65
    local_variable_declaration     shift and go to state 66
    other_statement                shift and go to state 68
    if_then_statement              shift and go to state 69
    if_then_else_statement         shift and go to state 70
    while_statement                shift and go to state 71
    do_while_statement             shift and go to state 72
    type                           shift and go to state 73
    modifiers                      shift and go to state 74
    expression_statement           shift and go to state 75
    break_statement                shift and go to state 76
    return_statement               shift and go to state 77
    continue_statement             shift and go to state 78
    primitive_type                 shift and go to state 44
    array_type                     shift and go to state 45
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 82
    name                           shift and go to state 87
    assignment                     shift and go to state 88
    unary_expression               shift and go to state 89
    method_invocation              shift and go to state 90
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    postfix_expression             shift and go to state 91
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    primary                        shift and go to state 96
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102

state 42

    (22) field_declartaion -> modifiers_opt type . variable_declarators ;
    (27) method_header_name -> modifiers_opt type . NAME
    (14) tmain_name -> modifiers_opt type . MAIN
    (70) variable_declarators -> . variable_declarator
    (71) variable_declarators -> . variable_declarators , variable_declarator
    (72) variable_declarator -> . variable_declarator_id
    (73) variable_declarator -> . variable_declarator_id = variable_initializer
    (34) variable_declarator_id -> . NAME

    NAME            shift and go to state 111
    MAIN            shift and go to state 112

    variable_declarators           shift and go to state 110
    variable_declarator            shift and go to state 113
    variable_declarator_id         shift and go to state 114

state 43

    (60) simple_name -> NAME .

    .               reduce using rule 60 (simple_name -> NAME .)
    [               reduce using rule 60 (simple_name -> NAME .)
    PLUSPLUS        reduce using rule 60 (simple_name -> NAME .)
    MINUSMINUS      reduce using rule 60 (simple_name -> NAME .)
    =               reduce using rule 60 (simple_name -> NAME .)
    TIMES_ASSIGN    reduce using rule 60 (simple_name -> NAME .)
    DIVIDE_ASSIGN   reduce using rule 60 (simple_name -> NAME .)
    REMAINDER_ASSIGN reduce using rule 60 (simple_name -> NAME .)
    PLUS_ASSIGN     reduce using rule 60 (simple_name -> NAME .)
    MINUS_ASSIGN    reduce using rule 60 (simple_name -> NAME .)
    *               reduce using rule 60 (simple_name -> NAME .)
    /               reduce using rule 60 (simple_name -> NAME .)
    %               reduce using rule 60 (simple_name -> NAME .)
    +               reduce using rule 60 (simple_name -> NAME .)
    -               reduce using rule 60 (simple_name -> NAME .)
    >               reduce using rule 60 (simple_name -> NAME .)
    <               reduce using rule 60 (simple_name -> NAME .)
    GTEQ            reduce using rule 60 (simple_name -> NAME .)
    LTEQ            reduce using rule 60 (simple_name -> NAME .)
    EQ              reduce using rule 60 (simple_name -> NAME .)
    NEQ             reduce using rule 60 (simple_name -> NAME .)
    &               reduce using rule 60 (simple_name -> NAME .)
    |               reduce using rule 60 (simple_name -> NAME .)
    AND             reduce using rule 60 (simple_name -> NAME .)
    OR              reduce using rule 60 (simple_name -> NAME .)
    ;               reduce using rule 60 (simple_name -> NAME .)
    )               reduce using rule 60 (simple_name -> NAME .)
    ,               reduce using rule 60 (simple_name -> NAME .)
    ]               reduce using rule 60 (simple_name -> NAME .)


state 44

    (35) type -> primitive_type .
    (37) array_type -> primitive_type . dims
    (39) dims -> . [ ]
    (40) dims -> . dims [ ]

    NAME            reduce using rule 35 (type -> primitive_type .)
    MAIN            reduce using rule 35 (type -> primitive_type .)
    [               shift and go to state 116

    dims                           shift and go to state 115

state 45

    (36) type -> array_type .

    NAME            reduce using rule 36 (type -> array_type .)
    MAIN            reduce using rule 36 (type -> array_type .)


state 46

    (41) primitive_type -> BOOLEAN .

    [               reduce using rule 41 (primitive_type -> BOOLEAN .)
    NAME            reduce using rule 41 (primitive_type -> BOOLEAN .)
    MAIN            reduce using rule 41 (primitive_type -> BOOLEAN .)


state 47

    (42) primitive_type -> VOID .

    [               reduce using rule 42 (primitive_type -> VOID .)
    NAME            reduce using rule 42 (primitive_type -> VOID .)
    MAIN            reduce using rule 42 (primitive_type -> VOID .)


state 48

    (43) primitive_type -> BYTE .

    [               reduce using rule 43 (primitive_type -> BYTE .)
    NAME            reduce using rule 43 (primitive_type -> BYTE .)
    MAIN            reduce using rule 43 (primitive_type -> BYTE .)


state 49

    (44) primitive_type -> SHORT .

    [               reduce using rule 44 (primitive_type -> SHORT .)
    NAME            reduce using rule 44 (primitive_type -> SHORT .)
    MAIN            reduce using rule 44 (primitive_type -> SHORT .)


state 50

    (45) primitive_type -> INT .

    [               reduce using rule 45 (primitive_type -> INT .)
    NAME            reduce using rule 45 (primitive_type -> INT .)
    MAIN            reduce using rule 45 (primitive_type -> INT .)


state 51

    (46) primitive_type -> LONG .

    [               reduce using rule 46 (primitive_type -> LONG .)
    NAME            reduce using rule 46 (primitive_type -> LONG .)
    MAIN            reduce using rule 46 (primitive_type -> LONG .)


state 52

    (47) primitive_type -> CHAR .

    [               reduce using rule 47 (primitive_type -> CHAR .)
    NAME            reduce using rule 47 (primitive_type -> CHAR .)
    MAIN            reduce using rule 47 (primitive_type -> CHAR .)


state 53

    (48) primitive_type -> FLOAT .

    [               reduce using rule 48 (primitive_type -> FLOAT .)
    NAME            reduce using rule 48 (primitive_type -> FLOAT .)
    MAIN            reduce using rule 48 (primitive_type -> FLOAT .)


state 54

    (49) primitive_type -> DOUBLE .

    [               reduce using rule 49 (primitive_type -> DOUBLE .)
    NAME            reduce using rule 49 (primitive_type -> DOUBLE .)
    MAIN            reduce using rule 49 (primitive_type -> DOUBLE .)


state 55

    (50) primitive_type -> STRING .

    [               reduce using rule 50 (primitive_type -> STRING .)
    NAME            reduce using rule 50 (primitive_type -> STRING .)
    MAIN            reduce using rule 50 (primitive_type -> STRING .)


state 56

    (38) array_type -> name . dims
    (61) qualified_name -> name . . simple_name
    (39) dims -> . [ ]
    (40) dims -> . dims [ ]

    .               shift and go to state 118
    [               shift and go to state 116

    dims                           shift and go to state 117

state 57

    (58) name -> simple_name .

    .               reduce using rule 58 (name -> simple_name .)
    [               reduce using rule 58 (name -> simple_name .)
    PLUSPLUS        reduce using rule 58 (name -> simple_name .)
    MINUSMINUS      reduce using rule 58 (name -> simple_name .)
    =               reduce using rule 58 (name -> simple_name .)
    TIMES_ASSIGN    reduce using rule 58 (name -> simple_name .)
    DIVIDE_ASSIGN   reduce using rule 58 (name -> simple_name .)
    REMAINDER_ASSIGN reduce using rule 58 (name -> simple_name .)
    PLUS_ASSIGN     reduce using rule 58 (name -> simple_name .)
    MINUS_ASSIGN    reduce using rule 58 (name -> simple_name .)
    ;               reduce using rule 58 (name -> simple_name .)
    *               reduce using rule 58 (name -> simple_name .)
    /               reduce using rule 58 (name -> simple_name .)
    %               reduce using rule 58 (name -> simple_name .)
    +               reduce using rule 58 (name -> simple_name .)
    -               reduce using rule 58 (name -> simple_name .)
    >               reduce using rule 58 (name -> simple_name .)
    <               reduce using rule 58 (name -> simple_name .)
    GTEQ            reduce using rule 58 (name -> simple_name .)
    LTEQ            reduce using rule 58 (name -> simple_name .)
    EQ              reduce using rule 58 (name -> simple_name .)
    NEQ             reduce using rule 58 (name -> simple_name .)
    &               reduce using rule 58 (name -> simple_name .)
    |               reduce using rule 58 (name -> simple_name .)
    AND             reduce using rule 58 (name -> simple_name .)
    OR              reduce using rule 58 (name -> simple_name .)
    )               reduce using rule 58 (name -> simple_name .)
    ,               reduce using rule 58 (name -> simple_name .)
    ]               reduce using rule 58 (name -> simple_name .)


state 58

    (59) name -> qualified_name .

    .               reduce using rule 59 (name -> qualified_name .)
    [               reduce using rule 59 (name -> qualified_name .)
    PLUSPLUS        reduce using rule 59 (name -> qualified_name .)
    MINUSMINUS      reduce using rule 59 (name -> qualified_name .)
    =               reduce using rule 59 (name -> qualified_name .)
    TIMES_ASSIGN    reduce using rule 59 (name -> qualified_name .)
    DIVIDE_ASSIGN   reduce using rule 59 (name -> qualified_name .)
    REMAINDER_ASSIGN reduce using rule 59 (name -> qualified_name .)
    PLUS_ASSIGN     reduce using rule 59 (name -> qualified_name .)
    MINUS_ASSIGN    reduce using rule 59 (name -> qualified_name .)
    ;               reduce using rule 59 (name -> qualified_name .)
    *               reduce using rule 59 (name -> qualified_name .)
    /               reduce using rule 59 (name -> qualified_name .)
    %               reduce using rule 59 (name -> qualified_name .)
    +               reduce using rule 59 (name -> qualified_name .)
    -               reduce using rule 59 (name -> qualified_name .)
    >               reduce using rule 59 (name -> qualified_name .)
    <               reduce using rule 59 (name -> qualified_name .)
    GTEQ            reduce using rule 59 (name -> qualified_name .)
    LTEQ            reduce using rule 59 (name -> qualified_name .)
    EQ              reduce using rule 59 (name -> qualified_name .)
    NEQ             reduce using rule 59 (name -> qualified_name .)
    &               reduce using rule 59 (name -> qualified_name .)
    |               reduce using rule 59 (name -> qualified_name .)
    AND             reduce using rule 59 (name -> qualified_name .)
    OR              reduce using rule 59 (name -> qualified_name .)
    )               reduce using rule 59 (name -> qualified_name .)
    ,               reduce using rule 59 (name -> qualified_name .)
    ]               reduce using rule 59 (name -> qualified_name .)


state 59

    (26) method_header -> method_header_name ( . formal_parameter_list_opt )
    (29) formal_parameter_list_opt -> . formal_parameter_list
    (30) formal_parameter_list_opt -> . empty
    (31) formal_parameter_list -> . formal_parameter
    (32) formal_parameter_list -> . formal_parameter_list , formal_parameter
    (62) empty -> .
    (33) formal_parameter -> . type variable_declarator_id
    (35) type -> . primitive_type
    (36) type -> . array_type
    (41) primitive_type -> . BOOLEAN
    (42) primitive_type -> . VOID
    (43) primitive_type -> . BYTE
    (44) primitive_type -> . SHORT
    (45) primitive_type -> . INT
    (46) primitive_type -> . LONG
    (47) primitive_type -> . CHAR
    (48) primitive_type -> . FLOAT
    (49) primitive_type -> . DOUBLE
    (50) primitive_type -> . STRING
    (37) array_type -> . primitive_type dims
    (38) array_type -> . name dims
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    )               reduce using rule 62 (empty -> .)
    BOOLEAN         shift and go to state 46
    VOID            shift and go to state 47
    BYTE            shift and go to state 48
    SHORT           shift and go to state 49
    INT             shift and go to state 50
    LONG            shift and go to state 51
    CHAR            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    NAME            shift and go to state 43

    formal_parameter_list_opt      shift and go to state 119
    formal_parameter_list          shift and go to state 120
    empty                          shift and go to state 121
    formal_parameter               shift and go to state 122
    type                           shift and go to state 123
    primitive_type                 shift and go to state 44
    array_type                     shift and go to state 45
    name                           shift and go to state 56
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 60

    (13) tmain_header -> tmain_name ( . formal_parameter_list_opt )
    (29) formal_parameter_list_opt -> . formal_parameter_list
    (30) formal_parameter_list_opt -> . empty
    (31) formal_parameter_list -> . formal_parameter
    (32) formal_parameter_list -> . formal_parameter_list , formal_parameter
    (62) empty -> .
    (33) formal_parameter -> . type variable_declarator_id
    (35) type -> . primitive_type
    (36) type -> . array_type
    (41) primitive_type -> . BOOLEAN
    (42) primitive_type -> . VOID
    (43) primitive_type -> . BYTE
    (44) primitive_type -> . SHORT
    (45) primitive_type -> . INT
    (46) primitive_type -> . LONG
    (47) primitive_type -> . CHAR
    (48) primitive_type -> . FLOAT
    (49) primitive_type -> . DOUBLE
    (50) primitive_type -> . STRING
    (37) array_type -> . primitive_type dims
    (38) array_type -> . name dims
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    )               reduce using rule 62 (empty -> .)
    BOOLEAN         shift and go to state 46
    VOID            shift and go to state 47
    BYTE            shift and go to state 48
    SHORT           shift and go to state 49
    INT             shift and go to state 50
    LONG            shift and go to state 51
    CHAR            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    NAME            shift and go to state 43

    formal_parameter_list_opt      shift and go to state 124
    formal_parameter_list          shift and go to state 120
    empty                          shift and go to state 121
    formal_parameter               shift and go to state 122
    type                           shift and go to state 123
    primitive_type                 shift and go to state 44
    array_type                     shift and go to state 45
    name                           shift and go to state 56
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 61

    (24) method_declaration -> method_header opening_bracket method_body . closing_bracket
    (16) closing_bracket -> . }

    }               shift and go to state 38

    closing_bracket                shift and go to state 125

state 62

    (28) method_body -> block_statements .
    (64) block_statements -> block_statements . block_statement
    (65) block_statement -> . local_variable_declaration_statement
    (66) block_statement -> . statement
    (67) local_variable_declaration_statement -> . local_variable_declaration ;
    (75) statement -> . other_statement
    (76) statement -> . if_then_statement
    (77) statement -> . if_then_else_statement
    (78) statement -> . while_statement
    (79) statement -> . do_while_statement
    (68) local_variable_declaration -> . type variable_declarators
    (69) local_variable_declaration -> . modifiers type variable_declarators
    (80) other_statement -> . expression_statement
    (81) other_statement -> . break_statement
    (82) other_statement -> . return_statement
    (83) other_statement -> . continue_statement
    (84) other_statement -> . ;
    (99) if_then_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket
    (100) if_then_else_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket else
    (102) while_statement -> . WHILE ( expression ) opening_bracket block_statements closing_bracket
    (103) do_while_statement -> . DO opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (35) type -> . primitive_type
    (36) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (85) expression_statement -> . statement_expression ;
    (93) break_statement -> . BREAK ;
    (94) break_statement -> . BREAK NAME ;
    (95) return_statement -> . RETURN expression_opt ;
    (98) continue_statement -> . CONTINUE ;
    (41) primitive_type -> . BOOLEAN
    (42) primitive_type -> . VOID
    (43) primitive_type -> . BYTE
    (44) primitive_type -> . SHORT
    (45) primitive_type -> . INT
    (46) primitive_type -> . LONG
    (47) primitive_type -> . CHAR
    (48) primitive_type -> . FLOAT
    (49) primitive_type -> . DOUBLE
    (50) primitive_type -> . STRING
    (37) array_type -> . primitive_type dims
    (38) array_type -> . name dims
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE
    (86) statement_expression -> . assignment
    (87) statement_expression -> . unary_expression
    (88) statement_expression -> . method_invocation
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (89) method_invocation -> . NAME ( argument_list )
    (90) method_invocation -> . NAME ( )
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]

    }               reduce using rule 28 (method_body -> block_statements .)
    ;               shift and go to state 67
    IF              shift and go to state 79
    WHILE           shift and go to state 80
    DO              shift and go to state 81
    BREAK           shift and go to state 83
    RETURN          shift and go to state 85
    CONTINUE        shift and go to state 86
    BOOLEAN         shift and go to state 46
    VOID            shift and go to state 47
    BYTE            shift and go to state 48
    SHORT           shift and go to state 49
    INT             shift and go to state 50
    LONG            shift and go to state 51
    CHAR            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    +               shift and go to state 94
    -               shift and go to state 95
    NAME            shift and go to state 84
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108

    block_statement                shift and go to state 126
    local_variable_declaration_statement shift and go to state 64
    statement                      shift and go to state 65
    local_variable_declaration     shift and go to state 66
    other_statement                shift and go to state 68
    if_then_statement              shift and go to state 69
    if_then_else_statement         shift and go to state 70
    while_statement                shift and go to state 71
    do_while_statement             shift and go to state 72
    type                           shift and go to state 73
    modifiers                      shift and go to state 74
    expression_statement           shift and go to state 75
    break_statement                shift and go to state 76
    return_statement               shift and go to state 77
    continue_statement             shift and go to state 78
    primitive_type                 shift and go to state 44
    array_type                     shift and go to state 45
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 82
    name                           shift and go to state 87
    assignment                     shift and go to state 88
    unary_expression               shift and go to state 89
    method_invocation              shift and go to state 90
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    postfix_expression             shift and go to state 91
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    primary                        shift and go to state 96
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102

state 63

    (63) block_statements -> block_statement .

    ;               reduce using rule 63 (block_statements -> block_statement .)
    IF              reduce using rule 63 (block_statements -> block_statement .)
    WHILE           reduce using rule 63 (block_statements -> block_statement .)
    DO              reduce using rule 63 (block_statements -> block_statement .)
    BREAK           reduce using rule 63 (block_statements -> block_statement .)
    RETURN          reduce using rule 63 (block_statements -> block_statement .)
    CONTINUE        reduce using rule 63 (block_statements -> block_statement .)
    BOOLEAN         reduce using rule 63 (block_statements -> block_statement .)
    VOID            reduce using rule 63 (block_statements -> block_statement .)
    BYTE            reduce using rule 63 (block_statements -> block_statement .)
    SHORT           reduce using rule 63 (block_statements -> block_statement .)
    INT             reduce using rule 63 (block_statements -> block_statement .)
    LONG            reduce using rule 63 (block_statements -> block_statement .)
    CHAR            reduce using rule 63 (block_statements -> block_statement .)
    FLOAT           reduce using rule 63 (block_statements -> block_statement .)
    DOUBLE          reduce using rule 63 (block_statements -> block_statement .)
    STRING          reduce using rule 63 (block_statements -> block_statement .)
    PUBLIC          reduce using rule 63 (block_statements -> block_statement .)
    PROTECTED       reduce using rule 63 (block_statements -> block_statement .)
    PRIVATE         reduce using rule 63 (block_statements -> block_statement .)
    STATIC          reduce using rule 63 (block_statements -> block_statement .)
    ABSTRACT        reduce using rule 63 (block_statements -> block_statement .)
    FINAL           reduce using rule 63 (block_statements -> block_statement .)
    NATIVE          reduce using rule 63 (block_statements -> block_statement .)
    +               reduce using rule 63 (block_statements -> block_statement .)
    -               reduce using rule 63 (block_statements -> block_statement .)
    NAME            reduce using rule 63 (block_statements -> block_statement .)
    PLUSPLUS        reduce using rule 63 (block_statements -> block_statement .)
    MINUSMINUS      reduce using rule 63 (block_statements -> block_statement .)
    NUM             reduce using rule 63 (block_statements -> block_statement .)
    CHAR_LITERAL    reduce using rule 63 (block_statements -> block_statement .)
    STRING_LITERAL  reduce using rule 63 (block_statements -> block_statement .)
    TRUE            reduce using rule 63 (block_statements -> block_statement .)
    FALSE           reduce using rule 63 (block_statements -> block_statement .)
    NULL            reduce using rule 63 (block_statements -> block_statement .)
    }               reduce using rule 63 (block_statements -> block_statement .)


state 64

    (65) block_statement -> local_variable_declaration_statement .

    ;               reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    IF              reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    WHILE           reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    DO              reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    BREAK           reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    RETURN          reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    CONTINUE        reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    BOOLEAN         reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    VOID            reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    BYTE            reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    SHORT           reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    INT             reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    LONG            reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    CHAR            reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    FLOAT           reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    DOUBLE          reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    STRING          reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    PUBLIC          reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    PROTECTED       reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    PRIVATE         reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    STATIC          reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    ABSTRACT        reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    FINAL           reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    NATIVE          reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    +               reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    -               reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    NAME            reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    PLUSPLUS        reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    MINUSMINUS      reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    NUM             reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    CHAR_LITERAL    reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    STRING_LITERAL  reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    TRUE            reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    FALSE           reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    NULL            reduce using rule 65 (block_statement -> local_variable_declaration_statement .)
    }               reduce using rule 65 (block_statement -> local_variable_declaration_statement .)


state 65

    (66) block_statement -> statement .

    ;               reduce using rule 66 (block_statement -> statement .)
    IF              reduce using rule 66 (block_statement -> statement .)
    WHILE           reduce using rule 66 (block_statement -> statement .)
    DO              reduce using rule 66 (block_statement -> statement .)
    BREAK           reduce using rule 66 (block_statement -> statement .)
    RETURN          reduce using rule 66 (block_statement -> statement .)
    CONTINUE        reduce using rule 66 (block_statement -> statement .)
    BOOLEAN         reduce using rule 66 (block_statement -> statement .)
    VOID            reduce using rule 66 (block_statement -> statement .)
    BYTE            reduce using rule 66 (block_statement -> statement .)
    SHORT           reduce using rule 66 (block_statement -> statement .)
    INT             reduce using rule 66 (block_statement -> statement .)
    LONG            reduce using rule 66 (block_statement -> statement .)
    CHAR            reduce using rule 66 (block_statement -> statement .)
    FLOAT           reduce using rule 66 (block_statement -> statement .)
    DOUBLE          reduce using rule 66 (block_statement -> statement .)
    STRING          reduce using rule 66 (block_statement -> statement .)
    PUBLIC          reduce using rule 66 (block_statement -> statement .)
    PROTECTED       reduce using rule 66 (block_statement -> statement .)
    PRIVATE         reduce using rule 66 (block_statement -> statement .)
    STATIC          reduce using rule 66 (block_statement -> statement .)
    ABSTRACT        reduce using rule 66 (block_statement -> statement .)
    FINAL           reduce using rule 66 (block_statement -> statement .)
    NATIVE          reduce using rule 66 (block_statement -> statement .)
    +               reduce using rule 66 (block_statement -> statement .)
    -               reduce using rule 66 (block_statement -> statement .)
    NAME            reduce using rule 66 (block_statement -> statement .)
    PLUSPLUS        reduce using rule 66 (block_statement -> statement .)
    MINUSMINUS      reduce using rule 66 (block_statement -> statement .)
    NUM             reduce using rule 66 (block_statement -> statement .)
    CHAR_LITERAL    reduce using rule 66 (block_statement -> statement .)
    STRING_LITERAL  reduce using rule 66 (block_statement -> statement .)
    TRUE            reduce using rule 66 (block_statement -> statement .)
    FALSE           reduce using rule 66 (block_statement -> statement .)
    NULL            reduce using rule 66 (block_statement -> statement .)
    }               reduce using rule 66 (block_statement -> statement .)


state 66

    (67) local_variable_declaration_statement -> local_variable_declaration . ;

    ;               shift and go to state 127


state 67

    (84) other_statement -> ; .

    ;               reduce using rule 84 (other_statement -> ; .)
    IF              reduce using rule 84 (other_statement -> ; .)
    WHILE           reduce using rule 84 (other_statement -> ; .)
    DO              reduce using rule 84 (other_statement -> ; .)
    BREAK           reduce using rule 84 (other_statement -> ; .)
    RETURN          reduce using rule 84 (other_statement -> ; .)
    CONTINUE        reduce using rule 84 (other_statement -> ; .)
    BOOLEAN         reduce using rule 84 (other_statement -> ; .)
    VOID            reduce using rule 84 (other_statement -> ; .)
    BYTE            reduce using rule 84 (other_statement -> ; .)
    SHORT           reduce using rule 84 (other_statement -> ; .)
    INT             reduce using rule 84 (other_statement -> ; .)
    LONG            reduce using rule 84 (other_statement -> ; .)
    CHAR            reduce using rule 84 (other_statement -> ; .)
    FLOAT           reduce using rule 84 (other_statement -> ; .)
    DOUBLE          reduce using rule 84 (other_statement -> ; .)
    STRING          reduce using rule 84 (other_statement -> ; .)
    PUBLIC          reduce using rule 84 (other_statement -> ; .)
    PROTECTED       reduce using rule 84 (other_statement -> ; .)
    PRIVATE         reduce using rule 84 (other_statement -> ; .)
    STATIC          reduce using rule 84 (other_statement -> ; .)
    ABSTRACT        reduce using rule 84 (other_statement -> ; .)
    FINAL           reduce using rule 84 (other_statement -> ; .)
    NATIVE          reduce using rule 84 (other_statement -> ; .)
    +               reduce using rule 84 (other_statement -> ; .)
    -               reduce using rule 84 (other_statement -> ; .)
    NAME            reduce using rule 84 (other_statement -> ; .)
    PLUSPLUS        reduce using rule 84 (other_statement -> ; .)
    MINUSMINUS      reduce using rule 84 (other_statement -> ; .)
    NUM             reduce using rule 84 (other_statement -> ; .)
    CHAR_LITERAL    reduce using rule 84 (other_statement -> ; .)
    STRING_LITERAL  reduce using rule 84 (other_statement -> ; .)
    TRUE            reduce using rule 84 (other_statement -> ; .)
    FALSE           reduce using rule 84 (other_statement -> ; .)
    NULL            reduce using rule 84 (other_statement -> ; .)
    }               reduce using rule 84 (other_statement -> ; .)


state 68

    (75) statement -> other_statement .

    ;               reduce using rule 75 (statement -> other_statement .)
    IF              reduce using rule 75 (statement -> other_statement .)
    WHILE           reduce using rule 75 (statement -> other_statement .)
    DO              reduce using rule 75 (statement -> other_statement .)
    BREAK           reduce using rule 75 (statement -> other_statement .)
    RETURN          reduce using rule 75 (statement -> other_statement .)
    CONTINUE        reduce using rule 75 (statement -> other_statement .)
    BOOLEAN         reduce using rule 75 (statement -> other_statement .)
    VOID            reduce using rule 75 (statement -> other_statement .)
    BYTE            reduce using rule 75 (statement -> other_statement .)
    SHORT           reduce using rule 75 (statement -> other_statement .)
    INT             reduce using rule 75 (statement -> other_statement .)
    LONG            reduce using rule 75 (statement -> other_statement .)
    CHAR            reduce using rule 75 (statement -> other_statement .)
    FLOAT           reduce using rule 75 (statement -> other_statement .)
    DOUBLE          reduce using rule 75 (statement -> other_statement .)
    STRING          reduce using rule 75 (statement -> other_statement .)
    PUBLIC          reduce using rule 75 (statement -> other_statement .)
    PROTECTED       reduce using rule 75 (statement -> other_statement .)
    PRIVATE         reduce using rule 75 (statement -> other_statement .)
    STATIC          reduce using rule 75 (statement -> other_statement .)
    ABSTRACT        reduce using rule 75 (statement -> other_statement .)
    FINAL           reduce using rule 75 (statement -> other_statement .)
    NATIVE          reduce using rule 75 (statement -> other_statement .)
    +               reduce using rule 75 (statement -> other_statement .)
    -               reduce using rule 75 (statement -> other_statement .)
    NAME            reduce using rule 75 (statement -> other_statement .)
    PLUSPLUS        reduce using rule 75 (statement -> other_statement .)
    MINUSMINUS      reduce using rule 75 (statement -> other_statement .)
    NUM             reduce using rule 75 (statement -> other_statement .)
    CHAR_LITERAL    reduce using rule 75 (statement -> other_statement .)
    STRING_LITERAL  reduce using rule 75 (statement -> other_statement .)
    TRUE            reduce using rule 75 (statement -> other_statement .)
    FALSE           reduce using rule 75 (statement -> other_statement .)
    NULL            reduce using rule 75 (statement -> other_statement .)
    }               reduce using rule 75 (statement -> other_statement .)


state 69

    (76) statement -> if_then_statement .

    ;               reduce using rule 76 (statement -> if_then_statement .)
    IF              reduce using rule 76 (statement -> if_then_statement .)
    WHILE           reduce using rule 76 (statement -> if_then_statement .)
    DO              reduce using rule 76 (statement -> if_then_statement .)
    BREAK           reduce using rule 76 (statement -> if_then_statement .)
    RETURN          reduce using rule 76 (statement -> if_then_statement .)
    CONTINUE        reduce using rule 76 (statement -> if_then_statement .)
    BOOLEAN         reduce using rule 76 (statement -> if_then_statement .)
    VOID            reduce using rule 76 (statement -> if_then_statement .)
    BYTE            reduce using rule 76 (statement -> if_then_statement .)
    SHORT           reduce using rule 76 (statement -> if_then_statement .)
    INT             reduce using rule 76 (statement -> if_then_statement .)
    LONG            reduce using rule 76 (statement -> if_then_statement .)
    CHAR            reduce using rule 76 (statement -> if_then_statement .)
    FLOAT           reduce using rule 76 (statement -> if_then_statement .)
    DOUBLE          reduce using rule 76 (statement -> if_then_statement .)
    STRING          reduce using rule 76 (statement -> if_then_statement .)
    PUBLIC          reduce using rule 76 (statement -> if_then_statement .)
    PROTECTED       reduce using rule 76 (statement -> if_then_statement .)
    PRIVATE         reduce using rule 76 (statement -> if_then_statement .)
    STATIC          reduce using rule 76 (statement -> if_then_statement .)
    ABSTRACT        reduce using rule 76 (statement -> if_then_statement .)
    FINAL           reduce using rule 76 (statement -> if_then_statement .)
    NATIVE          reduce using rule 76 (statement -> if_then_statement .)
    +               reduce using rule 76 (statement -> if_then_statement .)
    -               reduce using rule 76 (statement -> if_then_statement .)
    NAME            reduce using rule 76 (statement -> if_then_statement .)
    PLUSPLUS        reduce using rule 76 (statement -> if_then_statement .)
    MINUSMINUS      reduce using rule 76 (statement -> if_then_statement .)
    NUM             reduce using rule 76 (statement -> if_then_statement .)
    CHAR_LITERAL    reduce using rule 76 (statement -> if_then_statement .)
    STRING_LITERAL  reduce using rule 76 (statement -> if_then_statement .)
    TRUE            reduce using rule 76 (statement -> if_then_statement .)
    FALSE           reduce using rule 76 (statement -> if_then_statement .)
    NULL            reduce using rule 76 (statement -> if_then_statement .)
    }               reduce using rule 76 (statement -> if_then_statement .)


state 70

    (77) statement -> if_then_else_statement .

    ;               reduce using rule 77 (statement -> if_then_else_statement .)
    IF              reduce using rule 77 (statement -> if_then_else_statement .)
    WHILE           reduce using rule 77 (statement -> if_then_else_statement .)
    DO              reduce using rule 77 (statement -> if_then_else_statement .)
    BREAK           reduce using rule 77 (statement -> if_then_else_statement .)
    RETURN          reduce using rule 77 (statement -> if_then_else_statement .)
    CONTINUE        reduce using rule 77 (statement -> if_then_else_statement .)
    BOOLEAN         reduce using rule 77 (statement -> if_then_else_statement .)
    VOID            reduce using rule 77 (statement -> if_then_else_statement .)
    BYTE            reduce using rule 77 (statement -> if_then_else_statement .)
    SHORT           reduce using rule 77 (statement -> if_then_else_statement .)
    INT             reduce using rule 77 (statement -> if_then_else_statement .)
    LONG            reduce using rule 77 (statement -> if_then_else_statement .)
    CHAR            reduce using rule 77 (statement -> if_then_else_statement .)
    FLOAT           reduce using rule 77 (statement -> if_then_else_statement .)
    DOUBLE          reduce using rule 77 (statement -> if_then_else_statement .)
    STRING          reduce using rule 77 (statement -> if_then_else_statement .)
    PUBLIC          reduce using rule 77 (statement -> if_then_else_statement .)
    PROTECTED       reduce using rule 77 (statement -> if_then_else_statement .)
    PRIVATE         reduce using rule 77 (statement -> if_then_else_statement .)
    STATIC          reduce using rule 77 (statement -> if_then_else_statement .)
    ABSTRACT        reduce using rule 77 (statement -> if_then_else_statement .)
    FINAL           reduce using rule 77 (statement -> if_then_else_statement .)
    NATIVE          reduce using rule 77 (statement -> if_then_else_statement .)
    +               reduce using rule 77 (statement -> if_then_else_statement .)
    -               reduce using rule 77 (statement -> if_then_else_statement .)
    NAME            reduce using rule 77 (statement -> if_then_else_statement .)
    PLUSPLUS        reduce using rule 77 (statement -> if_then_else_statement .)
    MINUSMINUS      reduce using rule 77 (statement -> if_then_else_statement .)
    NUM             reduce using rule 77 (statement -> if_then_else_statement .)
    CHAR_LITERAL    reduce using rule 77 (statement -> if_then_else_statement .)
    STRING_LITERAL  reduce using rule 77 (statement -> if_then_else_statement .)
    TRUE            reduce using rule 77 (statement -> if_then_else_statement .)
    FALSE           reduce using rule 77 (statement -> if_then_else_statement .)
    NULL            reduce using rule 77 (statement -> if_then_else_statement .)
    }               reduce using rule 77 (statement -> if_then_else_statement .)


state 71

    (78) statement -> while_statement .

    ;               reduce using rule 78 (statement -> while_statement .)
    IF              reduce using rule 78 (statement -> while_statement .)
    WHILE           reduce using rule 78 (statement -> while_statement .)
    DO              reduce using rule 78 (statement -> while_statement .)
    BREAK           reduce using rule 78 (statement -> while_statement .)
    RETURN          reduce using rule 78 (statement -> while_statement .)
    CONTINUE        reduce using rule 78 (statement -> while_statement .)
    BOOLEAN         reduce using rule 78 (statement -> while_statement .)
    VOID            reduce using rule 78 (statement -> while_statement .)
    BYTE            reduce using rule 78 (statement -> while_statement .)
    SHORT           reduce using rule 78 (statement -> while_statement .)
    INT             reduce using rule 78 (statement -> while_statement .)
    LONG            reduce using rule 78 (statement -> while_statement .)
    CHAR            reduce using rule 78 (statement -> while_statement .)
    FLOAT           reduce using rule 78 (statement -> while_statement .)
    DOUBLE          reduce using rule 78 (statement -> while_statement .)
    STRING          reduce using rule 78 (statement -> while_statement .)
    PUBLIC          reduce using rule 78 (statement -> while_statement .)
    PROTECTED       reduce using rule 78 (statement -> while_statement .)
    PRIVATE         reduce using rule 78 (statement -> while_statement .)
    STATIC          reduce using rule 78 (statement -> while_statement .)
    ABSTRACT        reduce using rule 78 (statement -> while_statement .)
    FINAL           reduce using rule 78 (statement -> while_statement .)
    NATIVE          reduce using rule 78 (statement -> while_statement .)
    +               reduce using rule 78 (statement -> while_statement .)
    -               reduce using rule 78 (statement -> while_statement .)
    NAME            reduce using rule 78 (statement -> while_statement .)
    PLUSPLUS        reduce using rule 78 (statement -> while_statement .)
    MINUSMINUS      reduce using rule 78 (statement -> while_statement .)
    NUM             reduce using rule 78 (statement -> while_statement .)
    CHAR_LITERAL    reduce using rule 78 (statement -> while_statement .)
    STRING_LITERAL  reduce using rule 78 (statement -> while_statement .)
    TRUE            reduce using rule 78 (statement -> while_statement .)
    FALSE           reduce using rule 78 (statement -> while_statement .)
    NULL            reduce using rule 78 (statement -> while_statement .)
    }               reduce using rule 78 (statement -> while_statement .)


state 72

    (79) statement -> do_while_statement .

    ;               reduce using rule 79 (statement -> do_while_statement .)
    IF              reduce using rule 79 (statement -> do_while_statement .)
    WHILE           reduce using rule 79 (statement -> do_while_statement .)
    DO              reduce using rule 79 (statement -> do_while_statement .)
    BREAK           reduce using rule 79 (statement -> do_while_statement .)
    RETURN          reduce using rule 79 (statement -> do_while_statement .)
    CONTINUE        reduce using rule 79 (statement -> do_while_statement .)
    BOOLEAN         reduce using rule 79 (statement -> do_while_statement .)
    VOID            reduce using rule 79 (statement -> do_while_statement .)
    BYTE            reduce using rule 79 (statement -> do_while_statement .)
    SHORT           reduce using rule 79 (statement -> do_while_statement .)
    INT             reduce using rule 79 (statement -> do_while_statement .)
    LONG            reduce using rule 79 (statement -> do_while_statement .)
    CHAR            reduce using rule 79 (statement -> do_while_statement .)
    FLOAT           reduce using rule 79 (statement -> do_while_statement .)
    DOUBLE          reduce using rule 79 (statement -> do_while_statement .)
    STRING          reduce using rule 79 (statement -> do_while_statement .)
    PUBLIC          reduce using rule 79 (statement -> do_while_statement .)
    PROTECTED       reduce using rule 79 (statement -> do_while_statement .)
    PRIVATE         reduce using rule 79 (statement -> do_while_statement .)
    STATIC          reduce using rule 79 (statement -> do_while_statement .)
    ABSTRACT        reduce using rule 79 (statement -> do_while_statement .)
    FINAL           reduce using rule 79 (statement -> do_while_statement .)
    NATIVE          reduce using rule 79 (statement -> do_while_statement .)
    +               reduce using rule 79 (statement -> do_while_statement .)
    -               reduce using rule 79 (statement -> do_while_statement .)
    NAME            reduce using rule 79 (statement -> do_while_statement .)
    PLUSPLUS        reduce using rule 79 (statement -> do_while_statement .)
    MINUSMINUS      reduce using rule 79 (statement -> do_while_statement .)
    NUM             reduce using rule 79 (statement -> do_while_statement .)
    CHAR_LITERAL    reduce using rule 79 (statement -> do_while_statement .)
    STRING_LITERAL  reduce using rule 79 (statement -> do_while_statement .)
    TRUE            reduce using rule 79 (statement -> do_while_statement .)
    FALSE           reduce using rule 79 (statement -> do_while_statement .)
    NULL            reduce using rule 79 (statement -> do_while_statement .)
    }               reduce using rule 79 (statement -> do_while_statement .)


state 73

    (68) local_variable_declaration -> type . variable_declarators
    (70) variable_declarators -> . variable_declarator
    (71) variable_declarators -> . variable_declarators , variable_declarator
    (72) variable_declarator -> . variable_declarator_id
    (73) variable_declarator -> . variable_declarator_id = variable_initializer
    (34) variable_declarator_id -> . NAME

    NAME            shift and go to state 129

    variable_declarators           shift and go to state 128
    variable_declarator            shift and go to state 113
    variable_declarator_id         shift and go to state 114

state 74

    (69) local_variable_declaration -> modifiers . type variable_declarators
    (10) modifiers -> modifiers . modifier
    (35) type -> . primitive_type
    (36) type -> . array_type
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE
    (41) primitive_type -> . BOOLEAN
    (42) primitive_type -> . VOID
    (43) primitive_type -> . BYTE
    (44) primitive_type -> . SHORT
    (45) primitive_type -> . INT
    (46) primitive_type -> . LONG
    (47) primitive_type -> . CHAR
    (48) primitive_type -> . FLOAT
    (49) primitive_type -> . DOUBLE
    (50) primitive_type -> . STRING
    (37) array_type -> . primitive_type dims
    (38) array_type -> . name dims
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    BOOLEAN         shift and go to state 46
    VOID            shift and go to state 47
    BYTE            shift and go to state 48
    SHORT           shift and go to state 49
    INT             shift and go to state 50
    LONG            shift and go to state 51
    CHAR            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    NAME            shift and go to state 43

    type                           shift and go to state 130
    modifier                       shift and go to state 22
    primitive_type                 shift and go to state 44
    array_type                     shift and go to state 45
    name                           shift and go to state 56
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 75

    (80) other_statement -> expression_statement .

    ;               reduce using rule 80 (other_statement -> expression_statement .)
    IF              reduce using rule 80 (other_statement -> expression_statement .)
    WHILE           reduce using rule 80 (other_statement -> expression_statement .)
    DO              reduce using rule 80 (other_statement -> expression_statement .)
    BREAK           reduce using rule 80 (other_statement -> expression_statement .)
    RETURN          reduce using rule 80 (other_statement -> expression_statement .)
    CONTINUE        reduce using rule 80 (other_statement -> expression_statement .)
    BOOLEAN         reduce using rule 80 (other_statement -> expression_statement .)
    VOID            reduce using rule 80 (other_statement -> expression_statement .)
    BYTE            reduce using rule 80 (other_statement -> expression_statement .)
    SHORT           reduce using rule 80 (other_statement -> expression_statement .)
    INT             reduce using rule 80 (other_statement -> expression_statement .)
    LONG            reduce using rule 80 (other_statement -> expression_statement .)
    CHAR            reduce using rule 80 (other_statement -> expression_statement .)
    FLOAT           reduce using rule 80 (other_statement -> expression_statement .)
    DOUBLE          reduce using rule 80 (other_statement -> expression_statement .)
    STRING          reduce using rule 80 (other_statement -> expression_statement .)
    PUBLIC          reduce using rule 80 (other_statement -> expression_statement .)
    PROTECTED       reduce using rule 80 (other_statement -> expression_statement .)
    PRIVATE         reduce using rule 80 (other_statement -> expression_statement .)
    STATIC          reduce using rule 80 (other_statement -> expression_statement .)
    ABSTRACT        reduce using rule 80 (other_statement -> expression_statement .)
    FINAL           reduce using rule 80 (other_statement -> expression_statement .)
    NATIVE          reduce using rule 80 (other_statement -> expression_statement .)
    +               reduce using rule 80 (other_statement -> expression_statement .)
    -               reduce using rule 80 (other_statement -> expression_statement .)
    NAME            reduce using rule 80 (other_statement -> expression_statement .)
    PLUSPLUS        reduce using rule 80 (other_statement -> expression_statement .)
    MINUSMINUS      reduce using rule 80 (other_statement -> expression_statement .)
    NUM             reduce using rule 80 (other_statement -> expression_statement .)
    CHAR_LITERAL    reduce using rule 80 (other_statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 80 (other_statement -> expression_statement .)
    TRUE            reduce using rule 80 (other_statement -> expression_statement .)
    FALSE           reduce using rule 80 (other_statement -> expression_statement .)
    NULL            reduce using rule 80 (other_statement -> expression_statement .)
    }               reduce using rule 80 (other_statement -> expression_statement .)


state 76

    (81) other_statement -> break_statement .

    ;               reduce using rule 81 (other_statement -> break_statement .)
    IF              reduce using rule 81 (other_statement -> break_statement .)
    WHILE           reduce using rule 81 (other_statement -> break_statement .)
    DO              reduce using rule 81 (other_statement -> break_statement .)
    BREAK           reduce using rule 81 (other_statement -> break_statement .)
    RETURN          reduce using rule 81 (other_statement -> break_statement .)
    CONTINUE        reduce using rule 81 (other_statement -> break_statement .)
    BOOLEAN         reduce using rule 81 (other_statement -> break_statement .)
    VOID            reduce using rule 81 (other_statement -> break_statement .)
    BYTE            reduce using rule 81 (other_statement -> break_statement .)
    SHORT           reduce using rule 81 (other_statement -> break_statement .)
    INT             reduce using rule 81 (other_statement -> break_statement .)
    LONG            reduce using rule 81 (other_statement -> break_statement .)
    CHAR            reduce using rule 81 (other_statement -> break_statement .)
    FLOAT           reduce using rule 81 (other_statement -> break_statement .)
    DOUBLE          reduce using rule 81 (other_statement -> break_statement .)
    STRING          reduce using rule 81 (other_statement -> break_statement .)
    PUBLIC          reduce using rule 81 (other_statement -> break_statement .)
    PROTECTED       reduce using rule 81 (other_statement -> break_statement .)
    PRIVATE         reduce using rule 81 (other_statement -> break_statement .)
    STATIC          reduce using rule 81 (other_statement -> break_statement .)
    ABSTRACT        reduce using rule 81 (other_statement -> break_statement .)
    FINAL           reduce using rule 81 (other_statement -> break_statement .)
    NATIVE          reduce using rule 81 (other_statement -> break_statement .)
    +               reduce using rule 81 (other_statement -> break_statement .)
    -               reduce using rule 81 (other_statement -> break_statement .)
    NAME            reduce using rule 81 (other_statement -> break_statement .)
    PLUSPLUS        reduce using rule 81 (other_statement -> break_statement .)
    MINUSMINUS      reduce using rule 81 (other_statement -> break_statement .)
    NUM             reduce using rule 81 (other_statement -> break_statement .)
    CHAR_LITERAL    reduce using rule 81 (other_statement -> break_statement .)
    STRING_LITERAL  reduce using rule 81 (other_statement -> break_statement .)
    TRUE            reduce using rule 81 (other_statement -> break_statement .)
    FALSE           reduce using rule 81 (other_statement -> break_statement .)
    NULL            reduce using rule 81 (other_statement -> break_statement .)
    }               reduce using rule 81 (other_statement -> break_statement .)


state 77

    (82) other_statement -> return_statement .

    ;               reduce using rule 82 (other_statement -> return_statement .)
    IF              reduce using rule 82 (other_statement -> return_statement .)
    WHILE           reduce using rule 82 (other_statement -> return_statement .)
    DO              reduce using rule 82 (other_statement -> return_statement .)
    BREAK           reduce using rule 82 (other_statement -> return_statement .)
    RETURN          reduce using rule 82 (other_statement -> return_statement .)
    CONTINUE        reduce using rule 82 (other_statement -> return_statement .)
    BOOLEAN         reduce using rule 82 (other_statement -> return_statement .)
    VOID            reduce using rule 82 (other_statement -> return_statement .)
    BYTE            reduce using rule 82 (other_statement -> return_statement .)
    SHORT           reduce using rule 82 (other_statement -> return_statement .)
    INT             reduce using rule 82 (other_statement -> return_statement .)
    LONG            reduce using rule 82 (other_statement -> return_statement .)
    CHAR            reduce using rule 82 (other_statement -> return_statement .)
    FLOAT           reduce using rule 82 (other_statement -> return_statement .)
    DOUBLE          reduce using rule 82 (other_statement -> return_statement .)
    STRING          reduce using rule 82 (other_statement -> return_statement .)
    PUBLIC          reduce using rule 82 (other_statement -> return_statement .)
    PROTECTED       reduce using rule 82 (other_statement -> return_statement .)
    PRIVATE         reduce using rule 82 (other_statement -> return_statement .)
    STATIC          reduce using rule 82 (other_statement -> return_statement .)
    ABSTRACT        reduce using rule 82 (other_statement -> return_statement .)
    FINAL           reduce using rule 82 (other_statement -> return_statement .)
    NATIVE          reduce using rule 82 (other_statement -> return_statement .)
    +               reduce using rule 82 (other_statement -> return_statement .)
    -               reduce using rule 82 (other_statement -> return_statement .)
    NAME            reduce using rule 82 (other_statement -> return_statement .)
    PLUSPLUS        reduce using rule 82 (other_statement -> return_statement .)
    MINUSMINUS      reduce using rule 82 (other_statement -> return_statement .)
    NUM             reduce using rule 82 (other_statement -> return_statement .)
    CHAR_LITERAL    reduce using rule 82 (other_statement -> return_statement .)
    STRING_LITERAL  reduce using rule 82 (other_statement -> return_statement .)
    TRUE            reduce using rule 82 (other_statement -> return_statement .)
    FALSE           reduce using rule 82 (other_statement -> return_statement .)
    NULL            reduce using rule 82 (other_statement -> return_statement .)
    }               reduce using rule 82 (other_statement -> return_statement .)


state 78

    (83) other_statement -> continue_statement .

    ;               reduce using rule 83 (other_statement -> continue_statement .)
    IF              reduce using rule 83 (other_statement -> continue_statement .)
    WHILE           reduce using rule 83 (other_statement -> continue_statement .)
    DO              reduce using rule 83 (other_statement -> continue_statement .)
    BREAK           reduce using rule 83 (other_statement -> continue_statement .)
    RETURN          reduce using rule 83 (other_statement -> continue_statement .)
    CONTINUE        reduce using rule 83 (other_statement -> continue_statement .)
    BOOLEAN         reduce using rule 83 (other_statement -> continue_statement .)
    VOID            reduce using rule 83 (other_statement -> continue_statement .)
    BYTE            reduce using rule 83 (other_statement -> continue_statement .)
    SHORT           reduce using rule 83 (other_statement -> continue_statement .)
    INT             reduce using rule 83 (other_statement -> continue_statement .)
    LONG            reduce using rule 83 (other_statement -> continue_statement .)
    CHAR            reduce using rule 83 (other_statement -> continue_statement .)
    FLOAT           reduce using rule 83 (other_statement -> continue_statement .)
    DOUBLE          reduce using rule 83 (other_statement -> continue_statement .)
    STRING          reduce using rule 83 (other_statement -> continue_statement .)
    PUBLIC          reduce using rule 83 (other_statement -> continue_statement .)
    PROTECTED       reduce using rule 83 (other_statement -> continue_statement .)
    PRIVATE         reduce using rule 83 (other_statement -> continue_statement .)
    STATIC          reduce using rule 83 (other_statement -> continue_statement .)
    ABSTRACT        reduce using rule 83 (other_statement -> continue_statement .)
    FINAL           reduce using rule 83 (other_statement -> continue_statement .)
    NATIVE          reduce using rule 83 (other_statement -> continue_statement .)
    +               reduce using rule 83 (other_statement -> continue_statement .)
    -               reduce using rule 83 (other_statement -> continue_statement .)
    NAME            reduce using rule 83 (other_statement -> continue_statement .)
    PLUSPLUS        reduce using rule 83 (other_statement -> continue_statement .)
    MINUSMINUS      reduce using rule 83 (other_statement -> continue_statement .)
    NUM             reduce using rule 83 (other_statement -> continue_statement .)
    CHAR_LITERAL    reduce using rule 83 (other_statement -> continue_statement .)
    STRING_LITERAL  reduce using rule 83 (other_statement -> continue_statement .)
    TRUE            reduce using rule 83 (other_statement -> continue_statement .)
    FALSE           reduce using rule 83 (other_statement -> continue_statement .)
    NULL            reduce using rule 83 (other_statement -> continue_statement .)
    }               reduce using rule 83 (other_statement -> continue_statement .)


state 79

    (99) if_then_statement -> IF . ( expression ) opening_bracket block_statements closing_bracket
    (100) if_then_else_statement -> IF . ( expression ) opening_bracket block_statements closing_bracket else

    (               shift and go to state 131


state 80

    (102) while_statement -> WHILE . ( expression ) opening_bracket block_statements closing_bracket

    (               shift and go to state 132


state 81

    (103) do_while_statement -> DO . opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (15) opening_bracket -> . {

    {               shift and go to state 20

    opening_bracket                shift and go to state 133

state 82

    (85) expression_statement -> statement_expression . ;

    ;               shift and go to state 134


state 83

    (93) break_statement -> BREAK . ;
    (94) break_statement -> BREAK . NAME ;

    ;               shift and go to state 135
    NAME            shift and go to state 136


state 84

    (89) method_invocation -> NAME . ( argument_list )
    (90) method_invocation -> NAME . ( )
    (60) simple_name -> NAME .

    (               shift and go to state 137
    .               reduce using rule 60 (simple_name -> NAME .)
    [               reduce using rule 60 (simple_name -> NAME .)
    PLUSPLUS        reduce using rule 60 (simple_name -> NAME .)
    MINUSMINUS      reduce using rule 60 (simple_name -> NAME .)
    =               reduce using rule 60 (simple_name -> NAME .)
    TIMES_ASSIGN    reduce using rule 60 (simple_name -> NAME .)
    DIVIDE_ASSIGN   reduce using rule 60 (simple_name -> NAME .)
    REMAINDER_ASSIGN reduce using rule 60 (simple_name -> NAME .)
    PLUS_ASSIGN     reduce using rule 60 (simple_name -> NAME .)
    MINUS_ASSIGN    reduce using rule 60 (simple_name -> NAME .)
    ;               reduce using rule 60 (simple_name -> NAME .)


state 85

    (95) return_statement -> RETURN . expression_opt ;
    (96) expression_opt -> . expression
    (97) expression_opt -> . empty
    (104) expression -> . assignment_expression
    (62) empty -> .
    (105) assignment_expression -> . assignment
    (106) assignment_expression -> . conditional_expression
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (114) conditional_expression -> . conditional_or_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (115) conditional_or_expression -> . conditional_and_expression
    (116) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (117) conditional_and_expression -> . inclusive_or_expression
    (118) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (119) inclusive_or_expression -> . and_expression
    (120) inclusive_or_expression -> . inclusive_or_expression | and_expression
    (121) and_expression -> . equality_expression
    (122) and_expression -> . and_expression & equality_expression
    (123) equality_expression -> . equality_expression EQ relational_expression
    (124) equality_expression -> . equality_expression NEQ relational_expression
    (125) equality_expression -> . relational_expression
    (126) relational_expression -> . additive_expression
    (127) relational_expression -> . relational_expression > additive_expression
    (128) relational_expression -> . relational_expression < additive_expression
    (129) relational_expression -> . relational_expression GTEQ additive_expression
    (130) relational_expression -> . relational_expression LTEQ additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression

    ;               reduce using rule 62 (empty -> .)
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43
    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100

    expression_opt                 shift and go to state 138
    expression                     shift and go to state 139
    empty                          shift and go to state 140
    assignment_expression          shift and go to state 141
    assignment                     shift and go to state 142
    conditional_expression         shift and go to state 143
    postfix_expression             shift and go to state 144
    conditional_or_expression      shift and go to state 145
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    conditional_and_expression     shift and go to state 147
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    inclusive_or_expression        shift and go to state 148
    and_expression                 shift and go to state 149
    equality_expression            shift and go to state 150
    relational_expression          shift and go to state 151
    additive_expression            shift and go to state 152
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93

state 86

    (98) continue_statement -> CONTINUE . ;

    ;               shift and go to state 155


state 87

    (38) array_type -> name . dims
    (61) qualified_name -> name . . simple_name
    (146) postfix_expression -> name .
    (153) array_access -> name . [ expression ]
    (39) dims -> . [ ]
    (40) dims -> . dims [ ]

    .               shift and go to state 118
    PLUSPLUS        reduce using rule 146 (postfix_expression -> name .)
    MINUSMINUS      reduce using rule 146 (postfix_expression -> name .)
    =               reduce using rule 146 (postfix_expression -> name .)
    TIMES_ASSIGN    reduce using rule 146 (postfix_expression -> name .)
    DIVIDE_ASSIGN   reduce using rule 146 (postfix_expression -> name .)
    REMAINDER_ASSIGN reduce using rule 146 (postfix_expression -> name .)
    PLUS_ASSIGN     reduce using rule 146 (postfix_expression -> name .)
    MINUS_ASSIGN    reduce using rule 146 (postfix_expression -> name .)
    ;               reduce using rule 146 (postfix_expression -> name .)
    [               shift and go to state 156

    dims                           shift and go to state 117

state 88

    (86) statement_expression -> assignment .

    ;               reduce using rule 86 (statement_expression -> assignment .)


state 89

    (87) statement_expression -> unary_expression .

    ;               reduce using rule 87 (statement_expression -> unary_expression .)


state 90

    (88) statement_expression -> method_invocation .

    ;               reduce using rule 88 (statement_expression -> method_invocation .)


state 91

    (107) assignment -> postfix_expression . assignment_operator assignment_expression
    (142) unary_expression -> postfix_expression .
    (149) post_increment_expression -> postfix_expression . PLUSPLUS
    (150) post_decrement_expression -> postfix_expression . MINUSMINUS
    (108) assignment_operator -> . =
    (109) assignment_operator -> . TIMES_ASSIGN
    (110) assignment_operator -> . DIVIDE_ASSIGN
    (111) assignment_operator -> . REMAINDER_ASSIGN
    (112) assignment_operator -> . PLUS_ASSIGN
    (113) assignment_operator -> . MINUS_ASSIGN

    ;               reduce using rule 142 (unary_expression -> postfix_expression .)
    PLUSPLUS        shift and go to state 158
    MINUSMINUS      shift and go to state 159
    =               shift and go to state 160
    TIMES_ASSIGN    shift and go to state 161
    DIVIDE_ASSIGN   shift and go to state 162
    REMAINDER_ASSIGN shift and go to state 163
    PLUS_ASSIGN     shift and go to state 164
    MINUS_ASSIGN    shift and go to state 165

    assignment_operator            shift and go to state 157

state 92

    (138) unary_expression -> pre_increment_expression .

    ;               reduce using rule 138 (unary_expression -> pre_increment_expression .)
    *               reduce using rule 138 (unary_expression -> pre_increment_expression .)
    /               reduce using rule 138 (unary_expression -> pre_increment_expression .)
    %               reduce using rule 138 (unary_expression -> pre_increment_expression .)
    +               reduce using rule 138 (unary_expression -> pre_increment_expression .)
    -               reduce using rule 138 (unary_expression -> pre_increment_expression .)
    >               reduce using rule 138 (unary_expression -> pre_increment_expression .)
    <               reduce using rule 138 (unary_expression -> pre_increment_expression .)
    GTEQ            reduce using rule 138 (unary_expression -> pre_increment_expression .)
    LTEQ            reduce using rule 138 (unary_expression -> pre_increment_expression .)
    EQ              reduce using rule 138 (unary_expression -> pre_increment_expression .)
    NEQ             reduce using rule 138 (unary_expression -> pre_increment_expression .)
    &               reduce using rule 138 (unary_expression -> pre_increment_expression .)
    |               reduce using rule 138 (unary_expression -> pre_increment_expression .)
    AND             reduce using rule 138 (unary_expression -> pre_increment_expression .)
    OR              reduce using rule 138 (unary_expression -> pre_increment_expression .)
    )               reduce using rule 138 (unary_expression -> pre_increment_expression .)
    ,               reduce using rule 138 (unary_expression -> pre_increment_expression .)
    ]               reduce using rule 138 (unary_expression -> pre_increment_expression .)


state 93

    (139) unary_expression -> pre_decrement_expression .

    ;               reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    *               reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    /               reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    %               reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    +               reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    -               reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    >               reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    <               reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    GTEQ            reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    LTEQ            reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    EQ              reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    NEQ             reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    &               reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    |               reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    AND             reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    OR              reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    )               reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    ,               reduce using rule 139 (unary_expression -> pre_decrement_expression .)
    ]               reduce using rule 139 (unary_expression -> pre_decrement_expression .)


state 94

    (140) unary_expression -> + . unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    unary_expression               shift and go to state 166
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 95

    (141) unary_expression -> - . unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    unary_expression               shift and go to state 168
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 96

    (145) postfix_expression -> primary .

    PLUSPLUS        reduce using rule 145 (postfix_expression -> primary .)
    MINUSMINUS      reduce using rule 145 (postfix_expression -> primary .)
    =               reduce using rule 145 (postfix_expression -> primary .)
    TIMES_ASSIGN    reduce using rule 145 (postfix_expression -> primary .)
    DIVIDE_ASSIGN   reduce using rule 145 (postfix_expression -> primary .)
    REMAINDER_ASSIGN reduce using rule 145 (postfix_expression -> primary .)
    PLUS_ASSIGN     reduce using rule 145 (postfix_expression -> primary .)
    MINUS_ASSIGN    reduce using rule 145 (postfix_expression -> primary .)
    ;               reduce using rule 145 (postfix_expression -> primary .)
    *               reduce using rule 145 (postfix_expression -> primary .)
    /               reduce using rule 145 (postfix_expression -> primary .)
    %               reduce using rule 145 (postfix_expression -> primary .)
    +               reduce using rule 145 (postfix_expression -> primary .)
    -               reduce using rule 145 (postfix_expression -> primary .)
    >               reduce using rule 145 (postfix_expression -> primary .)
    <               reduce using rule 145 (postfix_expression -> primary .)
    GTEQ            reduce using rule 145 (postfix_expression -> primary .)
    LTEQ            reduce using rule 145 (postfix_expression -> primary .)
    EQ              reduce using rule 145 (postfix_expression -> primary .)
    NEQ             reduce using rule 145 (postfix_expression -> primary .)
    &               reduce using rule 145 (postfix_expression -> primary .)
    |               reduce using rule 145 (postfix_expression -> primary .)
    AND             reduce using rule 145 (postfix_expression -> primary .)
    OR              reduce using rule 145 (postfix_expression -> primary .)
    )               reduce using rule 145 (postfix_expression -> primary .)
    ,               reduce using rule 145 (postfix_expression -> primary .)
    ]               reduce using rule 145 (postfix_expression -> primary .)


state 97

    (147) postfix_expression -> post_increment_expression .

    PLUSPLUS        reduce using rule 147 (postfix_expression -> post_increment_expression .)
    MINUSMINUS      reduce using rule 147 (postfix_expression -> post_increment_expression .)
    =               reduce using rule 147 (postfix_expression -> post_increment_expression .)
    TIMES_ASSIGN    reduce using rule 147 (postfix_expression -> post_increment_expression .)
    DIVIDE_ASSIGN   reduce using rule 147 (postfix_expression -> post_increment_expression .)
    REMAINDER_ASSIGN reduce using rule 147 (postfix_expression -> post_increment_expression .)
    PLUS_ASSIGN     reduce using rule 147 (postfix_expression -> post_increment_expression .)
    MINUS_ASSIGN    reduce using rule 147 (postfix_expression -> post_increment_expression .)
    ;               reduce using rule 147 (postfix_expression -> post_increment_expression .)
    *               reduce using rule 147 (postfix_expression -> post_increment_expression .)
    /               reduce using rule 147 (postfix_expression -> post_increment_expression .)
    %               reduce using rule 147 (postfix_expression -> post_increment_expression .)
    +               reduce using rule 147 (postfix_expression -> post_increment_expression .)
    -               reduce using rule 147 (postfix_expression -> post_increment_expression .)
    >               reduce using rule 147 (postfix_expression -> post_increment_expression .)
    <               reduce using rule 147 (postfix_expression -> post_increment_expression .)
    GTEQ            reduce using rule 147 (postfix_expression -> post_increment_expression .)
    LTEQ            reduce using rule 147 (postfix_expression -> post_increment_expression .)
    EQ              reduce using rule 147 (postfix_expression -> post_increment_expression .)
    NEQ             reduce using rule 147 (postfix_expression -> post_increment_expression .)
    &               reduce using rule 147 (postfix_expression -> post_increment_expression .)
    |               reduce using rule 147 (postfix_expression -> post_increment_expression .)
    AND             reduce using rule 147 (postfix_expression -> post_increment_expression .)
    OR              reduce using rule 147 (postfix_expression -> post_increment_expression .)
    )               reduce using rule 147 (postfix_expression -> post_increment_expression .)
    ,               reduce using rule 147 (postfix_expression -> post_increment_expression .)
    ]               reduce using rule 147 (postfix_expression -> post_increment_expression .)


state 98

    (148) postfix_expression -> post_decrement_expression .

    PLUSPLUS        reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    MINUSMINUS      reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    =               reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    TIMES_ASSIGN    reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    DIVIDE_ASSIGN   reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    REMAINDER_ASSIGN reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    PLUS_ASSIGN     reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    MINUS_ASSIGN    reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    ;               reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    *               reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    /               reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    %               reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    +               reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    -               reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    >               reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    <               reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    GTEQ            reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    LTEQ            reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    EQ              reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    NEQ             reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    &               reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    |               reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    AND             reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    OR              reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    )               reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    ,               reduce using rule 148 (postfix_expression -> post_decrement_expression .)
    ]               reduce using rule 148 (postfix_expression -> post_decrement_expression .)


state 99

    (143) pre_increment_expression -> PLUSPLUS . unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    unary_expression               shift and go to state 169
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 100

    (144) pre_decrement_expression -> MINUSMINUS . unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    unary_expression               shift and go to state 170
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 101

    (151) primary -> literal .

    PLUSPLUS        reduce using rule 151 (primary -> literal .)
    MINUSMINUS      reduce using rule 151 (primary -> literal .)
    =               reduce using rule 151 (primary -> literal .)
    TIMES_ASSIGN    reduce using rule 151 (primary -> literal .)
    DIVIDE_ASSIGN   reduce using rule 151 (primary -> literal .)
    REMAINDER_ASSIGN reduce using rule 151 (primary -> literal .)
    PLUS_ASSIGN     reduce using rule 151 (primary -> literal .)
    MINUS_ASSIGN    reduce using rule 151 (primary -> literal .)
    ;               reduce using rule 151 (primary -> literal .)
    *               reduce using rule 151 (primary -> literal .)
    /               reduce using rule 151 (primary -> literal .)
    %               reduce using rule 151 (primary -> literal .)
    +               reduce using rule 151 (primary -> literal .)
    -               reduce using rule 151 (primary -> literal .)
    >               reduce using rule 151 (primary -> literal .)
    <               reduce using rule 151 (primary -> literal .)
    GTEQ            reduce using rule 151 (primary -> literal .)
    LTEQ            reduce using rule 151 (primary -> literal .)
    EQ              reduce using rule 151 (primary -> literal .)
    NEQ             reduce using rule 151 (primary -> literal .)
    &               reduce using rule 151 (primary -> literal .)
    |               reduce using rule 151 (primary -> literal .)
    AND             reduce using rule 151 (primary -> literal .)
    OR              reduce using rule 151 (primary -> literal .)
    )               reduce using rule 151 (primary -> literal .)
    ,               reduce using rule 151 (primary -> literal .)
    ]               reduce using rule 151 (primary -> literal .)


state 102

    (152) primary -> array_access .

    PLUSPLUS        reduce using rule 152 (primary -> array_access .)
    MINUSMINUS      reduce using rule 152 (primary -> array_access .)
    =               reduce using rule 152 (primary -> array_access .)
    TIMES_ASSIGN    reduce using rule 152 (primary -> array_access .)
    DIVIDE_ASSIGN   reduce using rule 152 (primary -> array_access .)
    REMAINDER_ASSIGN reduce using rule 152 (primary -> array_access .)
    PLUS_ASSIGN     reduce using rule 152 (primary -> array_access .)
    MINUS_ASSIGN    reduce using rule 152 (primary -> array_access .)
    ;               reduce using rule 152 (primary -> array_access .)
    *               reduce using rule 152 (primary -> array_access .)
    /               reduce using rule 152 (primary -> array_access .)
    %               reduce using rule 152 (primary -> array_access .)
    +               reduce using rule 152 (primary -> array_access .)
    -               reduce using rule 152 (primary -> array_access .)
    >               reduce using rule 152 (primary -> array_access .)
    <               reduce using rule 152 (primary -> array_access .)
    GTEQ            reduce using rule 152 (primary -> array_access .)
    LTEQ            reduce using rule 152 (primary -> array_access .)
    EQ              reduce using rule 152 (primary -> array_access .)
    NEQ             reduce using rule 152 (primary -> array_access .)
    &               reduce using rule 152 (primary -> array_access .)
    |               reduce using rule 152 (primary -> array_access .)
    AND             reduce using rule 152 (primary -> array_access .)
    OR              reduce using rule 152 (primary -> array_access .)
    )               reduce using rule 152 (primary -> array_access .)
    ,               reduce using rule 152 (primary -> array_access .)
    ]               reduce using rule 152 (primary -> array_access .)


state 103

    (154) literal -> NUM .

    PLUSPLUS        reduce using rule 154 (literal -> NUM .)
    MINUSMINUS      reduce using rule 154 (literal -> NUM .)
    =               reduce using rule 154 (literal -> NUM .)
    TIMES_ASSIGN    reduce using rule 154 (literal -> NUM .)
    DIVIDE_ASSIGN   reduce using rule 154 (literal -> NUM .)
    REMAINDER_ASSIGN reduce using rule 154 (literal -> NUM .)
    PLUS_ASSIGN     reduce using rule 154 (literal -> NUM .)
    MINUS_ASSIGN    reduce using rule 154 (literal -> NUM .)
    ;               reduce using rule 154 (literal -> NUM .)
    *               reduce using rule 154 (literal -> NUM .)
    /               reduce using rule 154 (literal -> NUM .)
    %               reduce using rule 154 (literal -> NUM .)
    +               reduce using rule 154 (literal -> NUM .)
    -               reduce using rule 154 (literal -> NUM .)
    >               reduce using rule 154 (literal -> NUM .)
    <               reduce using rule 154 (literal -> NUM .)
    GTEQ            reduce using rule 154 (literal -> NUM .)
    LTEQ            reduce using rule 154 (literal -> NUM .)
    EQ              reduce using rule 154 (literal -> NUM .)
    NEQ             reduce using rule 154 (literal -> NUM .)
    &               reduce using rule 154 (literal -> NUM .)
    |               reduce using rule 154 (literal -> NUM .)
    AND             reduce using rule 154 (literal -> NUM .)
    OR              reduce using rule 154 (literal -> NUM .)
    )               reduce using rule 154 (literal -> NUM .)
    ,               reduce using rule 154 (literal -> NUM .)
    ]               reduce using rule 154 (literal -> NUM .)


state 104

    (155) literal -> CHAR_LITERAL .

    PLUSPLUS        reduce using rule 155 (literal -> CHAR_LITERAL .)
    MINUSMINUS      reduce using rule 155 (literal -> CHAR_LITERAL .)
    =               reduce using rule 155 (literal -> CHAR_LITERAL .)
    TIMES_ASSIGN    reduce using rule 155 (literal -> CHAR_LITERAL .)
    DIVIDE_ASSIGN   reduce using rule 155 (literal -> CHAR_LITERAL .)
    REMAINDER_ASSIGN reduce using rule 155 (literal -> CHAR_LITERAL .)
    PLUS_ASSIGN     reduce using rule 155 (literal -> CHAR_LITERAL .)
    MINUS_ASSIGN    reduce using rule 155 (literal -> CHAR_LITERAL .)
    ;               reduce using rule 155 (literal -> CHAR_LITERAL .)
    *               reduce using rule 155 (literal -> CHAR_LITERAL .)
    /               reduce using rule 155 (literal -> CHAR_LITERAL .)
    %               reduce using rule 155 (literal -> CHAR_LITERAL .)
    +               reduce using rule 155 (literal -> CHAR_LITERAL .)
    -               reduce using rule 155 (literal -> CHAR_LITERAL .)
    >               reduce using rule 155 (literal -> CHAR_LITERAL .)
    <               reduce using rule 155 (literal -> CHAR_LITERAL .)
    GTEQ            reduce using rule 155 (literal -> CHAR_LITERAL .)
    LTEQ            reduce using rule 155 (literal -> CHAR_LITERAL .)
    EQ              reduce using rule 155 (literal -> CHAR_LITERAL .)
    NEQ             reduce using rule 155 (literal -> CHAR_LITERAL .)
    &               reduce using rule 155 (literal -> CHAR_LITERAL .)
    |               reduce using rule 155 (literal -> CHAR_LITERAL .)
    AND             reduce using rule 155 (literal -> CHAR_LITERAL .)
    OR              reduce using rule 155 (literal -> CHAR_LITERAL .)
    )               reduce using rule 155 (literal -> CHAR_LITERAL .)
    ,               reduce using rule 155 (literal -> CHAR_LITERAL .)
    ]               reduce using rule 155 (literal -> CHAR_LITERAL .)


state 105

    (156) literal -> STRING_LITERAL .

    PLUSPLUS        reduce using rule 156 (literal -> STRING_LITERAL .)
    MINUSMINUS      reduce using rule 156 (literal -> STRING_LITERAL .)
    =               reduce using rule 156 (literal -> STRING_LITERAL .)
    TIMES_ASSIGN    reduce using rule 156 (literal -> STRING_LITERAL .)
    DIVIDE_ASSIGN   reduce using rule 156 (literal -> STRING_LITERAL .)
    REMAINDER_ASSIGN reduce using rule 156 (literal -> STRING_LITERAL .)
    PLUS_ASSIGN     reduce using rule 156 (literal -> STRING_LITERAL .)
    MINUS_ASSIGN    reduce using rule 156 (literal -> STRING_LITERAL .)
    ;               reduce using rule 156 (literal -> STRING_LITERAL .)
    *               reduce using rule 156 (literal -> STRING_LITERAL .)
    /               reduce using rule 156 (literal -> STRING_LITERAL .)
    %               reduce using rule 156 (literal -> STRING_LITERAL .)
    +               reduce using rule 156 (literal -> STRING_LITERAL .)
    -               reduce using rule 156 (literal -> STRING_LITERAL .)
    >               reduce using rule 156 (literal -> STRING_LITERAL .)
    <               reduce using rule 156 (literal -> STRING_LITERAL .)
    GTEQ            reduce using rule 156 (literal -> STRING_LITERAL .)
    LTEQ            reduce using rule 156 (literal -> STRING_LITERAL .)
    EQ              reduce using rule 156 (literal -> STRING_LITERAL .)
    NEQ             reduce using rule 156 (literal -> STRING_LITERAL .)
    &               reduce using rule 156 (literal -> STRING_LITERAL .)
    |               reduce using rule 156 (literal -> STRING_LITERAL .)
    AND             reduce using rule 156 (literal -> STRING_LITERAL .)
    OR              reduce using rule 156 (literal -> STRING_LITERAL .)
    )               reduce using rule 156 (literal -> STRING_LITERAL .)
    ,               reduce using rule 156 (literal -> STRING_LITERAL .)
    ]               reduce using rule 156 (literal -> STRING_LITERAL .)


state 106

    (157) literal -> TRUE .

    PLUSPLUS        reduce using rule 157 (literal -> TRUE .)
    MINUSMINUS      reduce using rule 157 (literal -> TRUE .)
    =               reduce using rule 157 (literal -> TRUE .)
    TIMES_ASSIGN    reduce using rule 157 (literal -> TRUE .)
    DIVIDE_ASSIGN   reduce using rule 157 (literal -> TRUE .)
    REMAINDER_ASSIGN reduce using rule 157 (literal -> TRUE .)
    PLUS_ASSIGN     reduce using rule 157 (literal -> TRUE .)
    MINUS_ASSIGN    reduce using rule 157 (literal -> TRUE .)
    ;               reduce using rule 157 (literal -> TRUE .)
    *               reduce using rule 157 (literal -> TRUE .)
    /               reduce using rule 157 (literal -> TRUE .)
    %               reduce using rule 157 (literal -> TRUE .)
    +               reduce using rule 157 (literal -> TRUE .)
    -               reduce using rule 157 (literal -> TRUE .)
    >               reduce using rule 157 (literal -> TRUE .)
    <               reduce using rule 157 (literal -> TRUE .)
    GTEQ            reduce using rule 157 (literal -> TRUE .)
    LTEQ            reduce using rule 157 (literal -> TRUE .)
    EQ              reduce using rule 157 (literal -> TRUE .)
    NEQ             reduce using rule 157 (literal -> TRUE .)
    &               reduce using rule 157 (literal -> TRUE .)
    |               reduce using rule 157 (literal -> TRUE .)
    AND             reduce using rule 157 (literal -> TRUE .)
    OR              reduce using rule 157 (literal -> TRUE .)
    )               reduce using rule 157 (literal -> TRUE .)
    ,               reduce using rule 157 (literal -> TRUE .)
    ]               reduce using rule 157 (literal -> TRUE .)


state 107

    (158) literal -> FALSE .

    PLUSPLUS        reduce using rule 158 (literal -> FALSE .)
    MINUSMINUS      reduce using rule 158 (literal -> FALSE .)
    =               reduce using rule 158 (literal -> FALSE .)
    TIMES_ASSIGN    reduce using rule 158 (literal -> FALSE .)
    DIVIDE_ASSIGN   reduce using rule 158 (literal -> FALSE .)
    REMAINDER_ASSIGN reduce using rule 158 (literal -> FALSE .)
    PLUS_ASSIGN     reduce using rule 158 (literal -> FALSE .)
    MINUS_ASSIGN    reduce using rule 158 (literal -> FALSE .)
    ;               reduce using rule 158 (literal -> FALSE .)
    *               reduce using rule 158 (literal -> FALSE .)
    /               reduce using rule 158 (literal -> FALSE .)
    %               reduce using rule 158 (literal -> FALSE .)
    +               reduce using rule 158 (literal -> FALSE .)
    -               reduce using rule 158 (literal -> FALSE .)
    >               reduce using rule 158 (literal -> FALSE .)
    <               reduce using rule 158 (literal -> FALSE .)
    GTEQ            reduce using rule 158 (literal -> FALSE .)
    LTEQ            reduce using rule 158 (literal -> FALSE .)
    EQ              reduce using rule 158 (literal -> FALSE .)
    NEQ             reduce using rule 158 (literal -> FALSE .)
    &               reduce using rule 158 (literal -> FALSE .)
    |               reduce using rule 158 (literal -> FALSE .)
    AND             reduce using rule 158 (literal -> FALSE .)
    OR              reduce using rule 158 (literal -> FALSE .)
    )               reduce using rule 158 (literal -> FALSE .)
    ,               reduce using rule 158 (literal -> FALSE .)
    ]               reduce using rule 158 (literal -> FALSE .)


state 108

    (159) literal -> NULL .

    PLUSPLUS        reduce using rule 159 (literal -> NULL .)
    MINUSMINUS      reduce using rule 159 (literal -> NULL .)
    =               reduce using rule 159 (literal -> NULL .)
    TIMES_ASSIGN    reduce using rule 159 (literal -> NULL .)
    DIVIDE_ASSIGN   reduce using rule 159 (literal -> NULL .)
    REMAINDER_ASSIGN reduce using rule 159 (literal -> NULL .)
    PLUS_ASSIGN     reduce using rule 159 (literal -> NULL .)
    MINUS_ASSIGN    reduce using rule 159 (literal -> NULL .)
    ;               reduce using rule 159 (literal -> NULL .)
    *               reduce using rule 159 (literal -> NULL .)
    /               reduce using rule 159 (literal -> NULL .)
    %               reduce using rule 159 (literal -> NULL .)
    +               reduce using rule 159 (literal -> NULL .)
    -               reduce using rule 159 (literal -> NULL .)
    >               reduce using rule 159 (literal -> NULL .)
    <               reduce using rule 159 (literal -> NULL .)
    GTEQ            reduce using rule 159 (literal -> NULL .)
    LTEQ            reduce using rule 159 (literal -> NULL .)
    EQ              reduce using rule 159 (literal -> NULL .)
    NEQ             reduce using rule 159 (literal -> NULL .)
    &               reduce using rule 159 (literal -> NULL .)
    |               reduce using rule 159 (literal -> NULL .)
    AND             reduce using rule 159 (literal -> NULL .)
    OR              reduce using rule 159 (literal -> NULL .)
    )               reduce using rule 159 (literal -> NULL .)
    ,               reduce using rule 159 (literal -> NULL .)
    ]               reduce using rule 159 (literal -> NULL .)


state 109

    (12) tmain -> tmain_header opening_bracket method_body . closing_bracket
    (16) closing_bracket -> . }

    }               shift and go to state 38

    closing_bracket                shift and go to state 171

state 110

    (22) field_declartaion -> modifiers_opt type variable_declarators . ;
    (71) variable_declarators -> variable_declarators . , variable_declarator

    ;               shift and go to state 172
    ,               shift and go to state 173


state 111

    (27) method_header_name -> modifiers_opt type NAME .
    (34) variable_declarator_id -> NAME .

    (               reduce using rule 27 (method_header_name -> modifiers_opt type NAME .)
    =               reduce using rule 34 (variable_declarator_id -> NAME .)
    ;               reduce using rule 34 (variable_declarator_id -> NAME .)
    ,               reduce using rule 34 (variable_declarator_id -> NAME .)


state 112

    (14) tmain_name -> modifiers_opt type MAIN .

    (               reduce using rule 14 (tmain_name -> modifiers_opt type MAIN .)


state 113

    (70) variable_declarators -> variable_declarator .

    ;               reduce using rule 70 (variable_declarators -> variable_declarator .)
    ,               reduce using rule 70 (variable_declarators -> variable_declarator .)


state 114

    (72) variable_declarator -> variable_declarator_id .
    (73) variable_declarator -> variable_declarator_id . = variable_initializer

    ;               reduce using rule 72 (variable_declarator -> variable_declarator_id .)
    ,               reduce using rule 72 (variable_declarator -> variable_declarator_id .)
    =               shift and go to state 174


state 115

    (37) array_type -> primitive_type dims .
    (40) dims -> dims . [ ]

    NAME            reduce using rule 37 (array_type -> primitive_type dims .)
    MAIN            reduce using rule 37 (array_type -> primitive_type dims .)
    [               shift and go to state 175


state 116

    (39) dims -> [ . ]

    ]               shift and go to state 176


state 117

    (38) array_type -> name dims .
    (40) dims -> dims . [ ]

    NAME            reduce using rule 38 (array_type -> name dims .)
    MAIN            reduce using rule 38 (array_type -> name dims .)
    [               shift and go to state 175


state 118

    (61) qualified_name -> name . . simple_name
    (60) simple_name -> . NAME

    NAME            shift and go to state 43

    simple_name                    shift and go to state 177

state 119

    (26) method_header -> method_header_name ( formal_parameter_list_opt . )

    )               shift and go to state 178


state 120

    (29) formal_parameter_list_opt -> formal_parameter_list .
    (32) formal_parameter_list -> formal_parameter_list . , formal_parameter

    )               reduce using rule 29 (formal_parameter_list_opt -> formal_parameter_list .)
    ,               shift and go to state 179


state 121

    (30) formal_parameter_list_opt -> empty .

    )               reduce using rule 30 (formal_parameter_list_opt -> empty .)


state 122

    (31) formal_parameter_list -> formal_parameter .

    ,               reduce using rule 31 (formal_parameter_list -> formal_parameter .)
    )               reduce using rule 31 (formal_parameter_list -> formal_parameter .)


state 123

    (33) formal_parameter -> type . variable_declarator_id
    (34) variable_declarator_id -> . NAME

    NAME            shift and go to state 129

    variable_declarator_id         shift and go to state 180

state 124

    (13) tmain_header -> tmain_name ( formal_parameter_list_opt . )

    )               shift and go to state 181


state 125

    (24) method_declaration -> method_header opening_bracket method_body closing_bracket .

    }               reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    PUBLIC          reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    PROTECTED       reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    PRIVATE         reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    STATIC          reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    ABSTRACT        reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    FINAL           reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    NATIVE          reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    BOOLEAN         reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    VOID            reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    BYTE            reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    SHORT           reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    INT             reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    LONG            reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    CHAR            reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    FLOAT           reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    DOUBLE          reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    STRING          reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    NAME            reduce using rule 24 (method_declaration -> method_header opening_bracket method_body closing_bracket .)


state 126

    (64) block_statements -> block_statements block_statement .

    ;               reduce using rule 64 (block_statements -> block_statements block_statement .)
    IF              reduce using rule 64 (block_statements -> block_statements block_statement .)
    WHILE           reduce using rule 64 (block_statements -> block_statements block_statement .)
    DO              reduce using rule 64 (block_statements -> block_statements block_statement .)
    BREAK           reduce using rule 64 (block_statements -> block_statements block_statement .)
    RETURN          reduce using rule 64 (block_statements -> block_statements block_statement .)
    CONTINUE        reduce using rule 64 (block_statements -> block_statements block_statement .)
    BOOLEAN         reduce using rule 64 (block_statements -> block_statements block_statement .)
    VOID            reduce using rule 64 (block_statements -> block_statements block_statement .)
    BYTE            reduce using rule 64 (block_statements -> block_statements block_statement .)
    SHORT           reduce using rule 64 (block_statements -> block_statements block_statement .)
    INT             reduce using rule 64 (block_statements -> block_statements block_statement .)
    LONG            reduce using rule 64 (block_statements -> block_statements block_statement .)
    CHAR            reduce using rule 64 (block_statements -> block_statements block_statement .)
    FLOAT           reduce using rule 64 (block_statements -> block_statements block_statement .)
    DOUBLE          reduce using rule 64 (block_statements -> block_statements block_statement .)
    STRING          reduce using rule 64 (block_statements -> block_statements block_statement .)
    PUBLIC          reduce using rule 64 (block_statements -> block_statements block_statement .)
    PROTECTED       reduce using rule 64 (block_statements -> block_statements block_statement .)
    PRIVATE         reduce using rule 64 (block_statements -> block_statements block_statement .)
    STATIC          reduce using rule 64 (block_statements -> block_statements block_statement .)
    ABSTRACT        reduce using rule 64 (block_statements -> block_statements block_statement .)
    FINAL           reduce using rule 64 (block_statements -> block_statements block_statement .)
    NATIVE          reduce using rule 64 (block_statements -> block_statements block_statement .)
    +               reduce using rule 64 (block_statements -> block_statements block_statement .)
    -               reduce using rule 64 (block_statements -> block_statements block_statement .)
    NAME            reduce using rule 64 (block_statements -> block_statements block_statement .)
    PLUSPLUS        reduce using rule 64 (block_statements -> block_statements block_statement .)
    MINUSMINUS      reduce using rule 64 (block_statements -> block_statements block_statement .)
    NUM             reduce using rule 64 (block_statements -> block_statements block_statement .)
    CHAR_LITERAL    reduce using rule 64 (block_statements -> block_statements block_statement .)
    STRING_LITERAL  reduce using rule 64 (block_statements -> block_statements block_statement .)
    TRUE            reduce using rule 64 (block_statements -> block_statements block_statement .)
    FALSE           reduce using rule 64 (block_statements -> block_statements block_statement .)
    NULL            reduce using rule 64 (block_statements -> block_statements block_statement .)
    }               reduce using rule 64 (block_statements -> block_statements block_statement .)


state 127

    (67) local_variable_declaration_statement -> local_variable_declaration ; .

    ;               reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    IF              reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    WHILE           reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    DO              reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    BREAK           reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    RETURN          reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    CONTINUE        reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    BOOLEAN         reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    VOID            reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    BYTE            reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    SHORT           reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    INT             reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    LONG            reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    CHAR            reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    FLOAT           reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    DOUBLE          reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    STRING          reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    PUBLIC          reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    PROTECTED       reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    PRIVATE         reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    STATIC          reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    ABSTRACT        reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    FINAL           reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    NATIVE          reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    +               reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    -               reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    NAME            reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    PLUSPLUS        reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    MINUSMINUS      reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    NUM             reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    CHAR_LITERAL    reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    STRING_LITERAL  reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    TRUE            reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    FALSE           reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    NULL            reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)
    }               reduce using rule 67 (local_variable_declaration_statement -> local_variable_declaration ; .)


state 128

    (68) local_variable_declaration -> type variable_declarators .
    (71) variable_declarators -> variable_declarators . , variable_declarator

    ;               reduce using rule 68 (local_variable_declaration -> type variable_declarators .)
    ,               shift and go to state 173


state 129

    (34) variable_declarator_id -> NAME .

    =               reduce using rule 34 (variable_declarator_id -> NAME .)
    ,               reduce using rule 34 (variable_declarator_id -> NAME .)
    ;               reduce using rule 34 (variable_declarator_id -> NAME .)
    )               reduce using rule 34 (variable_declarator_id -> NAME .)


state 130

    (69) local_variable_declaration -> modifiers type . variable_declarators
    (70) variable_declarators -> . variable_declarator
    (71) variable_declarators -> . variable_declarators , variable_declarator
    (72) variable_declarator -> . variable_declarator_id
    (73) variable_declarator -> . variable_declarator_id = variable_initializer
    (34) variable_declarator_id -> . NAME

    NAME            shift and go to state 129

    variable_declarators           shift and go to state 182
    variable_declarator            shift and go to state 113
    variable_declarator_id         shift and go to state 114

state 131

    (99) if_then_statement -> IF ( . expression ) opening_bracket block_statements closing_bracket
    (100) if_then_else_statement -> IF ( . expression ) opening_bracket block_statements closing_bracket else
    (104) expression -> . assignment_expression
    (105) assignment_expression -> . assignment
    (106) assignment_expression -> . conditional_expression
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (114) conditional_expression -> . conditional_or_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (115) conditional_or_expression -> . conditional_and_expression
    (116) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (117) conditional_and_expression -> . inclusive_or_expression
    (118) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (119) inclusive_or_expression -> . and_expression
    (120) inclusive_or_expression -> . inclusive_or_expression | and_expression
    (121) and_expression -> . equality_expression
    (122) and_expression -> . and_expression & equality_expression
    (123) equality_expression -> . equality_expression EQ relational_expression
    (124) equality_expression -> . equality_expression NEQ relational_expression
    (125) equality_expression -> . relational_expression
    (126) relational_expression -> . additive_expression
    (127) relational_expression -> . relational_expression > additive_expression
    (128) relational_expression -> . relational_expression < additive_expression
    (129) relational_expression -> . relational_expression GTEQ additive_expression
    (130) relational_expression -> . relational_expression LTEQ additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression

    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43
    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100

    expression                     shift and go to state 183
    assignment_expression          shift and go to state 141
    assignment                     shift and go to state 142
    conditional_expression         shift and go to state 143
    postfix_expression             shift and go to state 144
    conditional_or_expression      shift and go to state 145
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    conditional_and_expression     shift and go to state 147
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    inclusive_or_expression        shift and go to state 148
    and_expression                 shift and go to state 149
    equality_expression            shift and go to state 150
    relational_expression          shift and go to state 151
    additive_expression            shift and go to state 152
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93

state 132

    (102) while_statement -> WHILE ( . expression ) opening_bracket block_statements closing_bracket
    (104) expression -> . assignment_expression
    (105) assignment_expression -> . assignment
    (106) assignment_expression -> . conditional_expression
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (114) conditional_expression -> . conditional_or_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (115) conditional_or_expression -> . conditional_and_expression
    (116) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (117) conditional_and_expression -> . inclusive_or_expression
    (118) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (119) inclusive_or_expression -> . and_expression
    (120) inclusive_or_expression -> . inclusive_or_expression | and_expression
    (121) and_expression -> . equality_expression
    (122) and_expression -> . and_expression & equality_expression
    (123) equality_expression -> . equality_expression EQ relational_expression
    (124) equality_expression -> . equality_expression NEQ relational_expression
    (125) equality_expression -> . relational_expression
    (126) relational_expression -> . additive_expression
    (127) relational_expression -> . relational_expression > additive_expression
    (128) relational_expression -> . relational_expression < additive_expression
    (129) relational_expression -> . relational_expression GTEQ additive_expression
    (130) relational_expression -> . relational_expression LTEQ additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression

    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43
    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100

    expression                     shift and go to state 184
    assignment_expression          shift and go to state 141
    assignment                     shift and go to state 142
    conditional_expression         shift and go to state 143
    postfix_expression             shift and go to state 144
    conditional_or_expression      shift and go to state 145
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    conditional_and_expression     shift and go to state 147
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    inclusive_or_expression        shift and go to state 148
    and_expression                 shift and go to state 149
    equality_expression            shift and go to state 150
    relational_expression          shift and go to state 151
    additive_expression            shift and go to state 152
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93

state 133

    (103) do_while_statement -> DO opening_bracket . block_statements closing_bracket WHILE ( expression ) ;
    (63) block_statements -> . block_statement
    (64) block_statements -> . block_statements block_statement
    (65) block_statement -> . local_variable_declaration_statement
    (66) block_statement -> . statement
    (67) local_variable_declaration_statement -> . local_variable_declaration ;
    (75) statement -> . other_statement
    (76) statement -> . if_then_statement
    (77) statement -> . if_then_else_statement
    (78) statement -> . while_statement
    (79) statement -> . do_while_statement
    (68) local_variable_declaration -> . type variable_declarators
    (69) local_variable_declaration -> . modifiers type variable_declarators
    (80) other_statement -> . expression_statement
    (81) other_statement -> . break_statement
    (82) other_statement -> . return_statement
    (83) other_statement -> . continue_statement
    (84) other_statement -> . ;
    (99) if_then_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket
    (100) if_then_else_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket else
    (102) while_statement -> . WHILE ( expression ) opening_bracket block_statements closing_bracket
    (103) do_while_statement -> . DO opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (35) type -> . primitive_type
    (36) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (85) expression_statement -> . statement_expression ;
    (93) break_statement -> . BREAK ;
    (94) break_statement -> . BREAK NAME ;
    (95) return_statement -> . RETURN expression_opt ;
    (98) continue_statement -> . CONTINUE ;
    (41) primitive_type -> . BOOLEAN
    (42) primitive_type -> . VOID
    (43) primitive_type -> . BYTE
    (44) primitive_type -> . SHORT
    (45) primitive_type -> . INT
    (46) primitive_type -> . LONG
    (47) primitive_type -> . CHAR
    (48) primitive_type -> . FLOAT
    (49) primitive_type -> . DOUBLE
    (50) primitive_type -> . STRING
    (37) array_type -> . primitive_type dims
    (38) array_type -> . name dims
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE
    (86) statement_expression -> . assignment
    (87) statement_expression -> . unary_expression
    (88) statement_expression -> . method_invocation
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (89) method_invocation -> . NAME ( argument_list )
    (90) method_invocation -> . NAME ( )
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]

    ;               shift and go to state 67
    IF              shift and go to state 79
    WHILE           shift and go to state 80
    DO              shift and go to state 81
    BREAK           shift and go to state 83
    RETURN          shift and go to state 85
    CONTINUE        shift and go to state 86
    BOOLEAN         shift and go to state 46
    VOID            shift and go to state 47
    BYTE            shift and go to state 48
    SHORT           shift and go to state 49
    INT             shift and go to state 50
    LONG            shift and go to state 51
    CHAR            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    +               shift and go to state 94
    -               shift and go to state 95
    NAME            shift and go to state 84
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108

    block_statements               shift and go to state 185
    block_statement                shift and go to state 63
    local_variable_declaration_statement shift and go to state 64
    statement                      shift and go to state 65
    local_variable_declaration     shift and go to state 66
    other_statement                shift and go to state 68
    if_then_statement              shift and go to state 69
    if_then_else_statement         shift and go to state 70
    while_statement                shift and go to state 71
    do_while_statement             shift and go to state 72
    type                           shift and go to state 73
    modifiers                      shift and go to state 74
    expression_statement           shift and go to state 75
    break_statement                shift and go to state 76
    return_statement               shift and go to state 77
    continue_statement             shift and go to state 78
    primitive_type                 shift and go to state 44
    array_type                     shift and go to state 45
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 82
    name                           shift and go to state 87
    assignment                     shift and go to state 88
    unary_expression               shift and go to state 89
    method_invocation              shift and go to state 90
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    postfix_expression             shift and go to state 91
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    primary                        shift and go to state 96
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102

state 134

    (85) expression_statement -> statement_expression ; .

    ;               reduce using rule 85 (expression_statement -> statement_expression ; .)
    IF              reduce using rule 85 (expression_statement -> statement_expression ; .)
    WHILE           reduce using rule 85 (expression_statement -> statement_expression ; .)
    DO              reduce using rule 85 (expression_statement -> statement_expression ; .)
    BREAK           reduce using rule 85 (expression_statement -> statement_expression ; .)
    RETURN          reduce using rule 85 (expression_statement -> statement_expression ; .)
    CONTINUE        reduce using rule 85 (expression_statement -> statement_expression ; .)
    BOOLEAN         reduce using rule 85 (expression_statement -> statement_expression ; .)
    VOID            reduce using rule 85 (expression_statement -> statement_expression ; .)
    BYTE            reduce using rule 85 (expression_statement -> statement_expression ; .)
    SHORT           reduce using rule 85 (expression_statement -> statement_expression ; .)
    INT             reduce using rule 85 (expression_statement -> statement_expression ; .)
    LONG            reduce using rule 85 (expression_statement -> statement_expression ; .)
    CHAR            reduce using rule 85 (expression_statement -> statement_expression ; .)
    FLOAT           reduce using rule 85 (expression_statement -> statement_expression ; .)
    DOUBLE          reduce using rule 85 (expression_statement -> statement_expression ; .)
    STRING          reduce using rule 85 (expression_statement -> statement_expression ; .)
    PUBLIC          reduce using rule 85 (expression_statement -> statement_expression ; .)
    PROTECTED       reduce using rule 85 (expression_statement -> statement_expression ; .)
    PRIVATE         reduce using rule 85 (expression_statement -> statement_expression ; .)
    STATIC          reduce using rule 85 (expression_statement -> statement_expression ; .)
    ABSTRACT        reduce using rule 85 (expression_statement -> statement_expression ; .)
    FINAL           reduce using rule 85 (expression_statement -> statement_expression ; .)
    NATIVE          reduce using rule 85 (expression_statement -> statement_expression ; .)
    +               reduce using rule 85 (expression_statement -> statement_expression ; .)
    -               reduce using rule 85 (expression_statement -> statement_expression ; .)
    NAME            reduce using rule 85 (expression_statement -> statement_expression ; .)
    PLUSPLUS        reduce using rule 85 (expression_statement -> statement_expression ; .)
    MINUSMINUS      reduce using rule 85 (expression_statement -> statement_expression ; .)
    NUM             reduce using rule 85 (expression_statement -> statement_expression ; .)
    CHAR_LITERAL    reduce using rule 85 (expression_statement -> statement_expression ; .)
    STRING_LITERAL  reduce using rule 85 (expression_statement -> statement_expression ; .)
    TRUE            reduce using rule 85 (expression_statement -> statement_expression ; .)
    FALSE           reduce using rule 85 (expression_statement -> statement_expression ; .)
    NULL            reduce using rule 85 (expression_statement -> statement_expression ; .)
    }               reduce using rule 85 (expression_statement -> statement_expression ; .)


state 135

    (93) break_statement -> BREAK ; .

    ;               reduce using rule 93 (break_statement -> BREAK ; .)
    IF              reduce using rule 93 (break_statement -> BREAK ; .)
    WHILE           reduce using rule 93 (break_statement -> BREAK ; .)
    DO              reduce using rule 93 (break_statement -> BREAK ; .)
    BREAK           reduce using rule 93 (break_statement -> BREAK ; .)
    RETURN          reduce using rule 93 (break_statement -> BREAK ; .)
    CONTINUE        reduce using rule 93 (break_statement -> BREAK ; .)
    BOOLEAN         reduce using rule 93 (break_statement -> BREAK ; .)
    VOID            reduce using rule 93 (break_statement -> BREAK ; .)
    BYTE            reduce using rule 93 (break_statement -> BREAK ; .)
    SHORT           reduce using rule 93 (break_statement -> BREAK ; .)
    INT             reduce using rule 93 (break_statement -> BREAK ; .)
    LONG            reduce using rule 93 (break_statement -> BREAK ; .)
    CHAR            reduce using rule 93 (break_statement -> BREAK ; .)
    FLOAT           reduce using rule 93 (break_statement -> BREAK ; .)
    DOUBLE          reduce using rule 93 (break_statement -> BREAK ; .)
    STRING          reduce using rule 93 (break_statement -> BREAK ; .)
    PUBLIC          reduce using rule 93 (break_statement -> BREAK ; .)
    PROTECTED       reduce using rule 93 (break_statement -> BREAK ; .)
    PRIVATE         reduce using rule 93 (break_statement -> BREAK ; .)
    STATIC          reduce using rule 93 (break_statement -> BREAK ; .)
    ABSTRACT        reduce using rule 93 (break_statement -> BREAK ; .)
    FINAL           reduce using rule 93 (break_statement -> BREAK ; .)
    NATIVE          reduce using rule 93 (break_statement -> BREAK ; .)
    +               reduce using rule 93 (break_statement -> BREAK ; .)
    -               reduce using rule 93 (break_statement -> BREAK ; .)
    NAME            reduce using rule 93 (break_statement -> BREAK ; .)
    PLUSPLUS        reduce using rule 93 (break_statement -> BREAK ; .)
    MINUSMINUS      reduce using rule 93 (break_statement -> BREAK ; .)
    NUM             reduce using rule 93 (break_statement -> BREAK ; .)
    CHAR_LITERAL    reduce using rule 93 (break_statement -> BREAK ; .)
    STRING_LITERAL  reduce using rule 93 (break_statement -> BREAK ; .)
    TRUE            reduce using rule 93 (break_statement -> BREAK ; .)
    FALSE           reduce using rule 93 (break_statement -> BREAK ; .)
    NULL            reduce using rule 93 (break_statement -> BREAK ; .)
    }               reduce using rule 93 (break_statement -> BREAK ; .)


state 136

    (94) break_statement -> BREAK NAME . ;

    ;               shift and go to state 186


state 137

    (89) method_invocation -> NAME ( . argument_list )
    (90) method_invocation -> NAME ( . )
    (91) argument_list -> . expression
    (92) argument_list -> . argument_list , expression
    (104) expression -> . assignment_expression
    (105) assignment_expression -> . assignment
    (106) assignment_expression -> . conditional_expression
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (114) conditional_expression -> . conditional_or_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (115) conditional_or_expression -> . conditional_and_expression
    (116) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (117) conditional_and_expression -> . inclusive_or_expression
    (118) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (119) inclusive_or_expression -> . and_expression
    (120) inclusive_or_expression -> . inclusive_or_expression | and_expression
    (121) and_expression -> . equality_expression
    (122) and_expression -> . and_expression & equality_expression
    (123) equality_expression -> . equality_expression EQ relational_expression
    (124) equality_expression -> . equality_expression NEQ relational_expression
    (125) equality_expression -> . relational_expression
    (126) relational_expression -> . additive_expression
    (127) relational_expression -> . relational_expression > additive_expression
    (128) relational_expression -> . relational_expression < additive_expression
    (129) relational_expression -> . relational_expression GTEQ additive_expression
    (130) relational_expression -> . relational_expression LTEQ additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression

    )               shift and go to state 188
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43
    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100

    argument_list                  shift and go to state 187
    expression                     shift and go to state 189
    assignment_expression          shift and go to state 141
    assignment                     shift and go to state 142
    conditional_expression         shift and go to state 143
    postfix_expression             shift and go to state 144
    conditional_or_expression      shift and go to state 145
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    conditional_and_expression     shift and go to state 147
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    inclusive_or_expression        shift and go to state 148
    and_expression                 shift and go to state 149
    equality_expression            shift and go to state 150
    relational_expression          shift and go to state 151
    additive_expression            shift and go to state 152
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93

state 138

    (95) return_statement -> RETURN expression_opt . ;

    ;               shift and go to state 190


state 139

    (96) expression_opt -> expression .

    ;               reduce using rule 96 (expression_opt -> expression .)


state 140

    (97) expression_opt -> empty .

    ;               reduce using rule 97 (expression_opt -> empty .)


state 141

    (104) expression -> assignment_expression .

    ;               reduce using rule 104 (expression -> assignment_expression .)
    )               reduce using rule 104 (expression -> assignment_expression .)
    ,               reduce using rule 104 (expression -> assignment_expression .)
    ]               reduce using rule 104 (expression -> assignment_expression .)


state 142

    (105) assignment_expression -> assignment .

    ;               reduce using rule 105 (assignment_expression -> assignment .)
    )               reduce using rule 105 (assignment_expression -> assignment .)
    ,               reduce using rule 105 (assignment_expression -> assignment .)
    ]               reduce using rule 105 (assignment_expression -> assignment .)


state 143

    (106) assignment_expression -> conditional_expression .

    ;               reduce using rule 106 (assignment_expression -> conditional_expression .)
    )               reduce using rule 106 (assignment_expression -> conditional_expression .)
    ,               reduce using rule 106 (assignment_expression -> conditional_expression .)
    ]               reduce using rule 106 (assignment_expression -> conditional_expression .)


state 144

    (107) assignment -> postfix_expression . assignment_operator assignment_expression
    (149) post_increment_expression -> postfix_expression . PLUSPLUS
    (150) post_decrement_expression -> postfix_expression . MINUSMINUS
    (142) unary_expression -> postfix_expression .
    (108) assignment_operator -> . =
    (109) assignment_operator -> . TIMES_ASSIGN
    (110) assignment_operator -> . DIVIDE_ASSIGN
    (111) assignment_operator -> . REMAINDER_ASSIGN
    (112) assignment_operator -> . PLUS_ASSIGN
    (113) assignment_operator -> . MINUS_ASSIGN

    PLUSPLUS        shift and go to state 158
    MINUSMINUS      shift and go to state 159
    *               reduce using rule 142 (unary_expression -> postfix_expression .)
    /               reduce using rule 142 (unary_expression -> postfix_expression .)
    %               reduce using rule 142 (unary_expression -> postfix_expression .)
    +               reduce using rule 142 (unary_expression -> postfix_expression .)
    -               reduce using rule 142 (unary_expression -> postfix_expression .)
    >               reduce using rule 142 (unary_expression -> postfix_expression .)
    <               reduce using rule 142 (unary_expression -> postfix_expression .)
    GTEQ            reduce using rule 142 (unary_expression -> postfix_expression .)
    LTEQ            reduce using rule 142 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 142 (unary_expression -> postfix_expression .)
    NEQ             reduce using rule 142 (unary_expression -> postfix_expression .)
    &               reduce using rule 142 (unary_expression -> postfix_expression .)
    |               reduce using rule 142 (unary_expression -> postfix_expression .)
    AND             reduce using rule 142 (unary_expression -> postfix_expression .)
    OR              reduce using rule 142 (unary_expression -> postfix_expression .)
    ;               reduce using rule 142 (unary_expression -> postfix_expression .)
    )               reduce using rule 142 (unary_expression -> postfix_expression .)
    ,               reduce using rule 142 (unary_expression -> postfix_expression .)
    ]               reduce using rule 142 (unary_expression -> postfix_expression .)
    =               shift and go to state 160
    TIMES_ASSIGN    shift and go to state 161
    DIVIDE_ASSIGN   shift and go to state 162
    REMAINDER_ASSIGN shift and go to state 163
    PLUS_ASSIGN     shift and go to state 164
    MINUS_ASSIGN    shift and go to state 165

    assignment_operator            shift and go to state 157

state 145

    (114) conditional_expression -> conditional_or_expression .
    (116) conditional_or_expression -> conditional_or_expression . OR conditional_and_expression

    ;               reduce using rule 114 (conditional_expression -> conditional_or_expression .)
    )               reduce using rule 114 (conditional_expression -> conditional_or_expression .)
    ,               reduce using rule 114 (conditional_expression -> conditional_or_expression .)
    ]               reduce using rule 114 (conditional_expression -> conditional_or_expression .)
    OR              shift and go to state 191


state 146

    (146) postfix_expression -> name .
    (153) array_access -> name . [ expression ]
    (61) qualified_name -> name . . simple_name

    PLUSPLUS        reduce using rule 146 (postfix_expression -> name .)
    MINUSMINUS      reduce using rule 146 (postfix_expression -> name .)
    =               reduce using rule 146 (postfix_expression -> name .)
    TIMES_ASSIGN    reduce using rule 146 (postfix_expression -> name .)
    DIVIDE_ASSIGN   reduce using rule 146 (postfix_expression -> name .)
    REMAINDER_ASSIGN reduce using rule 146 (postfix_expression -> name .)
    PLUS_ASSIGN     reduce using rule 146 (postfix_expression -> name .)
    MINUS_ASSIGN    reduce using rule 146 (postfix_expression -> name .)
    *               reduce using rule 146 (postfix_expression -> name .)
    /               reduce using rule 146 (postfix_expression -> name .)
    %               reduce using rule 146 (postfix_expression -> name .)
    +               reduce using rule 146 (postfix_expression -> name .)
    -               reduce using rule 146 (postfix_expression -> name .)
    >               reduce using rule 146 (postfix_expression -> name .)
    <               reduce using rule 146 (postfix_expression -> name .)
    GTEQ            reduce using rule 146 (postfix_expression -> name .)
    LTEQ            reduce using rule 146 (postfix_expression -> name .)
    EQ              reduce using rule 146 (postfix_expression -> name .)
    NEQ             reduce using rule 146 (postfix_expression -> name .)
    &               reduce using rule 146 (postfix_expression -> name .)
    |               reduce using rule 146 (postfix_expression -> name .)
    AND             reduce using rule 146 (postfix_expression -> name .)
    OR              reduce using rule 146 (postfix_expression -> name .)
    ;               reduce using rule 146 (postfix_expression -> name .)
    )               reduce using rule 146 (postfix_expression -> name .)
    ,               reduce using rule 146 (postfix_expression -> name .)
    ]               reduce using rule 146 (postfix_expression -> name .)
    [               shift and go to state 192
    .               shift and go to state 118


state 147

    (115) conditional_or_expression -> conditional_and_expression .
    (118) conditional_and_expression -> conditional_and_expression . AND inclusive_or_expression

    OR              reduce using rule 115 (conditional_or_expression -> conditional_and_expression .)
    ;               reduce using rule 115 (conditional_or_expression -> conditional_and_expression .)
    )               reduce using rule 115 (conditional_or_expression -> conditional_and_expression .)
    ,               reduce using rule 115 (conditional_or_expression -> conditional_and_expression .)
    ]               reduce using rule 115 (conditional_or_expression -> conditional_and_expression .)
    AND             shift and go to state 193


state 148

    (117) conditional_and_expression -> inclusive_or_expression .
    (120) inclusive_or_expression -> inclusive_or_expression . | and_expression

    AND             reduce using rule 117 (conditional_and_expression -> inclusive_or_expression .)
    OR              reduce using rule 117 (conditional_and_expression -> inclusive_or_expression .)
    ;               reduce using rule 117 (conditional_and_expression -> inclusive_or_expression .)
    )               reduce using rule 117 (conditional_and_expression -> inclusive_or_expression .)
    ,               reduce using rule 117 (conditional_and_expression -> inclusive_or_expression .)
    ]               reduce using rule 117 (conditional_and_expression -> inclusive_or_expression .)
    |               shift and go to state 194


state 149

    (119) inclusive_or_expression -> and_expression .
    (122) and_expression -> and_expression . & equality_expression

    |               reduce using rule 119 (inclusive_or_expression -> and_expression .)
    AND             reduce using rule 119 (inclusive_or_expression -> and_expression .)
    OR              reduce using rule 119 (inclusive_or_expression -> and_expression .)
    ;               reduce using rule 119 (inclusive_or_expression -> and_expression .)
    )               reduce using rule 119 (inclusive_or_expression -> and_expression .)
    ,               reduce using rule 119 (inclusive_or_expression -> and_expression .)
    ]               reduce using rule 119 (inclusive_or_expression -> and_expression .)
    &               shift and go to state 195


state 150

    (121) and_expression -> equality_expression .
    (123) equality_expression -> equality_expression . EQ relational_expression
    (124) equality_expression -> equality_expression . NEQ relational_expression

    &               reduce using rule 121 (and_expression -> equality_expression .)
    |               reduce using rule 121 (and_expression -> equality_expression .)
    AND             reduce using rule 121 (and_expression -> equality_expression .)
    OR              reduce using rule 121 (and_expression -> equality_expression .)
    ;               reduce using rule 121 (and_expression -> equality_expression .)
    )               reduce using rule 121 (and_expression -> equality_expression .)
    ,               reduce using rule 121 (and_expression -> equality_expression .)
    ]               reduce using rule 121 (and_expression -> equality_expression .)
    EQ              shift and go to state 196
    NEQ             shift and go to state 197


state 151

    (125) equality_expression -> relational_expression .
    (127) relational_expression -> relational_expression . > additive_expression
    (128) relational_expression -> relational_expression . < additive_expression
    (129) relational_expression -> relational_expression . GTEQ additive_expression
    (130) relational_expression -> relational_expression . LTEQ additive_expression

    EQ              reduce using rule 125 (equality_expression -> relational_expression .)
    NEQ             reduce using rule 125 (equality_expression -> relational_expression .)
    &               reduce using rule 125 (equality_expression -> relational_expression .)
    |               reduce using rule 125 (equality_expression -> relational_expression .)
    AND             reduce using rule 125 (equality_expression -> relational_expression .)
    OR              reduce using rule 125 (equality_expression -> relational_expression .)
    ;               reduce using rule 125 (equality_expression -> relational_expression .)
    )               reduce using rule 125 (equality_expression -> relational_expression .)
    ,               reduce using rule 125 (equality_expression -> relational_expression .)
    ]               reduce using rule 125 (equality_expression -> relational_expression .)
    >               shift and go to state 198
    <               shift and go to state 199
    GTEQ            shift and go to state 200
    LTEQ            shift and go to state 201


state 152

    (126) relational_expression -> additive_expression .
    (132) additive_expression -> additive_expression . + multiplicative_expression
    (133) additive_expression -> additive_expression . - multiplicative_expression

    >               reduce using rule 126 (relational_expression -> additive_expression .)
    <               reduce using rule 126 (relational_expression -> additive_expression .)
    GTEQ            reduce using rule 126 (relational_expression -> additive_expression .)
    LTEQ            reduce using rule 126 (relational_expression -> additive_expression .)
    EQ              reduce using rule 126 (relational_expression -> additive_expression .)
    NEQ             reduce using rule 126 (relational_expression -> additive_expression .)
    &               reduce using rule 126 (relational_expression -> additive_expression .)
    |               reduce using rule 126 (relational_expression -> additive_expression .)
    AND             reduce using rule 126 (relational_expression -> additive_expression .)
    OR              reduce using rule 126 (relational_expression -> additive_expression .)
    ;               reduce using rule 126 (relational_expression -> additive_expression .)
    )               reduce using rule 126 (relational_expression -> additive_expression .)
    ,               reduce using rule 126 (relational_expression -> additive_expression .)
    ]               reduce using rule 126 (relational_expression -> additive_expression .)
    +               shift and go to state 202
    -               shift and go to state 203


state 153

    (131) additive_expression -> multiplicative_expression .
    (135) multiplicative_expression -> multiplicative_expression . * unary_expression
    (136) multiplicative_expression -> multiplicative_expression . / unary_expression
    (137) multiplicative_expression -> multiplicative_expression . % unary_expression

    +               reduce using rule 131 (additive_expression -> multiplicative_expression .)
    -               reduce using rule 131 (additive_expression -> multiplicative_expression .)
    >               reduce using rule 131 (additive_expression -> multiplicative_expression .)
    <               reduce using rule 131 (additive_expression -> multiplicative_expression .)
    GTEQ            reduce using rule 131 (additive_expression -> multiplicative_expression .)
    LTEQ            reduce using rule 131 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 131 (additive_expression -> multiplicative_expression .)
    NEQ             reduce using rule 131 (additive_expression -> multiplicative_expression .)
    &               reduce using rule 131 (additive_expression -> multiplicative_expression .)
    |               reduce using rule 131 (additive_expression -> multiplicative_expression .)
    AND             reduce using rule 131 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 131 (additive_expression -> multiplicative_expression .)
    ;               reduce using rule 131 (additive_expression -> multiplicative_expression .)
    )               reduce using rule 131 (additive_expression -> multiplicative_expression .)
    ,               reduce using rule 131 (additive_expression -> multiplicative_expression .)
    ]               reduce using rule 131 (additive_expression -> multiplicative_expression .)
    *               shift and go to state 204
    /               shift and go to state 205
    %               shift and go to state 206


state 154

    (134) multiplicative_expression -> unary_expression .

    *               reduce using rule 134 (multiplicative_expression -> unary_expression .)
    /               reduce using rule 134 (multiplicative_expression -> unary_expression .)
    %               reduce using rule 134 (multiplicative_expression -> unary_expression .)
    +               reduce using rule 134 (multiplicative_expression -> unary_expression .)
    -               reduce using rule 134 (multiplicative_expression -> unary_expression .)
    >               reduce using rule 134 (multiplicative_expression -> unary_expression .)
    <               reduce using rule 134 (multiplicative_expression -> unary_expression .)
    GTEQ            reduce using rule 134 (multiplicative_expression -> unary_expression .)
    LTEQ            reduce using rule 134 (multiplicative_expression -> unary_expression .)
    EQ              reduce using rule 134 (multiplicative_expression -> unary_expression .)
    NEQ             reduce using rule 134 (multiplicative_expression -> unary_expression .)
    &               reduce using rule 134 (multiplicative_expression -> unary_expression .)
    |               reduce using rule 134 (multiplicative_expression -> unary_expression .)
    AND             reduce using rule 134 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 134 (multiplicative_expression -> unary_expression .)
    ;               reduce using rule 134 (multiplicative_expression -> unary_expression .)
    )               reduce using rule 134 (multiplicative_expression -> unary_expression .)
    ,               reduce using rule 134 (multiplicative_expression -> unary_expression .)
    ]               reduce using rule 134 (multiplicative_expression -> unary_expression .)


state 155

    (98) continue_statement -> CONTINUE ; .

    ;               reduce using rule 98 (continue_statement -> CONTINUE ; .)
    IF              reduce using rule 98 (continue_statement -> CONTINUE ; .)
    WHILE           reduce using rule 98 (continue_statement -> CONTINUE ; .)
    DO              reduce using rule 98 (continue_statement -> CONTINUE ; .)
    BREAK           reduce using rule 98 (continue_statement -> CONTINUE ; .)
    RETURN          reduce using rule 98 (continue_statement -> CONTINUE ; .)
    CONTINUE        reduce using rule 98 (continue_statement -> CONTINUE ; .)
    BOOLEAN         reduce using rule 98 (continue_statement -> CONTINUE ; .)
    VOID            reduce using rule 98 (continue_statement -> CONTINUE ; .)
    BYTE            reduce using rule 98 (continue_statement -> CONTINUE ; .)
    SHORT           reduce using rule 98 (continue_statement -> CONTINUE ; .)
    INT             reduce using rule 98 (continue_statement -> CONTINUE ; .)
    LONG            reduce using rule 98 (continue_statement -> CONTINUE ; .)
    CHAR            reduce using rule 98 (continue_statement -> CONTINUE ; .)
    FLOAT           reduce using rule 98 (continue_statement -> CONTINUE ; .)
    DOUBLE          reduce using rule 98 (continue_statement -> CONTINUE ; .)
    STRING          reduce using rule 98 (continue_statement -> CONTINUE ; .)
    PUBLIC          reduce using rule 98 (continue_statement -> CONTINUE ; .)
    PROTECTED       reduce using rule 98 (continue_statement -> CONTINUE ; .)
    PRIVATE         reduce using rule 98 (continue_statement -> CONTINUE ; .)
    STATIC          reduce using rule 98 (continue_statement -> CONTINUE ; .)
    ABSTRACT        reduce using rule 98 (continue_statement -> CONTINUE ; .)
    FINAL           reduce using rule 98 (continue_statement -> CONTINUE ; .)
    NATIVE          reduce using rule 98 (continue_statement -> CONTINUE ; .)
    +               reduce using rule 98 (continue_statement -> CONTINUE ; .)
    -               reduce using rule 98 (continue_statement -> CONTINUE ; .)
    NAME            reduce using rule 98 (continue_statement -> CONTINUE ; .)
    PLUSPLUS        reduce using rule 98 (continue_statement -> CONTINUE ; .)
    MINUSMINUS      reduce using rule 98 (continue_statement -> CONTINUE ; .)
    NUM             reduce using rule 98 (continue_statement -> CONTINUE ; .)
    CHAR_LITERAL    reduce using rule 98 (continue_statement -> CONTINUE ; .)
    STRING_LITERAL  reduce using rule 98 (continue_statement -> CONTINUE ; .)
    TRUE            reduce using rule 98 (continue_statement -> CONTINUE ; .)
    FALSE           reduce using rule 98 (continue_statement -> CONTINUE ; .)
    NULL            reduce using rule 98 (continue_statement -> CONTINUE ; .)
    }               reduce using rule 98 (continue_statement -> CONTINUE ; .)


state 156

    (153) array_access -> name [ . expression ]
    (39) dims -> [ . ]
    (104) expression -> . assignment_expression
    (105) assignment_expression -> . assignment
    (106) assignment_expression -> . conditional_expression
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (114) conditional_expression -> . conditional_or_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (115) conditional_or_expression -> . conditional_and_expression
    (116) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (117) conditional_and_expression -> . inclusive_or_expression
    (118) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (119) inclusive_or_expression -> . and_expression
    (120) inclusive_or_expression -> . inclusive_or_expression | and_expression
    (121) and_expression -> . equality_expression
    (122) and_expression -> . and_expression & equality_expression
    (123) equality_expression -> . equality_expression EQ relational_expression
    (124) equality_expression -> . equality_expression NEQ relational_expression
    (125) equality_expression -> . relational_expression
    (126) relational_expression -> . additive_expression
    (127) relational_expression -> . relational_expression > additive_expression
    (128) relational_expression -> . relational_expression < additive_expression
    (129) relational_expression -> . relational_expression GTEQ additive_expression
    (130) relational_expression -> . relational_expression LTEQ additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression

    ]               shift and go to state 176
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43
    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100

    name                           shift and go to state 146
    expression                     shift and go to state 207
    assignment_expression          shift and go to state 141
    assignment                     shift and go to state 142
    conditional_expression         shift and go to state 143
    postfix_expression             shift and go to state 144
    conditional_or_expression      shift and go to state 145
    primary                        shift and go to state 96
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    conditional_and_expression     shift and go to state 147
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    inclusive_or_expression        shift and go to state 148
    and_expression                 shift and go to state 149
    equality_expression            shift and go to state 150
    relational_expression          shift and go to state 151
    additive_expression            shift and go to state 152
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93

state 157

    (107) assignment -> postfix_expression assignment_operator . assignment_expression
    (105) assignment_expression -> . assignment
    (106) assignment_expression -> . conditional_expression
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (114) conditional_expression -> . conditional_or_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (115) conditional_or_expression -> . conditional_and_expression
    (116) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (117) conditional_and_expression -> . inclusive_or_expression
    (118) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (119) inclusive_or_expression -> . and_expression
    (120) inclusive_or_expression -> . inclusive_or_expression | and_expression
    (121) and_expression -> . equality_expression
    (122) and_expression -> . and_expression & equality_expression
    (123) equality_expression -> . equality_expression EQ relational_expression
    (124) equality_expression -> . equality_expression NEQ relational_expression
    (125) equality_expression -> . relational_expression
    (126) relational_expression -> . additive_expression
    (127) relational_expression -> . relational_expression > additive_expression
    (128) relational_expression -> . relational_expression < additive_expression
    (129) relational_expression -> . relational_expression GTEQ additive_expression
    (130) relational_expression -> . relational_expression LTEQ additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression

    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43
    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100

    postfix_expression             shift and go to state 144
    assignment_expression          shift and go to state 208
    assignment                     shift and go to state 142
    conditional_expression         shift and go to state 143
    conditional_or_expression      shift and go to state 145
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    conditional_and_expression     shift and go to state 147
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    inclusive_or_expression        shift and go to state 148
    and_expression                 shift and go to state 149
    equality_expression            shift and go to state 150
    relational_expression          shift and go to state 151
    additive_expression            shift and go to state 152
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93

state 158

    (149) post_increment_expression -> postfix_expression PLUSPLUS .

    PLUSPLUS        reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    =               reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    TIMES_ASSIGN    reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    DIVIDE_ASSIGN   reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    REMAINDER_ASSIGN reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    PLUS_ASSIGN     reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    MINUS_ASSIGN    reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    ;               reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    *               reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    /               reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    %               reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    +               reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    -               reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    >               reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    <               reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    GTEQ            reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    LTEQ            reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    NEQ             reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    &               reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    |               reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    )               reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    ,               reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)
    ]               reduce using rule 149 (post_increment_expression -> postfix_expression PLUSPLUS .)


state 159

    (150) post_decrement_expression -> postfix_expression MINUSMINUS .

    PLUSPLUS        reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    =               reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    TIMES_ASSIGN    reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    DIVIDE_ASSIGN   reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    REMAINDER_ASSIGN reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    PLUS_ASSIGN     reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    MINUS_ASSIGN    reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    ;               reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    *               reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    /               reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    %               reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    +               reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    -               reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    >               reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    <               reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    GTEQ            reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    LTEQ            reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    NEQ             reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    &               reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    |               reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    )               reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    ,               reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)
    ]               reduce using rule 150 (post_decrement_expression -> postfix_expression MINUSMINUS .)


state 160

    (108) assignment_operator -> = .

    NUM             reduce using rule 108 (assignment_operator -> = .)
    CHAR_LITERAL    reduce using rule 108 (assignment_operator -> = .)
    STRING_LITERAL  reduce using rule 108 (assignment_operator -> = .)
    TRUE            reduce using rule 108 (assignment_operator -> = .)
    FALSE           reduce using rule 108 (assignment_operator -> = .)
    NULL            reduce using rule 108 (assignment_operator -> = .)
    NAME            reduce using rule 108 (assignment_operator -> = .)
    +               reduce using rule 108 (assignment_operator -> = .)
    -               reduce using rule 108 (assignment_operator -> = .)
    PLUSPLUS        reduce using rule 108 (assignment_operator -> = .)
    MINUSMINUS      reduce using rule 108 (assignment_operator -> = .)


state 161

    (109) assignment_operator -> TIMES_ASSIGN .

    NUM             reduce using rule 109 (assignment_operator -> TIMES_ASSIGN .)
    CHAR_LITERAL    reduce using rule 109 (assignment_operator -> TIMES_ASSIGN .)
    STRING_LITERAL  reduce using rule 109 (assignment_operator -> TIMES_ASSIGN .)
    TRUE            reduce using rule 109 (assignment_operator -> TIMES_ASSIGN .)
    FALSE           reduce using rule 109 (assignment_operator -> TIMES_ASSIGN .)
    NULL            reduce using rule 109 (assignment_operator -> TIMES_ASSIGN .)
    NAME            reduce using rule 109 (assignment_operator -> TIMES_ASSIGN .)
    +               reduce using rule 109 (assignment_operator -> TIMES_ASSIGN .)
    -               reduce using rule 109 (assignment_operator -> TIMES_ASSIGN .)
    PLUSPLUS        reduce using rule 109 (assignment_operator -> TIMES_ASSIGN .)
    MINUSMINUS      reduce using rule 109 (assignment_operator -> TIMES_ASSIGN .)


state 162

    (110) assignment_operator -> DIVIDE_ASSIGN .

    NUM             reduce using rule 110 (assignment_operator -> DIVIDE_ASSIGN .)
    CHAR_LITERAL    reduce using rule 110 (assignment_operator -> DIVIDE_ASSIGN .)
    STRING_LITERAL  reduce using rule 110 (assignment_operator -> DIVIDE_ASSIGN .)
    TRUE            reduce using rule 110 (assignment_operator -> DIVIDE_ASSIGN .)
    FALSE           reduce using rule 110 (assignment_operator -> DIVIDE_ASSIGN .)
    NULL            reduce using rule 110 (assignment_operator -> DIVIDE_ASSIGN .)
    NAME            reduce using rule 110 (assignment_operator -> DIVIDE_ASSIGN .)
    +               reduce using rule 110 (assignment_operator -> DIVIDE_ASSIGN .)
    -               reduce using rule 110 (assignment_operator -> DIVIDE_ASSIGN .)
    PLUSPLUS        reduce using rule 110 (assignment_operator -> DIVIDE_ASSIGN .)
    MINUSMINUS      reduce using rule 110 (assignment_operator -> DIVIDE_ASSIGN .)


state 163

    (111) assignment_operator -> REMAINDER_ASSIGN .

    NUM             reduce using rule 111 (assignment_operator -> REMAINDER_ASSIGN .)
    CHAR_LITERAL    reduce using rule 111 (assignment_operator -> REMAINDER_ASSIGN .)
    STRING_LITERAL  reduce using rule 111 (assignment_operator -> REMAINDER_ASSIGN .)
    TRUE            reduce using rule 111 (assignment_operator -> REMAINDER_ASSIGN .)
    FALSE           reduce using rule 111 (assignment_operator -> REMAINDER_ASSIGN .)
    NULL            reduce using rule 111 (assignment_operator -> REMAINDER_ASSIGN .)
    NAME            reduce using rule 111 (assignment_operator -> REMAINDER_ASSIGN .)
    +               reduce using rule 111 (assignment_operator -> REMAINDER_ASSIGN .)
    -               reduce using rule 111 (assignment_operator -> REMAINDER_ASSIGN .)
    PLUSPLUS        reduce using rule 111 (assignment_operator -> REMAINDER_ASSIGN .)
    MINUSMINUS      reduce using rule 111 (assignment_operator -> REMAINDER_ASSIGN .)


state 164

    (112) assignment_operator -> PLUS_ASSIGN .

    NUM             reduce using rule 112 (assignment_operator -> PLUS_ASSIGN .)
    CHAR_LITERAL    reduce using rule 112 (assignment_operator -> PLUS_ASSIGN .)
    STRING_LITERAL  reduce using rule 112 (assignment_operator -> PLUS_ASSIGN .)
    TRUE            reduce using rule 112 (assignment_operator -> PLUS_ASSIGN .)
    FALSE           reduce using rule 112 (assignment_operator -> PLUS_ASSIGN .)
    NULL            reduce using rule 112 (assignment_operator -> PLUS_ASSIGN .)
    NAME            reduce using rule 112 (assignment_operator -> PLUS_ASSIGN .)
    +               reduce using rule 112 (assignment_operator -> PLUS_ASSIGN .)
    -               reduce using rule 112 (assignment_operator -> PLUS_ASSIGN .)
    PLUSPLUS        reduce using rule 112 (assignment_operator -> PLUS_ASSIGN .)
    MINUSMINUS      reduce using rule 112 (assignment_operator -> PLUS_ASSIGN .)


state 165

    (113) assignment_operator -> MINUS_ASSIGN .

    NUM             reduce using rule 113 (assignment_operator -> MINUS_ASSIGN .)
    CHAR_LITERAL    reduce using rule 113 (assignment_operator -> MINUS_ASSIGN .)
    STRING_LITERAL  reduce using rule 113 (assignment_operator -> MINUS_ASSIGN .)
    TRUE            reduce using rule 113 (assignment_operator -> MINUS_ASSIGN .)
    FALSE           reduce using rule 113 (assignment_operator -> MINUS_ASSIGN .)
    NULL            reduce using rule 113 (assignment_operator -> MINUS_ASSIGN .)
    NAME            reduce using rule 113 (assignment_operator -> MINUS_ASSIGN .)
    +               reduce using rule 113 (assignment_operator -> MINUS_ASSIGN .)
    -               reduce using rule 113 (assignment_operator -> MINUS_ASSIGN .)
    PLUSPLUS        reduce using rule 113 (assignment_operator -> MINUS_ASSIGN .)
    MINUSMINUS      reduce using rule 113 (assignment_operator -> MINUS_ASSIGN .)


state 166

    (140) unary_expression -> + unary_expression .

    ;               reduce using rule 140 (unary_expression -> + unary_expression .)
    *               reduce using rule 140 (unary_expression -> + unary_expression .)
    /               reduce using rule 140 (unary_expression -> + unary_expression .)
    %               reduce using rule 140 (unary_expression -> + unary_expression .)
    +               reduce using rule 140 (unary_expression -> + unary_expression .)
    -               reduce using rule 140 (unary_expression -> + unary_expression .)
    >               reduce using rule 140 (unary_expression -> + unary_expression .)
    <               reduce using rule 140 (unary_expression -> + unary_expression .)
    GTEQ            reduce using rule 140 (unary_expression -> + unary_expression .)
    LTEQ            reduce using rule 140 (unary_expression -> + unary_expression .)
    EQ              reduce using rule 140 (unary_expression -> + unary_expression .)
    NEQ             reduce using rule 140 (unary_expression -> + unary_expression .)
    &               reduce using rule 140 (unary_expression -> + unary_expression .)
    |               reduce using rule 140 (unary_expression -> + unary_expression .)
    AND             reduce using rule 140 (unary_expression -> + unary_expression .)
    OR              reduce using rule 140 (unary_expression -> + unary_expression .)
    )               reduce using rule 140 (unary_expression -> + unary_expression .)
    ,               reduce using rule 140 (unary_expression -> + unary_expression .)
    ]               reduce using rule 140 (unary_expression -> + unary_expression .)


state 167

    (142) unary_expression -> postfix_expression .
    (149) post_increment_expression -> postfix_expression . PLUSPLUS
    (150) post_decrement_expression -> postfix_expression . MINUSMINUS

    ;               reduce using rule 142 (unary_expression -> postfix_expression .)
    *               reduce using rule 142 (unary_expression -> postfix_expression .)
    /               reduce using rule 142 (unary_expression -> postfix_expression .)
    %               reduce using rule 142 (unary_expression -> postfix_expression .)
    +               reduce using rule 142 (unary_expression -> postfix_expression .)
    -               reduce using rule 142 (unary_expression -> postfix_expression .)
    >               reduce using rule 142 (unary_expression -> postfix_expression .)
    <               reduce using rule 142 (unary_expression -> postfix_expression .)
    GTEQ            reduce using rule 142 (unary_expression -> postfix_expression .)
    LTEQ            reduce using rule 142 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 142 (unary_expression -> postfix_expression .)
    NEQ             reduce using rule 142 (unary_expression -> postfix_expression .)
    &               reduce using rule 142 (unary_expression -> postfix_expression .)
    |               reduce using rule 142 (unary_expression -> postfix_expression .)
    AND             reduce using rule 142 (unary_expression -> postfix_expression .)
    OR              reduce using rule 142 (unary_expression -> postfix_expression .)
    )               reduce using rule 142 (unary_expression -> postfix_expression .)
    ,               reduce using rule 142 (unary_expression -> postfix_expression .)
    ]               reduce using rule 142 (unary_expression -> postfix_expression .)
    PLUSPLUS        shift and go to state 158
    MINUSMINUS      shift and go to state 159


state 168

    (141) unary_expression -> - unary_expression .

    ;               reduce using rule 141 (unary_expression -> - unary_expression .)
    *               reduce using rule 141 (unary_expression -> - unary_expression .)
    /               reduce using rule 141 (unary_expression -> - unary_expression .)
    %               reduce using rule 141 (unary_expression -> - unary_expression .)
    +               reduce using rule 141 (unary_expression -> - unary_expression .)
    -               reduce using rule 141 (unary_expression -> - unary_expression .)
    >               reduce using rule 141 (unary_expression -> - unary_expression .)
    <               reduce using rule 141 (unary_expression -> - unary_expression .)
    GTEQ            reduce using rule 141 (unary_expression -> - unary_expression .)
    LTEQ            reduce using rule 141 (unary_expression -> - unary_expression .)
    EQ              reduce using rule 141 (unary_expression -> - unary_expression .)
    NEQ             reduce using rule 141 (unary_expression -> - unary_expression .)
    &               reduce using rule 141 (unary_expression -> - unary_expression .)
    |               reduce using rule 141 (unary_expression -> - unary_expression .)
    AND             reduce using rule 141 (unary_expression -> - unary_expression .)
    OR              reduce using rule 141 (unary_expression -> - unary_expression .)
    )               reduce using rule 141 (unary_expression -> - unary_expression .)
    ,               reduce using rule 141 (unary_expression -> - unary_expression .)
    ]               reduce using rule 141 (unary_expression -> - unary_expression .)


state 169

    (143) pre_increment_expression -> PLUSPLUS unary_expression .

    ;               reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    *               reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    /               reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    %               reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    +               reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    -               reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    >               reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    <               reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    GTEQ            reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    LTEQ            reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    NEQ             reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    &               reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    |               reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    )               reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    ,               reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)
    ]               reduce using rule 143 (pre_increment_expression -> PLUSPLUS unary_expression .)


state 170

    (144) pre_decrement_expression -> MINUSMINUS unary_expression .

    ;               reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    *               reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    /               reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    %               reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    +               reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    -               reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    >               reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    <               reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    GTEQ            reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    LTEQ            reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    NEQ             reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    &               reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    |               reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    )               reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    ,               reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)
    ]               reduce using rule 144 (pre_decrement_expression -> MINUSMINUS unary_expression .)


state 171

    (12) tmain -> tmain_header opening_bracket method_body closing_bracket .

    }               reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    PUBLIC          reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    PROTECTED       reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    PRIVATE         reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    STATIC          reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    ABSTRACT        reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    FINAL           reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    NATIVE          reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    BOOLEAN         reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    VOID            reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    BYTE            reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    SHORT           reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    INT             reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    LONG            reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    CHAR            reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    FLOAT           reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    DOUBLE          reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    STRING          reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    NAME            reduce using rule 12 (tmain -> tmain_header opening_bracket method_body closing_bracket .)


state 172

    (22) field_declartaion -> modifiers_opt type variable_declarators ; .

    }               reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    PUBLIC          reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    PROTECTED       reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    PRIVATE         reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    STATIC          reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    ABSTRACT        reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    FINAL           reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    NATIVE          reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    BOOLEAN         reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    VOID            reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    BYTE            reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    SHORT           reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    INT             reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    LONG            reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    CHAR            reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    FLOAT           reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    DOUBLE          reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    STRING          reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    NAME            reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)


state 173

    (71) variable_declarators -> variable_declarators , . variable_declarator
    (72) variable_declarator -> . variable_declarator_id
    (73) variable_declarator -> . variable_declarator_id = variable_initializer
    (34) variable_declarator_id -> . NAME

    NAME            shift and go to state 129

    variable_declarator            shift and go to state 209
    variable_declarator_id         shift and go to state 114

state 174

    (73) variable_declarator -> variable_declarator_id = . variable_initializer
    (74) variable_initializer -> . primary
    (151) primary -> . literal
    (152) primary -> . array_access
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    variable_initializer           shift and go to state 210
    primary                        shift and go to state 211
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    name                           shift and go to state 212
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 175

    (40) dims -> dims [ . ]

    ]               shift and go to state 213


state 176

    (39) dims -> [ ] .

    [               reduce using rule 39 (dims -> [ ] .)
    NAME            reduce using rule 39 (dims -> [ ] .)
    MAIN            reduce using rule 39 (dims -> [ ] .)


state 177

    (61) qualified_name -> name . simple_name .

    .               reduce using rule 61 (qualified_name -> name . simple_name .)
    [               reduce using rule 61 (qualified_name -> name . simple_name .)
    PLUSPLUS        reduce using rule 61 (qualified_name -> name . simple_name .)
    MINUSMINUS      reduce using rule 61 (qualified_name -> name . simple_name .)
    =               reduce using rule 61 (qualified_name -> name . simple_name .)
    TIMES_ASSIGN    reduce using rule 61 (qualified_name -> name . simple_name .)
    DIVIDE_ASSIGN   reduce using rule 61 (qualified_name -> name . simple_name .)
    REMAINDER_ASSIGN reduce using rule 61 (qualified_name -> name . simple_name .)
    PLUS_ASSIGN     reduce using rule 61 (qualified_name -> name . simple_name .)
    MINUS_ASSIGN    reduce using rule 61 (qualified_name -> name . simple_name .)
    ;               reduce using rule 61 (qualified_name -> name . simple_name .)
    *               reduce using rule 61 (qualified_name -> name . simple_name .)
    /               reduce using rule 61 (qualified_name -> name . simple_name .)
    %               reduce using rule 61 (qualified_name -> name . simple_name .)
    +               reduce using rule 61 (qualified_name -> name . simple_name .)
    -               reduce using rule 61 (qualified_name -> name . simple_name .)
    >               reduce using rule 61 (qualified_name -> name . simple_name .)
    <               reduce using rule 61 (qualified_name -> name . simple_name .)
    GTEQ            reduce using rule 61 (qualified_name -> name . simple_name .)
    LTEQ            reduce using rule 61 (qualified_name -> name . simple_name .)
    EQ              reduce using rule 61 (qualified_name -> name . simple_name .)
    NEQ             reduce using rule 61 (qualified_name -> name . simple_name .)
    &               reduce using rule 61 (qualified_name -> name . simple_name .)
    |               reduce using rule 61 (qualified_name -> name . simple_name .)
    AND             reduce using rule 61 (qualified_name -> name . simple_name .)
    OR              reduce using rule 61 (qualified_name -> name . simple_name .)
    )               reduce using rule 61 (qualified_name -> name . simple_name .)
    ,               reduce using rule 61 (qualified_name -> name . simple_name .)
    ]               reduce using rule 61 (qualified_name -> name . simple_name .)


state 178

    (26) method_header -> method_header_name ( formal_parameter_list_opt ) .

    ;               reduce using rule 26 (method_header -> method_header_name ( formal_parameter_list_opt ) .)
    {               reduce using rule 26 (method_header -> method_header_name ( formal_parameter_list_opt ) .)


state 179

    (32) formal_parameter_list -> formal_parameter_list , . formal_parameter
    (33) formal_parameter -> . type variable_declarator_id
    (35) type -> . primitive_type
    (36) type -> . array_type
    (41) primitive_type -> . BOOLEAN
    (42) primitive_type -> . VOID
    (43) primitive_type -> . BYTE
    (44) primitive_type -> . SHORT
    (45) primitive_type -> . INT
    (46) primitive_type -> . LONG
    (47) primitive_type -> . CHAR
    (48) primitive_type -> . FLOAT
    (49) primitive_type -> . DOUBLE
    (50) primitive_type -> . STRING
    (37) array_type -> . primitive_type dims
    (38) array_type -> . name dims
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    BOOLEAN         shift and go to state 46
    VOID            shift and go to state 47
    BYTE            shift and go to state 48
    SHORT           shift and go to state 49
    INT             shift and go to state 50
    LONG            shift and go to state 51
    CHAR            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    NAME            shift and go to state 43

    formal_parameter               shift and go to state 214
    type                           shift and go to state 123
    primitive_type                 shift and go to state 44
    array_type                     shift and go to state 45
    name                           shift and go to state 56
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 180

    (33) formal_parameter -> type variable_declarator_id .

    ,               reduce using rule 33 (formal_parameter -> type variable_declarator_id .)
    )               reduce using rule 33 (formal_parameter -> type variable_declarator_id .)


state 181

    (13) tmain_header -> tmain_name ( formal_parameter_list_opt ) .

    {               reduce using rule 13 (tmain_header -> tmain_name ( formal_parameter_list_opt ) .)


state 182

    (69) local_variable_declaration -> modifiers type variable_declarators .
    (71) variable_declarators -> variable_declarators . , variable_declarator

    ;               reduce using rule 69 (local_variable_declaration -> modifiers type variable_declarators .)
    ,               shift and go to state 173


state 183

    (99) if_then_statement -> IF ( expression . ) opening_bracket block_statements closing_bracket
    (100) if_then_else_statement -> IF ( expression . ) opening_bracket block_statements closing_bracket else

    )               shift and go to state 215


state 184

    (102) while_statement -> WHILE ( expression . ) opening_bracket block_statements closing_bracket

    )               shift and go to state 216


state 185

    (103) do_while_statement -> DO opening_bracket block_statements . closing_bracket WHILE ( expression ) ;
    (64) block_statements -> block_statements . block_statement
    (16) closing_bracket -> . }
    (65) block_statement -> . local_variable_declaration_statement
    (66) block_statement -> . statement
    (67) local_variable_declaration_statement -> . local_variable_declaration ;
    (75) statement -> . other_statement
    (76) statement -> . if_then_statement
    (77) statement -> . if_then_else_statement
    (78) statement -> . while_statement
    (79) statement -> . do_while_statement
    (68) local_variable_declaration -> . type variable_declarators
    (69) local_variable_declaration -> . modifiers type variable_declarators
    (80) other_statement -> . expression_statement
    (81) other_statement -> . break_statement
    (82) other_statement -> . return_statement
    (83) other_statement -> . continue_statement
    (84) other_statement -> . ;
    (99) if_then_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket
    (100) if_then_else_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket else
    (102) while_statement -> . WHILE ( expression ) opening_bracket block_statements closing_bracket
    (103) do_while_statement -> . DO opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (35) type -> . primitive_type
    (36) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (85) expression_statement -> . statement_expression ;
    (93) break_statement -> . BREAK ;
    (94) break_statement -> . BREAK NAME ;
    (95) return_statement -> . RETURN expression_opt ;
    (98) continue_statement -> . CONTINUE ;
    (41) primitive_type -> . BOOLEAN
    (42) primitive_type -> . VOID
    (43) primitive_type -> . BYTE
    (44) primitive_type -> . SHORT
    (45) primitive_type -> . INT
    (46) primitive_type -> . LONG
    (47) primitive_type -> . CHAR
    (48) primitive_type -> . FLOAT
    (49) primitive_type -> . DOUBLE
    (50) primitive_type -> . STRING
    (37) array_type -> . primitive_type dims
    (38) array_type -> . name dims
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE
    (86) statement_expression -> . assignment
    (87) statement_expression -> . unary_expression
    (88) statement_expression -> . method_invocation
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (89) method_invocation -> . NAME ( argument_list )
    (90) method_invocation -> . NAME ( )
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]

    }               shift and go to state 38
    ;               shift and go to state 67
    IF              shift and go to state 79
    WHILE           shift and go to state 80
    DO              shift and go to state 81
    BREAK           shift and go to state 83
    RETURN          shift and go to state 85
    CONTINUE        shift and go to state 86
    BOOLEAN         shift and go to state 46
    VOID            shift and go to state 47
    BYTE            shift and go to state 48
    SHORT           shift and go to state 49
    INT             shift and go to state 50
    LONG            shift and go to state 51
    CHAR            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    +               shift and go to state 94
    -               shift and go to state 95
    NAME            shift and go to state 84
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108

    closing_bracket                shift and go to state 217
    block_statement                shift and go to state 126
    local_variable_declaration_statement shift and go to state 64
    statement                      shift and go to state 65
    local_variable_declaration     shift and go to state 66
    other_statement                shift and go to state 68
    if_then_statement              shift and go to state 69
    if_then_else_statement         shift and go to state 70
    while_statement                shift and go to state 71
    do_while_statement             shift and go to state 72
    type                           shift and go to state 73
    modifiers                      shift and go to state 74
    expression_statement           shift and go to state 75
    break_statement                shift and go to state 76
    return_statement               shift and go to state 77
    continue_statement             shift and go to state 78
    primitive_type                 shift and go to state 44
    array_type                     shift and go to state 45
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 82
    name                           shift and go to state 87
    assignment                     shift and go to state 88
    unary_expression               shift and go to state 89
    method_invocation              shift and go to state 90
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    postfix_expression             shift and go to state 91
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    primary                        shift and go to state 96
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102

state 186

    (94) break_statement -> BREAK NAME ; .

    ;               reduce using rule 94 (break_statement -> BREAK NAME ; .)
    IF              reduce using rule 94 (break_statement -> BREAK NAME ; .)
    WHILE           reduce using rule 94 (break_statement -> BREAK NAME ; .)
    DO              reduce using rule 94 (break_statement -> BREAK NAME ; .)
    BREAK           reduce using rule 94 (break_statement -> BREAK NAME ; .)
    RETURN          reduce using rule 94 (break_statement -> BREAK NAME ; .)
    CONTINUE        reduce using rule 94 (break_statement -> BREAK NAME ; .)
    BOOLEAN         reduce using rule 94 (break_statement -> BREAK NAME ; .)
    VOID            reduce using rule 94 (break_statement -> BREAK NAME ; .)
    BYTE            reduce using rule 94 (break_statement -> BREAK NAME ; .)
    SHORT           reduce using rule 94 (break_statement -> BREAK NAME ; .)
    INT             reduce using rule 94 (break_statement -> BREAK NAME ; .)
    LONG            reduce using rule 94 (break_statement -> BREAK NAME ; .)
    CHAR            reduce using rule 94 (break_statement -> BREAK NAME ; .)
    FLOAT           reduce using rule 94 (break_statement -> BREAK NAME ; .)
    DOUBLE          reduce using rule 94 (break_statement -> BREAK NAME ; .)
    STRING          reduce using rule 94 (break_statement -> BREAK NAME ; .)
    PUBLIC          reduce using rule 94 (break_statement -> BREAK NAME ; .)
    PROTECTED       reduce using rule 94 (break_statement -> BREAK NAME ; .)
    PRIVATE         reduce using rule 94 (break_statement -> BREAK NAME ; .)
    STATIC          reduce using rule 94 (break_statement -> BREAK NAME ; .)
    ABSTRACT        reduce using rule 94 (break_statement -> BREAK NAME ; .)
    FINAL           reduce using rule 94 (break_statement -> BREAK NAME ; .)
    NATIVE          reduce using rule 94 (break_statement -> BREAK NAME ; .)
    +               reduce using rule 94 (break_statement -> BREAK NAME ; .)
    -               reduce using rule 94 (break_statement -> BREAK NAME ; .)
    NAME            reduce using rule 94 (break_statement -> BREAK NAME ; .)
    PLUSPLUS        reduce using rule 94 (break_statement -> BREAK NAME ; .)
    MINUSMINUS      reduce using rule 94 (break_statement -> BREAK NAME ; .)
    NUM             reduce using rule 94 (break_statement -> BREAK NAME ; .)
    CHAR_LITERAL    reduce using rule 94 (break_statement -> BREAK NAME ; .)
    STRING_LITERAL  reduce using rule 94 (break_statement -> BREAK NAME ; .)
    TRUE            reduce using rule 94 (break_statement -> BREAK NAME ; .)
    FALSE           reduce using rule 94 (break_statement -> BREAK NAME ; .)
    NULL            reduce using rule 94 (break_statement -> BREAK NAME ; .)
    }               reduce using rule 94 (break_statement -> BREAK NAME ; .)


state 187

    (89) method_invocation -> NAME ( argument_list . )
    (92) argument_list -> argument_list . , expression

    )               shift and go to state 218
    ,               shift and go to state 219


state 188

    (90) method_invocation -> NAME ( ) .

    ;               reduce using rule 90 (method_invocation -> NAME ( ) .)


state 189

    (91) argument_list -> expression .

    )               reduce using rule 91 (argument_list -> expression .)
    ,               reduce using rule 91 (argument_list -> expression .)


state 190

    (95) return_statement -> RETURN expression_opt ; .

    ;               reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    IF              reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    WHILE           reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    DO              reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    BREAK           reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    RETURN          reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    CONTINUE        reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    BOOLEAN         reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    VOID            reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    BYTE            reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    SHORT           reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    INT             reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    LONG            reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    CHAR            reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    FLOAT           reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    DOUBLE          reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    STRING          reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    PUBLIC          reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    PROTECTED       reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    PRIVATE         reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    STATIC          reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    ABSTRACT        reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    FINAL           reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    NATIVE          reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    +               reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    -               reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    NAME            reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    PLUSPLUS        reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    MINUSMINUS      reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    NUM             reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    CHAR_LITERAL    reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    STRING_LITERAL  reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    TRUE            reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    FALSE           reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    NULL            reduce using rule 95 (return_statement -> RETURN expression_opt ; .)
    }               reduce using rule 95 (return_statement -> RETURN expression_opt ; .)


state 191

    (116) conditional_or_expression -> conditional_or_expression OR . conditional_and_expression
    (117) conditional_and_expression -> . inclusive_or_expression
    (118) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (119) inclusive_or_expression -> . and_expression
    (120) inclusive_or_expression -> . inclusive_or_expression | and_expression
    (121) and_expression -> . equality_expression
    (122) and_expression -> . and_expression & equality_expression
    (123) equality_expression -> . equality_expression EQ relational_expression
    (124) equality_expression -> . equality_expression NEQ relational_expression
    (125) equality_expression -> . relational_expression
    (126) relational_expression -> . additive_expression
    (127) relational_expression -> . relational_expression > additive_expression
    (128) relational_expression -> . relational_expression < additive_expression
    (129) relational_expression -> . relational_expression GTEQ additive_expression
    (130) relational_expression -> . relational_expression LTEQ additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    conditional_and_expression     shift and go to state 220
    inclusive_or_expression        shift and go to state 148
    and_expression                 shift and go to state 149
    equality_expression            shift and go to state 150
    relational_expression          shift and go to state 151
    additive_expression            shift and go to state 152
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 192

    (153) array_access -> name [ . expression ]
    (104) expression -> . assignment_expression
    (105) assignment_expression -> . assignment
    (106) assignment_expression -> . conditional_expression
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (114) conditional_expression -> . conditional_or_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (115) conditional_or_expression -> . conditional_and_expression
    (116) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (117) conditional_and_expression -> . inclusive_or_expression
    (118) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (119) inclusive_or_expression -> . and_expression
    (120) inclusive_or_expression -> . inclusive_or_expression | and_expression
    (121) and_expression -> . equality_expression
    (122) and_expression -> . and_expression & equality_expression
    (123) equality_expression -> . equality_expression EQ relational_expression
    (124) equality_expression -> . equality_expression NEQ relational_expression
    (125) equality_expression -> . relational_expression
    (126) relational_expression -> . additive_expression
    (127) relational_expression -> . relational_expression > additive_expression
    (128) relational_expression -> . relational_expression < additive_expression
    (129) relational_expression -> . relational_expression GTEQ additive_expression
    (130) relational_expression -> . relational_expression LTEQ additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression

    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43
    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100

    name                           shift and go to state 146
    expression                     shift and go to state 207
    assignment_expression          shift and go to state 141
    assignment                     shift and go to state 142
    conditional_expression         shift and go to state 143
    postfix_expression             shift and go to state 144
    conditional_or_expression      shift and go to state 145
    primary                        shift and go to state 96
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    conditional_and_expression     shift and go to state 147
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    inclusive_or_expression        shift and go to state 148
    and_expression                 shift and go to state 149
    equality_expression            shift and go to state 150
    relational_expression          shift and go to state 151
    additive_expression            shift and go to state 152
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93

state 193

    (118) conditional_and_expression -> conditional_and_expression AND . inclusive_or_expression
    (119) inclusive_or_expression -> . and_expression
    (120) inclusive_or_expression -> . inclusive_or_expression | and_expression
    (121) and_expression -> . equality_expression
    (122) and_expression -> . and_expression & equality_expression
    (123) equality_expression -> . equality_expression EQ relational_expression
    (124) equality_expression -> . equality_expression NEQ relational_expression
    (125) equality_expression -> . relational_expression
    (126) relational_expression -> . additive_expression
    (127) relational_expression -> . relational_expression > additive_expression
    (128) relational_expression -> . relational_expression < additive_expression
    (129) relational_expression -> . relational_expression GTEQ additive_expression
    (130) relational_expression -> . relational_expression LTEQ additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    inclusive_or_expression        shift and go to state 221
    and_expression                 shift and go to state 149
    equality_expression            shift and go to state 150
    relational_expression          shift and go to state 151
    additive_expression            shift and go to state 152
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 194

    (120) inclusive_or_expression -> inclusive_or_expression | . and_expression
    (121) and_expression -> . equality_expression
    (122) and_expression -> . and_expression & equality_expression
    (123) equality_expression -> . equality_expression EQ relational_expression
    (124) equality_expression -> . equality_expression NEQ relational_expression
    (125) equality_expression -> . relational_expression
    (126) relational_expression -> . additive_expression
    (127) relational_expression -> . relational_expression > additive_expression
    (128) relational_expression -> . relational_expression < additive_expression
    (129) relational_expression -> . relational_expression GTEQ additive_expression
    (130) relational_expression -> . relational_expression LTEQ additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    and_expression                 shift and go to state 222
    equality_expression            shift and go to state 150
    relational_expression          shift and go to state 151
    additive_expression            shift and go to state 152
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 195

    (122) and_expression -> and_expression & . equality_expression
    (123) equality_expression -> . equality_expression EQ relational_expression
    (124) equality_expression -> . equality_expression NEQ relational_expression
    (125) equality_expression -> . relational_expression
    (126) relational_expression -> . additive_expression
    (127) relational_expression -> . relational_expression > additive_expression
    (128) relational_expression -> . relational_expression < additive_expression
    (129) relational_expression -> . relational_expression GTEQ additive_expression
    (130) relational_expression -> . relational_expression LTEQ additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    equality_expression            shift and go to state 223
    relational_expression          shift and go to state 151
    additive_expression            shift and go to state 152
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 196

    (123) equality_expression -> equality_expression EQ . relational_expression
    (126) relational_expression -> . additive_expression
    (127) relational_expression -> . relational_expression > additive_expression
    (128) relational_expression -> . relational_expression < additive_expression
    (129) relational_expression -> . relational_expression GTEQ additive_expression
    (130) relational_expression -> . relational_expression LTEQ additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    relational_expression          shift and go to state 224
    additive_expression            shift and go to state 152
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 197

    (124) equality_expression -> equality_expression NEQ . relational_expression
    (126) relational_expression -> . additive_expression
    (127) relational_expression -> . relational_expression > additive_expression
    (128) relational_expression -> . relational_expression < additive_expression
    (129) relational_expression -> . relational_expression GTEQ additive_expression
    (130) relational_expression -> . relational_expression LTEQ additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    relational_expression          shift and go to state 225
    additive_expression            shift and go to state 152
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 198

    (127) relational_expression -> relational_expression > . additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    additive_expression            shift and go to state 226
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 199

    (128) relational_expression -> relational_expression < . additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    additive_expression            shift and go to state 227
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 200

    (129) relational_expression -> relational_expression GTEQ . additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    additive_expression            shift and go to state 228
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 201

    (130) relational_expression -> relational_expression LTEQ . additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    additive_expression            shift and go to state 229
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 202

    (132) additive_expression -> additive_expression + . multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    multiplicative_expression      shift and go to state 230
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 203

    (133) additive_expression -> additive_expression - . multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    multiplicative_expression      shift and go to state 231
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 204

    (135) multiplicative_expression -> multiplicative_expression * . unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    unary_expression               shift and go to state 232
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 205

    (136) multiplicative_expression -> multiplicative_expression / . unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    unary_expression               shift and go to state 233
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 206

    (137) multiplicative_expression -> multiplicative_expression % . unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name

    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43

    unary_expression               shift and go to state 234
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    postfix_expression             shift and go to state 167
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58

state 207

    (153) array_access -> name [ expression . ]

    ]               shift and go to state 235


state 208

    (107) assignment -> postfix_expression assignment_operator assignment_expression .

    ;               reduce using rule 107 (assignment -> postfix_expression assignment_operator assignment_expression .)
    )               reduce using rule 107 (assignment -> postfix_expression assignment_operator assignment_expression .)
    ,               reduce using rule 107 (assignment -> postfix_expression assignment_operator assignment_expression .)
    ]               reduce using rule 107 (assignment -> postfix_expression assignment_operator assignment_expression .)


state 209

    (71) variable_declarators -> variable_declarators , variable_declarator .

    ;               reduce using rule 71 (variable_declarators -> variable_declarators , variable_declarator .)
    ,               reduce using rule 71 (variable_declarators -> variable_declarators , variable_declarator .)


state 210

    (73) variable_declarator -> variable_declarator_id = variable_initializer .

    ;               reduce using rule 73 (variable_declarator -> variable_declarator_id = variable_initializer .)
    ,               reduce using rule 73 (variable_declarator -> variable_declarator_id = variable_initializer .)


state 211

    (74) variable_initializer -> primary .

    ;               reduce using rule 74 (variable_initializer -> primary .)
    ,               reduce using rule 74 (variable_initializer -> primary .)


state 212

    (153) array_access -> name . [ expression ]
    (61) qualified_name -> name . . simple_name

    [               shift and go to state 192
    .               shift and go to state 118


state 213

    (40) dims -> dims [ ] .

    [               reduce using rule 40 (dims -> dims [ ] .)
    NAME            reduce using rule 40 (dims -> dims [ ] .)
    MAIN            reduce using rule 40 (dims -> dims [ ] .)


state 214

    (32) formal_parameter_list -> formal_parameter_list , formal_parameter .

    ,               reduce using rule 32 (formal_parameter_list -> formal_parameter_list , formal_parameter .)
    )               reduce using rule 32 (formal_parameter_list -> formal_parameter_list , formal_parameter .)


state 215

    (99) if_then_statement -> IF ( expression ) . opening_bracket block_statements closing_bracket
    (100) if_then_else_statement -> IF ( expression ) . opening_bracket block_statements closing_bracket else
    (15) opening_bracket -> . {

    {               shift and go to state 20

    opening_bracket                shift and go to state 236

state 216

    (102) while_statement -> WHILE ( expression ) . opening_bracket block_statements closing_bracket
    (15) opening_bracket -> . {

    {               shift and go to state 20

    opening_bracket                shift and go to state 237

state 217

    (103) do_while_statement -> DO opening_bracket block_statements closing_bracket . WHILE ( expression ) ;

    WHILE           shift and go to state 238


state 218

    (89) method_invocation -> NAME ( argument_list ) .

    ;               reduce using rule 89 (method_invocation -> NAME ( argument_list ) .)


state 219

    (92) argument_list -> argument_list , . expression
    (104) expression -> . assignment_expression
    (105) assignment_expression -> . assignment
    (106) assignment_expression -> . conditional_expression
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (114) conditional_expression -> . conditional_or_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (115) conditional_or_expression -> . conditional_and_expression
    (116) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (117) conditional_and_expression -> . inclusive_or_expression
    (118) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (119) inclusive_or_expression -> . and_expression
    (120) inclusive_or_expression -> . inclusive_or_expression | and_expression
    (121) and_expression -> . equality_expression
    (122) and_expression -> . and_expression & equality_expression
    (123) equality_expression -> . equality_expression EQ relational_expression
    (124) equality_expression -> . equality_expression NEQ relational_expression
    (125) equality_expression -> . relational_expression
    (126) relational_expression -> . additive_expression
    (127) relational_expression -> . relational_expression > additive_expression
    (128) relational_expression -> . relational_expression < additive_expression
    (129) relational_expression -> . relational_expression GTEQ additive_expression
    (130) relational_expression -> . relational_expression LTEQ additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression

    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43
    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100

    expression                     shift and go to state 239
    assignment_expression          shift and go to state 141
    assignment                     shift and go to state 142
    conditional_expression         shift and go to state 143
    postfix_expression             shift and go to state 144
    conditional_or_expression      shift and go to state 145
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    conditional_and_expression     shift and go to state 147
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    inclusive_or_expression        shift and go to state 148
    and_expression                 shift and go to state 149
    equality_expression            shift and go to state 150
    relational_expression          shift and go to state 151
    additive_expression            shift and go to state 152
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93

state 220

    (116) conditional_or_expression -> conditional_or_expression OR conditional_and_expression .
    (118) conditional_and_expression -> conditional_and_expression . AND inclusive_or_expression

    OR              reduce using rule 116 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    ;               reduce using rule 116 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    )               reduce using rule 116 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    ,               reduce using rule 116 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    ]               reduce using rule 116 (conditional_or_expression -> conditional_or_expression OR conditional_and_expression .)
    AND             shift and go to state 193


state 221

    (118) conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .
    (120) inclusive_or_expression -> inclusive_or_expression . | and_expression

    AND             reduce using rule 118 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    OR              reduce using rule 118 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    ;               reduce using rule 118 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    )               reduce using rule 118 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    ,               reduce using rule 118 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    ]               reduce using rule 118 (conditional_and_expression -> conditional_and_expression AND inclusive_or_expression .)
    |               shift and go to state 194


state 222

    (120) inclusive_or_expression -> inclusive_or_expression | and_expression .
    (122) and_expression -> and_expression . & equality_expression

    |               reduce using rule 120 (inclusive_or_expression -> inclusive_or_expression | and_expression .)
    AND             reduce using rule 120 (inclusive_or_expression -> inclusive_or_expression | and_expression .)
    OR              reduce using rule 120 (inclusive_or_expression -> inclusive_or_expression | and_expression .)
    ;               reduce using rule 120 (inclusive_or_expression -> inclusive_or_expression | and_expression .)
    )               reduce using rule 120 (inclusive_or_expression -> inclusive_or_expression | and_expression .)
    ,               reduce using rule 120 (inclusive_or_expression -> inclusive_or_expression | and_expression .)
    ]               reduce using rule 120 (inclusive_or_expression -> inclusive_or_expression | and_expression .)
    &               shift and go to state 195


state 223

    (122) and_expression -> and_expression & equality_expression .
    (123) equality_expression -> equality_expression . EQ relational_expression
    (124) equality_expression -> equality_expression . NEQ relational_expression

    &               reduce using rule 122 (and_expression -> and_expression & equality_expression .)
    |               reduce using rule 122 (and_expression -> and_expression & equality_expression .)
    AND             reduce using rule 122 (and_expression -> and_expression & equality_expression .)
    OR              reduce using rule 122 (and_expression -> and_expression & equality_expression .)
    ;               reduce using rule 122 (and_expression -> and_expression & equality_expression .)
    )               reduce using rule 122 (and_expression -> and_expression & equality_expression .)
    ,               reduce using rule 122 (and_expression -> and_expression & equality_expression .)
    ]               reduce using rule 122 (and_expression -> and_expression & equality_expression .)
    EQ              shift and go to state 196
    NEQ             shift and go to state 197


state 224

    (123) equality_expression -> equality_expression EQ relational_expression .
    (127) relational_expression -> relational_expression . > additive_expression
    (128) relational_expression -> relational_expression . < additive_expression
    (129) relational_expression -> relational_expression . GTEQ additive_expression
    (130) relational_expression -> relational_expression . LTEQ additive_expression

    EQ              reduce using rule 123 (equality_expression -> equality_expression EQ relational_expression .)
    NEQ             reduce using rule 123 (equality_expression -> equality_expression EQ relational_expression .)
    &               reduce using rule 123 (equality_expression -> equality_expression EQ relational_expression .)
    |               reduce using rule 123 (equality_expression -> equality_expression EQ relational_expression .)
    AND             reduce using rule 123 (equality_expression -> equality_expression EQ relational_expression .)
    OR              reduce using rule 123 (equality_expression -> equality_expression EQ relational_expression .)
    ;               reduce using rule 123 (equality_expression -> equality_expression EQ relational_expression .)
    )               reduce using rule 123 (equality_expression -> equality_expression EQ relational_expression .)
    ,               reduce using rule 123 (equality_expression -> equality_expression EQ relational_expression .)
    ]               reduce using rule 123 (equality_expression -> equality_expression EQ relational_expression .)
    >               shift and go to state 198
    <               shift and go to state 199
    GTEQ            shift and go to state 200
    LTEQ            shift and go to state 201


state 225

    (124) equality_expression -> equality_expression NEQ relational_expression .
    (127) relational_expression -> relational_expression . > additive_expression
    (128) relational_expression -> relational_expression . < additive_expression
    (129) relational_expression -> relational_expression . GTEQ additive_expression
    (130) relational_expression -> relational_expression . LTEQ additive_expression

    EQ              reduce using rule 124 (equality_expression -> equality_expression NEQ relational_expression .)
    NEQ             reduce using rule 124 (equality_expression -> equality_expression NEQ relational_expression .)
    &               reduce using rule 124 (equality_expression -> equality_expression NEQ relational_expression .)
    |               reduce using rule 124 (equality_expression -> equality_expression NEQ relational_expression .)
    AND             reduce using rule 124 (equality_expression -> equality_expression NEQ relational_expression .)
    OR              reduce using rule 124 (equality_expression -> equality_expression NEQ relational_expression .)
    ;               reduce using rule 124 (equality_expression -> equality_expression NEQ relational_expression .)
    )               reduce using rule 124 (equality_expression -> equality_expression NEQ relational_expression .)
    ,               reduce using rule 124 (equality_expression -> equality_expression NEQ relational_expression .)
    ]               reduce using rule 124 (equality_expression -> equality_expression NEQ relational_expression .)
    >               shift and go to state 198
    <               shift and go to state 199
    GTEQ            shift and go to state 200
    LTEQ            shift and go to state 201


state 226

    (127) relational_expression -> relational_expression > additive_expression .
    (132) additive_expression -> additive_expression . + multiplicative_expression
    (133) additive_expression -> additive_expression . - multiplicative_expression

    >               reduce using rule 127 (relational_expression -> relational_expression > additive_expression .)
    <               reduce using rule 127 (relational_expression -> relational_expression > additive_expression .)
    GTEQ            reduce using rule 127 (relational_expression -> relational_expression > additive_expression .)
    LTEQ            reduce using rule 127 (relational_expression -> relational_expression > additive_expression .)
    EQ              reduce using rule 127 (relational_expression -> relational_expression > additive_expression .)
    NEQ             reduce using rule 127 (relational_expression -> relational_expression > additive_expression .)
    &               reduce using rule 127 (relational_expression -> relational_expression > additive_expression .)
    |               reduce using rule 127 (relational_expression -> relational_expression > additive_expression .)
    AND             reduce using rule 127 (relational_expression -> relational_expression > additive_expression .)
    OR              reduce using rule 127 (relational_expression -> relational_expression > additive_expression .)
    ;               reduce using rule 127 (relational_expression -> relational_expression > additive_expression .)
    )               reduce using rule 127 (relational_expression -> relational_expression > additive_expression .)
    ,               reduce using rule 127 (relational_expression -> relational_expression > additive_expression .)
    ]               reduce using rule 127 (relational_expression -> relational_expression > additive_expression .)
    +               shift and go to state 202
    -               shift and go to state 203


state 227

    (128) relational_expression -> relational_expression < additive_expression .
    (132) additive_expression -> additive_expression . + multiplicative_expression
    (133) additive_expression -> additive_expression . - multiplicative_expression

    >               reduce using rule 128 (relational_expression -> relational_expression < additive_expression .)
    <               reduce using rule 128 (relational_expression -> relational_expression < additive_expression .)
    GTEQ            reduce using rule 128 (relational_expression -> relational_expression < additive_expression .)
    LTEQ            reduce using rule 128 (relational_expression -> relational_expression < additive_expression .)
    EQ              reduce using rule 128 (relational_expression -> relational_expression < additive_expression .)
    NEQ             reduce using rule 128 (relational_expression -> relational_expression < additive_expression .)
    &               reduce using rule 128 (relational_expression -> relational_expression < additive_expression .)
    |               reduce using rule 128 (relational_expression -> relational_expression < additive_expression .)
    AND             reduce using rule 128 (relational_expression -> relational_expression < additive_expression .)
    OR              reduce using rule 128 (relational_expression -> relational_expression < additive_expression .)
    ;               reduce using rule 128 (relational_expression -> relational_expression < additive_expression .)
    )               reduce using rule 128 (relational_expression -> relational_expression < additive_expression .)
    ,               reduce using rule 128 (relational_expression -> relational_expression < additive_expression .)
    ]               reduce using rule 128 (relational_expression -> relational_expression < additive_expression .)
    +               shift and go to state 202
    -               shift and go to state 203


state 228

    (129) relational_expression -> relational_expression GTEQ additive_expression .
    (132) additive_expression -> additive_expression . + multiplicative_expression
    (133) additive_expression -> additive_expression . - multiplicative_expression

    >               reduce using rule 129 (relational_expression -> relational_expression GTEQ additive_expression .)
    <               reduce using rule 129 (relational_expression -> relational_expression GTEQ additive_expression .)
    GTEQ            reduce using rule 129 (relational_expression -> relational_expression GTEQ additive_expression .)
    LTEQ            reduce using rule 129 (relational_expression -> relational_expression GTEQ additive_expression .)
    EQ              reduce using rule 129 (relational_expression -> relational_expression GTEQ additive_expression .)
    NEQ             reduce using rule 129 (relational_expression -> relational_expression GTEQ additive_expression .)
    &               reduce using rule 129 (relational_expression -> relational_expression GTEQ additive_expression .)
    |               reduce using rule 129 (relational_expression -> relational_expression GTEQ additive_expression .)
    AND             reduce using rule 129 (relational_expression -> relational_expression GTEQ additive_expression .)
    OR              reduce using rule 129 (relational_expression -> relational_expression GTEQ additive_expression .)
    ;               reduce using rule 129 (relational_expression -> relational_expression GTEQ additive_expression .)
    )               reduce using rule 129 (relational_expression -> relational_expression GTEQ additive_expression .)
    ,               reduce using rule 129 (relational_expression -> relational_expression GTEQ additive_expression .)
    ]               reduce using rule 129 (relational_expression -> relational_expression GTEQ additive_expression .)
    +               shift and go to state 202
    -               shift and go to state 203


state 229

    (130) relational_expression -> relational_expression LTEQ additive_expression .
    (132) additive_expression -> additive_expression . + multiplicative_expression
    (133) additive_expression -> additive_expression . - multiplicative_expression

    >               reduce using rule 130 (relational_expression -> relational_expression LTEQ additive_expression .)
    <               reduce using rule 130 (relational_expression -> relational_expression LTEQ additive_expression .)
    GTEQ            reduce using rule 130 (relational_expression -> relational_expression LTEQ additive_expression .)
    LTEQ            reduce using rule 130 (relational_expression -> relational_expression LTEQ additive_expression .)
    EQ              reduce using rule 130 (relational_expression -> relational_expression LTEQ additive_expression .)
    NEQ             reduce using rule 130 (relational_expression -> relational_expression LTEQ additive_expression .)
    &               reduce using rule 130 (relational_expression -> relational_expression LTEQ additive_expression .)
    |               reduce using rule 130 (relational_expression -> relational_expression LTEQ additive_expression .)
    AND             reduce using rule 130 (relational_expression -> relational_expression LTEQ additive_expression .)
    OR              reduce using rule 130 (relational_expression -> relational_expression LTEQ additive_expression .)
    ;               reduce using rule 130 (relational_expression -> relational_expression LTEQ additive_expression .)
    )               reduce using rule 130 (relational_expression -> relational_expression LTEQ additive_expression .)
    ,               reduce using rule 130 (relational_expression -> relational_expression LTEQ additive_expression .)
    ]               reduce using rule 130 (relational_expression -> relational_expression LTEQ additive_expression .)
    +               shift and go to state 202
    -               shift and go to state 203


state 230

    (132) additive_expression -> additive_expression + multiplicative_expression .
    (135) multiplicative_expression -> multiplicative_expression . * unary_expression
    (136) multiplicative_expression -> multiplicative_expression . / unary_expression
    (137) multiplicative_expression -> multiplicative_expression . % unary_expression

    +               reduce using rule 132 (additive_expression -> additive_expression + multiplicative_expression .)
    -               reduce using rule 132 (additive_expression -> additive_expression + multiplicative_expression .)
    >               reduce using rule 132 (additive_expression -> additive_expression + multiplicative_expression .)
    <               reduce using rule 132 (additive_expression -> additive_expression + multiplicative_expression .)
    GTEQ            reduce using rule 132 (additive_expression -> additive_expression + multiplicative_expression .)
    LTEQ            reduce using rule 132 (additive_expression -> additive_expression + multiplicative_expression .)
    EQ              reduce using rule 132 (additive_expression -> additive_expression + multiplicative_expression .)
    NEQ             reduce using rule 132 (additive_expression -> additive_expression + multiplicative_expression .)
    &               reduce using rule 132 (additive_expression -> additive_expression + multiplicative_expression .)
    |               reduce using rule 132 (additive_expression -> additive_expression + multiplicative_expression .)
    AND             reduce using rule 132 (additive_expression -> additive_expression + multiplicative_expression .)
    OR              reduce using rule 132 (additive_expression -> additive_expression + multiplicative_expression .)
    ;               reduce using rule 132 (additive_expression -> additive_expression + multiplicative_expression .)
    )               reduce using rule 132 (additive_expression -> additive_expression + multiplicative_expression .)
    ,               reduce using rule 132 (additive_expression -> additive_expression + multiplicative_expression .)
    ]               reduce using rule 132 (additive_expression -> additive_expression + multiplicative_expression .)
    *               shift and go to state 204
    /               shift and go to state 205
    %               shift and go to state 206


state 231

    (133) additive_expression -> additive_expression - multiplicative_expression .
    (135) multiplicative_expression -> multiplicative_expression . * unary_expression
    (136) multiplicative_expression -> multiplicative_expression . / unary_expression
    (137) multiplicative_expression -> multiplicative_expression . % unary_expression

    +               reduce using rule 133 (additive_expression -> additive_expression - multiplicative_expression .)
    -               reduce using rule 133 (additive_expression -> additive_expression - multiplicative_expression .)
    >               reduce using rule 133 (additive_expression -> additive_expression - multiplicative_expression .)
    <               reduce using rule 133 (additive_expression -> additive_expression - multiplicative_expression .)
    GTEQ            reduce using rule 133 (additive_expression -> additive_expression - multiplicative_expression .)
    LTEQ            reduce using rule 133 (additive_expression -> additive_expression - multiplicative_expression .)
    EQ              reduce using rule 133 (additive_expression -> additive_expression - multiplicative_expression .)
    NEQ             reduce using rule 133 (additive_expression -> additive_expression - multiplicative_expression .)
    &               reduce using rule 133 (additive_expression -> additive_expression - multiplicative_expression .)
    |               reduce using rule 133 (additive_expression -> additive_expression - multiplicative_expression .)
    AND             reduce using rule 133 (additive_expression -> additive_expression - multiplicative_expression .)
    OR              reduce using rule 133 (additive_expression -> additive_expression - multiplicative_expression .)
    ;               reduce using rule 133 (additive_expression -> additive_expression - multiplicative_expression .)
    )               reduce using rule 133 (additive_expression -> additive_expression - multiplicative_expression .)
    ,               reduce using rule 133 (additive_expression -> additive_expression - multiplicative_expression .)
    ]               reduce using rule 133 (additive_expression -> additive_expression - multiplicative_expression .)
    *               shift and go to state 204
    /               shift and go to state 205
    %               shift and go to state 206


state 232

    (135) multiplicative_expression -> multiplicative_expression * unary_expression .

    *               reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    /               reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    %               reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    +               reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    -               reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    >               reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    <               reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    GTEQ            reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    LTEQ            reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    EQ              reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    NEQ             reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    &               reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    |               reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    AND             reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    OR              reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ;               reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    )               reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ,               reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)
    ]               reduce using rule 135 (multiplicative_expression -> multiplicative_expression * unary_expression .)


state 233

    (136) multiplicative_expression -> multiplicative_expression / unary_expression .

    *               reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    /               reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    %               reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    +               reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    -               reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    >               reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    <               reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    GTEQ            reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    LTEQ            reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    EQ              reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    NEQ             reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    &               reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    |               reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    AND             reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    OR              reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ;               reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    )               reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ,               reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)
    ]               reduce using rule 136 (multiplicative_expression -> multiplicative_expression / unary_expression .)


state 234

    (137) multiplicative_expression -> multiplicative_expression % unary_expression .

    *               reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    /               reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    %               reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    +               reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    -               reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    >               reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    <               reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    GTEQ            reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    LTEQ            reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    EQ              reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    NEQ             reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    &               reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    |               reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    AND             reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    OR              reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    ;               reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    )               reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    ,               reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)
    ]               reduce using rule 137 (multiplicative_expression -> multiplicative_expression % unary_expression .)


state 235

    (153) array_access -> name [ expression ] .

    PLUSPLUS        reduce using rule 153 (array_access -> name [ expression ] .)
    MINUSMINUS      reduce using rule 153 (array_access -> name [ expression ] .)
    =               reduce using rule 153 (array_access -> name [ expression ] .)
    TIMES_ASSIGN    reduce using rule 153 (array_access -> name [ expression ] .)
    DIVIDE_ASSIGN   reduce using rule 153 (array_access -> name [ expression ] .)
    REMAINDER_ASSIGN reduce using rule 153 (array_access -> name [ expression ] .)
    PLUS_ASSIGN     reduce using rule 153 (array_access -> name [ expression ] .)
    MINUS_ASSIGN    reduce using rule 153 (array_access -> name [ expression ] .)
    ;               reduce using rule 153 (array_access -> name [ expression ] .)
    *               reduce using rule 153 (array_access -> name [ expression ] .)
    /               reduce using rule 153 (array_access -> name [ expression ] .)
    %               reduce using rule 153 (array_access -> name [ expression ] .)
    +               reduce using rule 153 (array_access -> name [ expression ] .)
    -               reduce using rule 153 (array_access -> name [ expression ] .)
    >               reduce using rule 153 (array_access -> name [ expression ] .)
    <               reduce using rule 153 (array_access -> name [ expression ] .)
    GTEQ            reduce using rule 153 (array_access -> name [ expression ] .)
    LTEQ            reduce using rule 153 (array_access -> name [ expression ] .)
    EQ              reduce using rule 153 (array_access -> name [ expression ] .)
    NEQ             reduce using rule 153 (array_access -> name [ expression ] .)
    &               reduce using rule 153 (array_access -> name [ expression ] .)
    |               reduce using rule 153 (array_access -> name [ expression ] .)
    AND             reduce using rule 153 (array_access -> name [ expression ] .)
    OR              reduce using rule 153 (array_access -> name [ expression ] .)
    )               reduce using rule 153 (array_access -> name [ expression ] .)
    ,               reduce using rule 153 (array_access -> name [ expression ] .)
    ]               reduce using rule 153 (array_access -> name [ expression ] .)


state 236

    (99) if_then_statement -> IF ( expression ) opening_bracket . block_statements closing_bracket
    (100) if_then_else_statement -> IF ( expression ) opening_bracket . block_statements closing_bracket else
    (63) block_statements -> . block_statement
    (64) block_statements -> . block_statements block_statement
    (65) block_statement -> . local_variable_declaration_statement
    (66) block_statement -> . statement
    (67) local_variable_declaration_statement -> . local_variable_declaration ;
    (75) statement -> . other_statement
    (76) statement -> . if_then_statement
    (77) statement -> . if_then_else_statement
    (78) statement -> . while_statement
    (79) statement -> . do_while_statement
    (68) local_variable_declaration -> . type variable_declarators
    (69) local_variable_declaration -> . modifiers type variable_declarators
    (80) other_statement -> . expression_statement
    (81) other_statement -> . break_statement
    (82) other_statement -> . return_statement
    (83) other_statement -> . continue_statement
    (84) other_statement -> . ;
    (99) if_then_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket
    (100) if_then_else_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket else
    (102) while_statement -> . WHILE ( expression ) opening_bracket block_statements closing_bracket
    (103) do_while_statement -> . DO opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (35) type -> . primitive_type
    (36) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (85) expression_statement -> . statement_expression ;
    (93) break_statement -> . BREAK ;
    (94) break_statement -> . BREAK NAME ;
    (95) return_statement -> . RETURN expression_opt ;
    (98) continue_statement -> . CONTINUE ;
    (41) primitive_type -> . BOOLEAN
    (42) primitive_type -> . VOID
    (43) primitive_type -> . BYTE
    (44) primitive_type -> . SHORT
    (45) primitive_type -> . INT
    (46) primitive_type -> . LONG
    (47) primitive_type -> . CHAR
    (48) primitive_type -> . FLOAT
    (49) primitive_type -> . DOUBLE
    (50) primitive_type -> . STRING
    (37) array_type -> . primitive_type dims
    (38) array_type -> . name dims
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE
    (86) statement_expression -> . assignment
    (87) statement_expression -> . unary_expression
    (88) statement_expression -> . method_invocation
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (89) method_invocation -> . NAME ( argument_list )
    (90) method_invocation -> . NAME ( )
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]

    ;               shift and go to state 67
    IF              shift and go to state 79
    WHILE           shift and go to state 80
    DO              shift and go to state 81
    BREAK           shift and go to state 83
    RETURN          shift and go to state 85
    CONTINUE        shift and go to state 86
    BOOLEAN         shift and go to state 46
    VOID            shift and go to state 47
    BYTE            shift and go to state 48
    SHORT           shift and go to state 49
    INT             shift and go to state 50
    LONG            shift and go to state 51
    CHAR            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    +               shift and go to state 94
    -               shift and go to state 95
    NAME            shift and go to state 84
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108

    block_statements               shift and go to state 240
    block_statement                shift and go to state 63
    local_variable_declaration_statement shift and go to state 64
    statement                      shift and go to state 65
    local_variable_declaration     shift and go to state 66
    other_statement                shift and go to state 68
    if_then_statement              shift and go to state 69
    if_then_else_statement         shift and go to state 70
    while_statement                shift and go to state 71
    do_while_statement             shift and go to state 72
    type                           shift and go to state 73
    modifiers                      shift and go to state 74
    expression_statement           shift and go to state 75
    break_statement                shift and go to state 76
    return_statement               shift and go to state 77
    continue_statement             shift and go to state 78
    primitive_type                 shift and go to state 44
    array_type                     shift and go to state 45
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 82
    name                           shift and go to state 87
    assignment                     shift and go to state 88
    unary_expression               shift and go to state 89
    method_invocation              shift and go to state 90
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    postfix_expression             shift and go to state 91
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    primary                        shift and go to state 96
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102

state 237

    (102) while_statement -> WHILE ( expression ) opening_bracket . block_statements closing_bracket
    (63) block_statements -> . block_statement
    (64) block_statements -> . block_statements block_statement
    (65) block_statement -> . local_variable_declaration_statement
    (66) block_statement -> . statement
    (67) local_variable_declaration_statement -> . local_variable_declaration ;
    (75) statement -> . other_statement
    (76) statement -> . if_then_statement
    (77) statement -> . if_then_else_statement
    (78) statement -> . while_statement
    (79) statement -> . do_while_statement
    (68) local_variable_declaration -> . type variable_declarators
    (69) local_variable_declaration -> . modifiers type variable_declarators
    (80) other_statement -> . expression_statement
    (81) other_statement -> . break_statement
    (82) other_statement -> . return_statement
    (83) other_statement -> . continue_statement
    (84) other_statement -> . ;
    (99) if_then_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket
    (100) if_then_else_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket else
    (102) while_statement -> . WHILE ( expression ) opening_bracket block_statements closing_bracket
    (103) do_while_statement -> . DO opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (35) type -> . primitive_type
    (36) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (85) expression_statement -> . statement_expression ;
    (93) break_statement -> . BREAK ;
    (94) break_statement -> . BREAK NAME ;
    (95) return_statement -> . RETURN expression_opt ;
    (98) continue_statement -> . CONTINUE ;
    (41) primitive_type -> . BOOLEAN
    (42) primitive_type -> . VOID
    (43) primitive_type -> . BYTE
    (44) primitive_type -> . SHORT
    (45) primitive_type -> . INT
    (46) primitive_type -> . LONG
    (47) primitive_type -> . CHAR
    (48) primitive_type -> . FLOAT
    (49) primitive_type -> . DOUBLE
    (50) primitive_type -> . STRING
    (37) array_type -> . primitive_type dims
    (38) array_type -> . name dims
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE
    (86) statement_expression -> . assignment
    (87) statement_expression -> . unary_expression
    (88) statement_expression -> . method_invocation
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (89) method_invocation -> . NAME ( argument_list )
    (90) method_invocation -> . NAME ( )
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]

    ;               shift and go to state 67
    IF              shift and go to state 79
    WHILE           shift and go to state 80
    DO              shift and go to state 81
    BREAK           shift and go to state 83
    RETURN          shift and go to state 85
    CONTINUE        shift and go to state 86
    BOOLEAN         shift and go to state 46
    VOID            shift and go to state 47
    BYTE            shift and go to state 48
    SHORT           shift and go to state 49
    INT             shift and go to state 50
    LONG            shift and go to state 51
    CHAR            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    +               shift and go to state 94
    -               shift and go to state 95
    NAME            shift and go to state 84
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108

    block_statements               shift and go to state 241
    block_statement                shift and go to state 63
    local_variable_declaration_statement shift and go to state 64
    statement                      shift and go to state 65
    local_variable_declaration     shift and go to state 66
    other_statement                shift and go to state 68
    if_then_statement              shift and go to state 69
    if_then_else_statement         shift and go to state 70
    while_statement                shift and go to state 71
    do_while_statement             shift and go to state 72
    type                           shift and go to state 73
    modifiers                      shift and go to state 74
    expression_statement           shift and go to state 75
    break_statement                shift and go to state 76
    return_statement               shift and go to state 77
    continue_statement             shift and go to state 78
    primitive_type                 shift and go to state 44
    array_type                     shift and go to state 45
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 82
    name                           shift and go to state 87
    assignment                     shift and go to state 88
    unary_expression               shift and go to state 89
    method_invocation              shift and go to state 90
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    postfix_expression             shift and go to state 91
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    primary                        shift and go to state 96
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102

state 238

    (103) do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE . ( expression ) ;

    (               shift and go to state 242


state 239

    (92) argument_list -> argument_list , expression .

    )               reduce using rule 92 (argument_list -> argument_list , expression .)
    ,               reduce using rule 92 (argument_list -> argument_list , expression .)


state 240

    (99) if_then_statement -> IF ( expression ) opening_bracket block_statements . closing_bracket
    (100) if_then_else_statement -> IF ( expression ) opening_bracket block_statements . closing_bracket else
    (64) block_statements -> block_statements . block_statement
    (16) closing_bracket -> . }
    (65) block_statement -> . local_variable_declaration_statement
    (66) block_statement -> . statement
    (67) local_variable_declaration_statement -> . local_variable_declaration ;
    (75) statement -> . other_statement
    (76) statement -> . if_then_statement
    (77) statement -> . if_then_else_statement
    (78) statement -> . while_statement
    (79) statement -> . do_while_statement
    (68) local_variable_declaration -> . type variable_declarators
    (69) local_variable_declaration -> . modifiers type variable_declarators
    (80) other_statement -> . expression_statement
    (81) other_statement -> . break_statement
    (82) other_statement -> . return_statement
    (83) other_statement -> . continue_statement
    (84) other_statement -> . ;
    (99) if_then_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket
    (100) if_then_else_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket else
    (102) while_statement -> . WHILE ( expression ) opening_bracket block_statements closing_bracket
    (103) do_while_statement -> . DO opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (35) type -> . primitive_type
    (36) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (85) expression_statement -> . statement_expression ;
    (93) break_statement -> . BREAK ;
    (94) break_statement -> . BREAK NAME ;
    (95) return_statement -> . RETURN expression_opt ;
    (98) continue_statement -> . CONTINUE ;
    (41) primitive_type -> . BOOLEAN
    (42) primitive_type -> . VOID
    (43) primitive_type -> . BYTE
    (44) primitive_type -> . SHORT
    (45) primitive_type -> . INT
    (46) primitive_type -> . LONG
    (47) primitive_type -> . CHAR
    (48) primitive_type -> . FLOAT
    (49) primitive_type -> . DOUBLE
    (50) primitive_type -> . STRING
    (37) array_type -> . primitive_type dims
    (38) array_type -> . name dims
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE
    (86) statement_expression -> . assignment
    (87) statement_expression -> . unary_expression
    (88) statement_expression -> . method_invocation
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (89) method_invocation -> . NAME ( argument_list )
    (90) method_invocation -> . NAME ( )
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]

    }               shift and go to state 38
    ;               shift and go to state 67
    IF              shift and go to state 79
    WHILE           shift and go to state 80
    DO              shift and go to state 81
    BREAK           shift and go to state 83
    RETURN          shift and go to state 85
    CONTINUE        shift and go to state 86
    BOOLEAN         shift and go to state 46
    VOID            shift and go to state 47
    BYTE            shift and go to state 48
    SHORT           shift and go to state 49
    INT             shift and go to state 50
    LONG            shift and go to state 51
    CHAR            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    +               shift and go to state 94
    -               shift and go to state 95
    NAME            shift and go to state 84
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108

    closing_bracket                shift and go to state 243
    block_statement                shift and go to state 126
    local_variable_declaration_statement shift and go to state 64
    statement                      shift and go to state 65
    local_variable_declaration     shift and go to state 66
    other_statement                shift and go to state 68
    if_then_statement              shift and go to state 69
    if_then_else_statement         shift and go to state 70
    while_statement                shift and go to state 71
    do_while_statement             shift and go to state 72
    type                           shift and go to state 73
    modifiers                      shift and go to state 74
    expression_statement           shift and go to state 75
    break_statement                shift and go to state 76
    return_statement               shift and go to state 77
    continue_statement             shift and go to state 78
    primitive_type                 shift and go to state 44
    array_type                     shift and go to state 45
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 82
    name                           shift and go to state 87
    assignment                     shift and go to state 88
    unary_expression               shift and go to state 89
    method_invocation              shift and go to state 90
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    postfix_expression             shift and go to state 91
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    primary                        shift and go to state 96
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102

state 241

    (102) while_statement -> WHILE ( expression ) opening_bracket block_statements . closing_bracket
    (64) block_statements -> block_statements . block_statement
    (16) closing_bracket -> . }
    (65) block_statement -> . local_variable_declaration_statement
    (66) block_statement -> . statement
    (67) local_variable_declaration_statement -> . local_variable_declaration ;
    (75) statement -> . other_statement
    (76) statement -> . if_then_statement
    (77) statement -> . if_then_else_statement
    (78) statement -> . while_statement
    (79) statement -> . do_while_statement
    (68) local_variable_declaration -> . type variable_declarators
    (69) local_variable_declaration -> . modifiers type variable_declarators
    (80) other_statement -> . expression_statement
    (81) other_statement -> . break_statement
    (82) other_statement -> . return_statement
    (83) other_statement -> . continue_statement
    (84) other_statement -> . ;
    (99) if_then_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket
    (100) if_then_else_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket else
    (102) while_statement -> . WHILE ( expression ) opening_bracket block_statements closing_bracket
    (103) do_while_statement -> . DO opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (35) type -> . primitive_type
    (36) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (85) expression_statement -> . statement_expression ;
    (93) break_statement -> . BREAK ;
    (94) break_statement -> . BREAK NAME ;
    (95) return_statement -> . RETURN expression_opt ;
    (98) continue_statement -> . CONTINUE ;
    (41) primitive_type -> . BOOLEAN
    (42) primitive_type -> . VOID
    (43) primitive_type -> . BYTE
    (44) primitive_type -> . SHORT
    (45) primitive_type -> . INT
    (46) primitive_type -> . LONG
    (47) primitive_type -> . CHAR
    (48) primitive_type -> . FLOAT
    (49) primitive_type -> . DOUBLE
    (50) primitive_type -> . STRING
    (37) array_type -> . primitive_type dims
    (38) array_type -> . name dims
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE
    (86) statement_expression -> . assignment
    (87) statement_expression -> . unary_expression
    (88) statement_expression -> . method_invocation
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (89) method_invocation -> . NAME ( argument_list )
    (90) method_invocation -> . NAME ( )
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]

    }               shift and go to state 38
    ;               shift and go to state 67
    IF              shift and go to state 79
    WHILE           shift and go to state 80
    DO              shift and go to state 81
    BREAK           shift and go to state 83
    RETURN          shift and go to state 85
    CONTINUE        shift and go to state 86
    BOOLEAN         shift and go to state 46
    VOID            shift and go to state 47
    BYTE            shift and go to state 48
    SHORT           shift and go to state 49
    INT             shift and go to state 50
    LONG            shift and go to state 51
    CHAR            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    +               shift and go to state 94
    -               shift and go to state 95
    NAME            shift and go to state 84
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108

    closing_bracket                shift and go to state 244
    block_statement                shift and go to state 126
    local_variable_declaration_statement shift and go to state 64
    statement                      shift and go to state 65
    local_variable_declaration     shift and go to state 66
    other_statement                shift and go to state 68
    if_then_statement              shift and go to state 69
    if_then_else_statement         shift and go to state 70
    while_statement                shift and go to state 71
    do_while_statement             shift and go to state 72
    type                           shift and go to state 73
    modifiers                      shift and go to state 74
    expression_statement           shift and go to state 75
    break_statement                shift and go to state 76
    return_statement               shift and go to state 77
    continue_statement             shift and go to state 78
    primitive_type                 shift and go to state 44
    array_type                     shift and go to state 45
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 82
    name                           shift and go to state 87
    assignment                     shift and go to state 88
    unary_expression               shift and go to state 89
    method_invocation              shift and go to state 90
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    postfix_expression             shift and go to state 91
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    primary                        shift and go to state 96
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102

state 242

    (103) do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( . expression ) ;
    (104) expression -> . assignment_expression
    (105) assignment_expression -> . assignment
    (106) assignment_expression -> . conditional_expression
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (114) conditional_expression -> . conditional_or_expression
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (115) conditional_or_expression -> . conditional_and_expression
    (116) conditional_or_expression -> . conditional_or_expression OR conditional_and_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (117) conditional_and_expression -> . inclusive_or_expression
    (118) conditional_and_expression -> . conditional_and_expression AND inclusive_or_expression
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (119) inclusive_or_expression -> . and_expression
    (120) inclusive_or_expression -> . inclusive_or_expression | and_expression
    (121) and_expression -> . equality_expression
    (122) and_expression -> . and_expression & equality_expression
    (123) equality_expression -> . equality_expression EQ relational_expression
    (124) equality_expression -> . equality_expression NEQ relational_expression
    (125) equality_expression -> . relational_expression
    (126) relational_expression -> . additive_expression
    (127) relational_expression -> . relational_expression > additive_expression
    (128) relational_expression -> . relational_expression < additive_expression
    (129) relational_expression -> . relational_expression GTEQ additive_expression
    (130) relational_expression -> . relational_expression LTEQ additive_expression
    (131) additive_expression -> . multiplicative_expression
    (132) additive_expression -> . additive_expression + multiplicative_expression
    (133) additive_expression -> . additive_expression - multiplicative_expression
    (134) multiplicative_expression -> . unary_expression
    (135) multiplicative_expression -> . multiplicative_expression * unary_expression
    (136) multiplicative_expression -> . multiplicative_expression / unary_expression
    (137) multiplicative_expression -> . multiplicative_expression % unary_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression

    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108
    NAME            shift and go to state 43
    +               shift and go to state 94
    -               shift and go to state 95
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100

    expression                     shift and go to state 245
    assignment_expression          shift and go to state 141
    assignment                     shift and go to state 142
    conditional_expression         shift and go to state 143
    postfix_expression             shift and go to state 144
    conditional_or_expression      shift and go to state 145
    primary                        shift and go to state 96
    name                           shift and go to state 146
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    conditional_and_expression     shift and go to state 147
    literal                        shift and go to state 101
    array_access                   shift and go to state 102
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    inclusive_or_expression        shift and go to state 148
    and_expression                 shift and go to state 149
    equality_expression            shift and go to state 150
    relational_expression          shift and go to state 151
    additive_expression            shift and go to state 152
    multiplicative_expression      shift and go to state 153
    unary_expression               shift and go to state 154
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93

state 243

    (99) if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .
    (100) if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket . else
    (101) else -> . ELSE opening_bracket block_statements closing_bracket

    ;               reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    IF              reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    WHILE           reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    DO              reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    BREAK           reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    RETURN          reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    CONTINUE        reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    BOOLEAN         reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    VOID            reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    BYTE            reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    SHORT           reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    INT             reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    LONG            reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    CHAR            reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    FLOAT           reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    DOUBLE          reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    STRING          reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    PUBLIC          reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    PROTECTED       reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    PRIVATE         reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    STATIC          reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    ABSTRACT        reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    FINAL           reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    NATIVE          reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    +               reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    -               reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    NAME            reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    PLUSPLUS        reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    MINUSMINUS      reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    NUM             reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    CHAR_LITERAL    reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    STRING_LITERAL  reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    TRUE            reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    FALSE           reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    NULL            reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    }               reduce using rule 99 (if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket .)
    ELSE            shift and go to state 247

    else                           shift and go to state 246

state 244

    (102) while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .

    ;               reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    IF              reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    WHILE           reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    DO              reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    BREAK           reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    RETURN          reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    CONTINUE        reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    BOOLEAN         reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    VOID            reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    BYTE            reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    SHORT           reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    INT             reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    LONG            reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    CHAR            reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    FLOAT           reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    DOUBLE          reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    STRING          reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    PUBLIC          reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    PROTECTED       reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    PRIVATE         reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    STATIC          reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    ABSTRACT        reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    FINAL           reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    NATIVE          reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    +               reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    -               reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    NAME            reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    PLUSPLUS        reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    MINUSMINUS      reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    NUM             reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    CHAR_LITERAL    reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    STRING_LITERAL  reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    TRUE            reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    FALSE           reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    NULL            reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)
    }               reduce using rule 102 (while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket .)


state 245

    (103) do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression . ) ;

    )               shift and go to state 248


state 246

    (100) if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .

    ;               reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    IF              reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    WHILE           reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    DO              reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    BREAK           reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    RETURN          reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    CONTINUE        reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    BOOLEAN         reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    VOID            reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    BYTE            reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    SHORT           reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    INT             reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    LONG            reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    CHAR            reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    FLOAT           reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    DOUBLE          reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    STRING          reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    PUBLIC          reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    PROTECTED       reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    PRIVATE         reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    STATIC          reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    ABSTRACT        reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    FINAL           reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    NATIVE          reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    +               reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    -               reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    NAME            reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    PLUSPLUS        reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    MINUSMINUS      reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    NUM             reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    CHAR_LITERAL    reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    STRING_LITERAL  reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    TRUE            reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    FALSE           reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    NULL            reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)
    }               reduce using rule 100 (if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else .)


state 247

    (101) else -> ELSE . opening_bracket block_statements closing_bracket
    (15) opening_bracket -> . {

    {               shift and go to state 20

    opening_bracket                shift and go to state 249

state 248

    (103) do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) . ;

    ;               shift and go to state 250


state 249

    (101) else -> ELSE opening_bracket . block_statements closing_bracket
    (63) block_statements -> . block_statement
    (64) block_statements -> . block_statements block_statement
    (65) block_statement -> . local_variable_declaration_statement
    (66) block_statement -> . statement
    (67) local_variable_declaration_statement -> . local_variable_declaration ;
    (75) statement -> . other_statement
    (76) statement -> . if_then_statement
    (77) statement -> . if_then_else_statement
    (78) statement -> . while_statement
    (79) statement -> . do_while_statement
    (68) local_variable_declaration -> . type variable_declarators
    (69) local_variable_declaration -> . modifiers type variable_declarators
    (80) other_statement -> . expression_statement
    (81) other_statement -> . break_statement
    (82) other_statement -> . return_statement
    (83) other_statement -> . continue_statement
    (84) other_statement -> . ;
    (99) if_then_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket
    (100) if_then_else_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket else
    (102) while_statement -> . WHILE ( expression ) opening_bracket block_statements closing_bracket
    (103) do_while_statement -> . DO opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (35) type -> . primitive_type
    (36) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (85) expression_statement -> . statement_expression ;
    (93) break_statement -> . BREAK ;
    (94) break_statement -> . BREAK NAME ;
    (95) return_statement -> . RETURN expression_opt ;
    (98) continue_statement -> . CONTINUE ;
    (41) primitive_type -> . BOOLEAN
    (42) primitive_type -> . VOID
    (43) primitive_type -> . BYTE
    (44) primitive_type -> . SHORT
    (45) primitive_type -> . INT
    (46) primitive_type -> . LONG
    (47) primitive_type -> . CHAR
    (48) primitive_type -> . FLOAT
    (49) primitive_type -> . DOUBLE
    (50) primitive_type -> . STRING
    (37) array_type -> . primitive_type dims
    (38) array_type -> . name dims
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE
    (86) statement_expression -> . assignment
    (87) statement_expression -> . unary_expression
    (88) statement_expression -> . method_invocation
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (89) method_invocation -> . NAME ( argument_list )
    (90) method_invocation -> . NAME ( )
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]

    ;               shift and go to state 67
    IF              shift and go to state 79
    WHILE           shift and go to state 80
    DO              shift and go to state 81
    BREAK           shift and go to state 83
    RETURN          shift and go to state 85
    CONTINUE        shift and go to state 86
    BOOLEAN         shift and go to state 46
    VOID            shift and go to state 47
    BYTE            shift and go to state 48
    SHORT           shift and go to state 49
    INT             shift and go to state 50
    LONG            shift and go to state 51
    CHAR            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    +               shift and go to state 94
    -               shift and go to state 95
    NAME            shift and go to state 84
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108

    block_statements               shift and go to state 251
    block_statement                shift and go to state 63
    local_variable_declaration_statement shift and go to state 64
    statement                      shift and go to state 65
    local_variable_declaration     shift and go to state 66
    other_statement                shift and go to state 68
    if_then_statement              shift and go to state 69
    if_then_else_statement         shift and go to state 70
    while_statement                shift and go to state 71
    do_while_statement             shift and go to state 72
    type                           shift and go to state 73
    modifiers                      shift and go to state 74
    expression_statement           shift and go to state 75
    break_statement                shift and go to state 76
    return_statement               shift and go to state 77
    continue_statement             shift and go to state 78
    primitive_type                 shift and go to state 44
    array_type                     shift and go to state 45
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 82
    name                           shift and go to state 87
    assignment                     shift and go to state 88
    unary_expression               shift and go to state 89
    method_invocation              shift and go to state 90
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    postfix_expression             shift and go to state 91
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    primary                        shift and go to state 96
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102

state 250

    (103) do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .

    ;               reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    IF              reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    WHILE           reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    DO              reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    BREAK           reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    RETURN          reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    CONTINUE        reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    BOOLEAN         reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    VOID            reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    BYTE            reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    SHORT           reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    INT             reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    LONG            reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    CHAR            reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    FLOAT           reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    DOUBLE          reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    STRING          reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    PUBLIC          reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    PROTECTED       reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    PRIVATE         reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    STATIC          reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    ABSTRACT        reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    FINAL           reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    NATIVE          reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    +               reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    -               reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    NAME            reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    PLUSPLUS        reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    MINUSMINUS      reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    NUM             reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    CHAR_LITERAL    reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    STRING_LITERAL  reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    TRUE            reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    FALSE           reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    NULL            reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    }               reduce using rule 103 (do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)


state 251

    (101) else -> ELSE opening_bracket block_statements . closing_bracket
    (64) block_statements -> block_statements . block_statement
    (16) closing_bracket -> . }
    (65) block_statement -> . local_variable_declaration_statement
    (66) block_statement -> . statement
    (67) local_variable_declaration_statement -> . local_variable_declaration ;
    (75) statement -> . other_statement
    (76) statement -> . if_then_statement
    (77) statement -> . if_then_else_statement
    (78) statement -> . while_statement
    (79) statement -> . do_while_statement
    (68) local_variable_declaration -> . type variable_declarators
    (69) local_variable_declaration -> . modifiers type variable_declarators
    (80) other_statement -> . expression_statement
    (81) other_statement -> . break_statement
    (82) other_statement -> . return_statement
    (83) other_statement -> . continue_statement
    (84) other_statement -> . ;
    (99) if_then_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket
    (100) if_then_else_statement -> . IF ( expression ) opening_bracket block_statements closing_bracket else
    (102) while_statement -> . WHILE ( expression ) opening_bracket block_statements closing_bracket
    (103) do_while_statement -> . DO opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (35) type -> . primitive_type
    (36) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (85) expression_statement -> . statement_expression ;
    (93) break_statement -> . BREAK ;
    (94) break_statement -> . BREAK NAME ;
    (95) return_statement -> . RETURN expression_opt ;
    (98) continue_statement -> . CONTINUE ;
    (41) primitive_type -> . BOOLEAN
    (42) primitive_type -> . VOID
    (43) primitive_type -> . BYTE
    (44) primitive_type -> . SHORT
    (45) primitive_type -> . INT
    (46) primitive_type -> . LONG
    (47) primitive_type -> . CHAR
    (48) primitive_type -> . FLOAT
    (49) primitive_type -> . DOUBLE
    (50) primitive_type -> . STRING
    (37) array_type -> . primitive_type dims
    (38) array_type -> . name dims
    (51) modifier -> . PUBLIC
    (52) modifier -> . PROTECTED
    (53) modifier -> . PRIVATE
    (54) modifier -> . STATIC
    (55) modifier -> . ABSTRACT
    (56) modifier -> . FINAL
    (57) modifier -> . NATIVE
    (86) statement_expression -> . assignment
    (87) statement_expression -> . unary_expression
    (88) statement_expression -> . method_invocation
    (58) name -> . simple_name
    (59) name -> . qualified_name
    (107) assignment -> . postfix_expression assignment_operator assignment_expression
    (138) unary_expression -> . pre_increment_expression
    (139) unary_expression -> . pre_decrement_expression
    (140) unary_expression -> . + unary_expression
    (141) unary_expression -> . - unary_expression
    (142) unary_expression -> . postfix_expression
    (89) method_invocation -> . NAME ( argument_list )
    (90) method_invocation -> . NAME ( )
    (60) simple_name -> . NAME
    (61) qualified_name -> . name . simple_name
    (145) postfix_expression -> . primary
    (146) postfix_expression -> . name
    (147) postfix_expression -> . post_increment_expression
    (148) postfix_expression -> . post_decrement_expression
    (143) pre_increment_expression -> . PLUSPLUS unary_expression
    (144) pre_decrement_expression -> . MINUSMINUS unary_expression
    (151) primary -> . literal
    (152) primary -> . array_access
    (149) post_increment_expression -> . postfix_expression PLUSPLUS
    (150) post_decrement_expression -> . postfix_expression MINUSMINUS
    (154) literal -> . NUM
    (155) literal -> . CHAR_LITERAL
    (156) literal -> . STRING_LITERAL
    (157) literal -> . TRUE
    (158) literal -> . FALSE
    (159) literal -> . NULL
    (153) array_access -> . name [ expression ]

    }               shift and go to state 38
    ;               shift and go to state 67
    IF              shift and go to state 79
    WHILE           shift and go to state 80
    DO              shift and go to state 81
    BREAK           shift and go to state 83
    RETURN          shift and go to state 85
    CONTINUE        shift and go to state 86
    BOOLEAN         shift and go to state 46
    VOID            shift and go to state 47
    BYTE            shift and go to state 48
    SHORT           shift and go to state 49
    INT             shift and go to state 50
    LONG            shift and go to state 51
    CHAR            shift and go to state 52
    FLOAT           shift and go to state 53
    DOUBLE          shift and go to state 54
    STRING          shift and go to state 55
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    +               shift and go to state 94
    -               shift and go to state 95
    NAME            shift and go to state 84
    PLUSPLUS        shift and go to state 99
    MINUSMINUS      shift and go to state 100
    NUM             shift and go to state 103
    CHAR_LITERAL    shift and go to state 104
    STRING_LITERAL  shift and go to state 105
    TRUE            shift and go to state 106
    FALSE           shift and go to state 107
    NULL            shift and go to state 108

    closing_bracket                shift and go to state 252
    block_statement                shift and go to state 126
    local_variable_declaration_statement shift and go to state 64
    statement                      shift and go to state 65
    local_variable_declaration     shift and go to state 66
    other_statement                shift and go to state 68
    if_then_statement              shift and go to state 69
    if_then_else_statement         shift and go to state 70
    while_statement                shift and go to state 71
    do_while_statement             shift and go to state 72
    type                           shift and go to state 73
    modifiers                      shift and go to state 74
    expression_statement           shift and go to state 75
    break_statement                shift and go to state 76
    return_statement               shift and go to state 77
    continue_statement             shift and go to state 78
    primitive_type                 shift and go to state 44
    array_type                     shift and go to state 45
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 82
    name                           shift and go to state 87
    assignment                     shift and go to state 88
    unary_expression               shift and go to state 89
    method_invocation              shift and go to state 90
    simple_name                    shift and go to state 57
    qualified_name                 shift and go to state 58
    postfix_expression             shift and go to state 91
    pre_increment_expression       shift and go to state 92
    pre_decrement_expression       shift and go to state 93
    primary                        shift and go to state 96
    post_increment_expression      shift and go to state 97
    post_decrement_expression      shift and go to state 98
    literal                        shift and go to state 101
    array_access                   shift and go to state 102

state 252

    (101) else -> ELSE opening_bracket block_statements closing_bracket .

    ;               reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    IF              reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    WHILE           reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    DO              reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    BREAK           reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    RETURN          reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    CONTINUE        reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    BOOLEAN         reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    VOID            reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    BYTE            reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    SHORT           reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    INT             reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    LONG            reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    CHAR            reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    FLOAT           reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    DOUBLE          reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    STRING          reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    PUBLIC          reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    PROTECTED       reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    PRIVATE         reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    STATIC          reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    ABSTRACT        reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    FINAL           reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    NATIVE          reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    +               reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    -               reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    NAME            reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    PLUSPLUS        reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    MINUSMINUS      reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    NUM             reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    CHAR_LITERAL    reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    STRING_LITERAL  reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    TRUE            reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    FALSE           reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    NULL            reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)
    }               reduce using rule 101 (else -> ELSE opening_bracket block_statements closing_bracket .)


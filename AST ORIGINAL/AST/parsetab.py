
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "rightASSIGNleftPLUSPLUSMINUSMINUSleftORleftANDleftNEQEQleftGREATERLESSGTEQLTEQleftADDSUBleftMULDIVrightUMINUSABSTRACT ADD AND ASSIGN BOOLEAN BREAK BYTE CHAR CHAR_LITERAL CLASS CONTINUE DIV DIVIDE_ASSIGN DO DOUBLE ELSE EQ FALSE FINAL FLOAT GREATER GTEQ IF INT LESS LONG LTEQ MAIN MINUSMINUS MINUS_ASSIGN MUL NAME NATIVE NEQ NULL NUM OR PLUSPLUS PLUS_ASSIGN PRIVATE PROTECTED PUBLIC REMAINDER_ASSIGN RETURN SHORT STATIC STRING STRING_LITERAL SUB TIMES_ASSIGN TRUE UMINUS VOID WHILEstart : type_declarations\n    \n    type_declarations : type_declaration\n                      | type_declarations ',' type_declaration\n    \n    type_declaration : class_declaration\n    \n    class_declaration : class_header_name class_body\n    \n    class_header_name : modifiers_opt CLASS name\n    \n    modifiers_opt : modifiers \n                  | empty\n    modifiers : modifier\n              | modifiers modifier\n    \n    class_body : opening_bracket classbodydecllist closing_bracket\n    opening_bracket : '{'\n    closing_bracket : '}'\n    \n    tmain : tmain_header opening_bracket method_body closing_bracket\n    \n    tmain_header : tmain_name '(' formal_parameter_list_opt ')'\n    \n    tmain_name : modifiers_opt type MAIN\n    \n    classbodydecllist : classbodydecl \n                      | classbodydecllist classbodydecl\n    \n    classbodydecl : method_declaration \n                  | tmain\n                  | field_declartaion\n    \n    field_declartaion : modifiers_opt type variable_declarators ';'\n     \n    method_declaration : method_header opening_bracket method_body closing_bracket\n    \n    method_header : method_header_name '(' formal_parameter_list_opt ')'\n    \n    method_header_name : modifiers_opt type name \n    method_body : block_statements \n    formal_parameter_list_opt : formal_parameter_list\n                              | empty\n    formal_parameter : type variable_declarator_id   \n    variable_declarator_id : name \n    \n    formal_parameter_list : formal_parameter\n                          | formal_parameter_list ',' formal_parameter\n    type : primitive_type\n            | array_type\n    array_type : primitive_type dims\n               | name dims\n    dims : '[' ']'\n         | dims '[' ']' \n    primitive_type : BOOLEAN\n                   | VOID\n                   | BYTE\n                   | SHORT\n                   | INT\n                   | LONG\n                   | CHAR\n                   | FLOAT\n                   | DOUBLE \n                   | STRING\n    modifier : PUBLIC\n                | PROTECTED\n                | PRIVATE\n                | STATIC\n                | ABSTRACT\n                | FINAL\n                | NATIVE\n    \n    name : NAME\n    empty :\n    block_statements : block_statement\n                    | block_statements block_statement\n    \n    block_statement : local_variable_declaration_statement\n                    | statement\n    \n    local_variable_declaration_statement : local_variable_declaration ';'\n    local_variable_declaration : type variable_declarators\n                               | modifiers type variable_declarators\n    \n    variable_declarators : variable_declarator\n                         | variable_declarators ',' variable_declarator\n    variable_declarator : variable_declarator_id\n                        | variable_declarator_id ASSIGN Expr\n    \n    statement : other_statement\n              | if_then_statement\n              | if_then_else_statement\n              | while_statement\n              | do_while_statement\n    \n    other_statement : expression_statement\n                    | break_statement\n                    | return_statement\n                    | ';'\n    \n    expression_statement : statement_expression ';'\n    statement_expression : assignment\n                         | unary_expression\n                         | method_invocation\n    \n    method_invocation : NAME '(' argument_list ')'\n                      | NAME '(' ')'\n    \n    argument_list : expression\n                  | argument_list ',' expression\n    \n    break_statement : BREAK ';'\n                    | BREAK NAME ';'\n    \n    return_statement : RETURN expression_opt ';'\n    expression_opt : expression\n                   | empty\n    \n    if_then_statement : IF '(' expression ')' opening_bracket block_statements closing_bracket\n    \n    if_then_else_statement : IF '(' expression ')' opening_bracket block_statements closing_bracket else\n    else : ELSE opening_bracket block_statements closing_bracket\n    \n    while_statement : WHILE '(' expression ')' opening_bracket block_statements closing_bracket\n    \n    do_while_statement : DO opening_bracket block_statements closing_bracket WHILE '(' expression ')' ';'\n    \n    expression : assignment_expression\n    \n    assignment_expression : assignment\n                          | Expr\n    assignment : Location assignment_operator Expr\n    \n    Location : name\n              | array_access\n    \n    assignment_operator : ASSIGN\n                        | TIMES_ASSIGN\n                        | DIVIDE_ASSIGN\n                        | REMAINDER_ASSIGN\n                        | PLUS_ASSIGN\n                        | MINUS_ASSIGN\n    \n    Expr : exprbinaryexpr\n         | unary_expression\n         | primary\n         | name\n    exprbinaryexpr : Expr ADD Expr\n                      | Expr SUB Expr\n                      | Expr MUL Expr\n                      | Expr DIV Expr\n                      | Expr AND Expr\n                      | Expr OR Expr\n                      | Expr LESS Expr\n                      | Expr LTEQ Expr\n                      | Expr GREATER Expr\n                      | Expr GTEQ Expr\n                      | Expr EQ Expr\n                      | Expr NEQ Expr\n    unary_expression : pre_increment_expression\n                     | pre_decrement_expression\n                     | UMINUS Expr %prec UMINUS\n                     | post_increment_expression\n                     | post_decrement_expression\n    \n    pre_increment_expression : PLUSPLUS Expr\n    pre_decrement_expression : MINUSMINUS Expr\n    \n    post_increment_expression : Expr PLUSPLUS\n    post_decrement_expression : Expr MINUSMINUS\n    \n    primary : literal \n            | array_access \n    array_access : name '[' Expr ']'\n    literal : NUM\n               | CHAR_LITERAL\n               | STRING_LITERAL\n               | TRUE\n               | FALSE\n               | NULL"
    
_lr_action_items = {'CLASS':([0,6,7,8,9,10,11,12,13,14,15,16,17,22,],[-57,21,-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-10,]),'PUBLIC':([0,7,9,10,11,12,13,14,15,16,17,19,20,22,24,25,26,27,28,37,38,39,40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[10,10,-9,-49,-50,-51,-52,-53,-54,-55,10,10,-12,-10,10,-17,-19,-20,-21,-18,-13,10,10,10,-58,-60,-61,-77,-69,-70,-71,-72,-73,10,-74,-75,-76,-23,-59,-62,10,-78,-86,-14,-22,10,-87,-88,10,10,10,10,-91,-94,-92,10,-95,10,-93,]),'PROTECTED':([0,7,9,10,11,12,13,14,15,16,17,19,20,22,24,25,26,27,28,37,38,39,40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[11,11,-9,-49,-50,-51,-52,-53,-54,-55,11,11,-12,-10,11,-17,-19,-20,-21,-18,-13,11,11,11,-58,-60,-61,-77,-69,-70,-71,-72,-73,11,-74,-75,-76,-23,-59,-62,11,-78,-86,-14,-22,11,-87,-88,11,11,11,11,-91,-94,-92,11,-95,11,-93,]),'PRIVATE':([0,7,9,10,11,12,13,14,15,16,17,19,20,22,24,25,26,27,28,37,38,39,40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[12,12,-9,-49,-50,-51,-52,-53,-54,-55,12,12,-12,-10,12,-17,-19,-20,-21,-18,-13,12,12,12,-58,-60,-61,-77,-69,-70,-71,-72,-73,12,-74,-75,-76,-23,-59,-62,12,-78,-86,-14,-22,12,-87,-88,12,12,12,12,-91,-94,-92,12,-95,12,-93,]),'STATIC':([0,7,9,10,11,12,13,14,15,16,17,19,20,22,24,25,26,27,28,37,38,39,40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[13,13,-9,-49,-50,-51,-52,-53,-54,-55,13,13,-12,-10,13,-17,-19,-20,-21,-18,-13,13,13,13,-58,-60,-61,-77,-69,-70,-71,-72,-73,13,-74,-75,-76,-23,-59,-62,13,-78,-86,-14,-22,13,-87,-88,13,13,13,13,-91,-94,-92,13,-95,13,-93,]),'ABSTRACT':([0,7,9,10,11,12,13,14,15,16,17,19,20,22,24,25,26,27,28,37,38,39,40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[14,14,-9,-49,-50,-51,-52,-53,-54,-55,14,14,-12,-10,14,-17,-19,-20,-21,-18,-13,14,14,14,-58,-60,-61,-77,-69,-70,-71,-72,-73,14,-74,-75,-76,-23,-59,-62,14,-78,-86,-14,-22,14,-87,-88,14,14,14,14,-91,-94,-92,14,-95,14,-93,]),'FINAL':([0,7,9,10,11,12,13,14,15,16,17,19,20,22,24,25,26,27,28,37,38,39,40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[15,15,-9,-49,-50,-51,-52,-53,-54,-55,15,15,-12,-10,15,-17,-19,-20,-21,-18,-13,15,15,15,-58,-60,-61,-77,-69,-70,-71,-72,-73,15,-74,-75,-76,-23,-59,-62,15,-78,-86,-14,-22,15,-87,-88,15,15,15,15,-91,-94,-92,15,-95,15,-93,]),'NATIVE':([0,7,9,10,11,12,13,14,15,16,17,19,20,22,24,25,26,27,28,37,38,39,40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[16,16,-9,-49,-50,-51,-52,-53,-54,-55,16,16,-12,-10,16,-17,-19,-20,-21,-18,-13,16,16,16,-58,-60,-61,-77,-69,-70,-71,-72,-73,16,-74,-75,-76,-23,-59,-62,16,-78,-86,-14,-22,16,-87,-88,16,16,16,16,-91,-94,-92,16,-95,16,-93,]),'$end':([1,2,3,4,18,23,36,38,],[0,-1,-2,-4,-5,-3,-11,-13,]),',':([2,3,4,18,23,35,36,38,87,88,90,91,92,95,96,97,98,99,100,101,102,103,105,106,108,109,114,116,122,123,135,136,137,138,139,148,149,162,163,164,165,166,175,177,182,184,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,210,214,],[17,-2,-4,-5,-3,-56,-11,-13,-124,-125,-127,-128,-134,-108,-110,-133,-136,-137,-138,-139,-140,-141,169,-30,-65,-67,174,-31,169,-30,-96,-97,-98,-109,-111,-131,-132,-126,-111,-134,-129,-130,-29,169,209,-84,-99,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-66,-68,-32,-135,-85,]),'{':([5,29,30,34,35,76,173,176,205,206,222,],[20,20,20,-6,-56,20,-24,-15,20,20,20,]),'BOOLEAN':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,174,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,45,-18,-13,45,45,45,45,45,-58,-60,-61,-77,-69,-70,-71,-72,-73,45,-74,-75,-76,-23,-59,-62,45,-78,-86,-14,-22,45,45,-87,-88,45,45,45,45,-91,-94,-92,45,-95,45,-93,]),'VOID':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,174,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,46,-18,-13,46,46,46,46,46,-58,-60,-61,-77,-69,-70,-71,-72,-73,46,-74,-75,-76,-23,-59,-62,46,-78,-86,-14,-22,46,46,-87,-88,46,46,46,46,-91,-94,-92,46,-95,46,-93,]),'BYTE':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,174,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,47,-18,-13,47,47,47,47,47,-58,-60,-61,-77,-69,-70,-71,-72,-73,47,-74,-75,-76,-23,-59,-62,47,-78,-86,-14,-22,47,47,-87,-88,47,47,47,47,-91,-94,-92,47,-95,47,-93,]),'SHORT':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,174,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,48,-18,-13,48,48,48,48,48,-58,-60,-61,-77,-69,-70,-71,-72,-73,48,-74,-75,-76,-23,-59,-62,48,-78,-86,-14,-22,48,48,-87,-88,48,48,48,48,-91,-94,-92,48,-95,48,-93,]),'INT':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,174,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,49,-18,-13,49,49,49,49,49,-58,-60,-61,-77,-69,-70,-71,-72,-73,49,-74,-75,-76,-23,-59,-62,49,-78,-86,-14,-22,49,49,-87,-88,49,49,49,49,-91,-94,-92,49,-95,49,-93,]),'LONG':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,174,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,50,-18,-13,50,50,50,50,50,-58,-60,-61,-77,-69,-70,-71,-72,-73,50,-74,-75,-76,-23,-59,-62,50,-78,-86,-14,-22,50,50,-87,-88,50,50,50,50,-91,-94,-92,50,-95,50,-93,]),'CHAR':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,174,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,51,-18,-13,51,51,51,51,51,-58,-60,-61,-77,-69,-70,-71,-72,-73,51,-74,-75,-76,-23,-59,-62,51,-78,-86,-14,-22,51,51,-87,-88,51,51,51,51,-91,-94,-92,51,-95,51,-93,]),'FLOAT':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,174,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,52,-18,-13,52,52,52,52,52,-58,-60,-61,-77,-69,-70,-71,-72,-73,52,-74,-75,-76,-23,-59,-62,52,-78,-86,-14,-22,52,52,-87,-88,52,52,52,52,-91,-94,-92,52,-95,52,-93,]),'DOUBLE':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,174,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,53,-18,-13,53,53,53,53,53,-58,-60,-61,-77,-69,-70,-71,-72,-73,53,-74,-75,-76,-23,-59,-62,53,-78,-86,-14,-22,53,53,-87,-88,53,53,53,53,-91,-94,-92,53,-95,53,-93,]),'STRING':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,119,120,121,127,128,129,167,168,174,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,54,-18,-13,54,54,54,54,54,-58,-60,-61,-77,-69,-70,-71,-72,-73,54,-74,-75,-76,-23,-59,-62,54,-78,-86,-14,-22,54,54,-87,-88,54,54,54,54,-91,-94,-92,54,-95,54,-93,]),'NAME':([7,8,9,10,11,12,13,14,15,16,19,20,21,22,24,25,26,27,28,31,37,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,78,80,89,93,94,110,112,117,119,120,121,124,125,126,127,128,129,131,140,141,142,143,144,145,146,147,150,151,152,153,154,155,156,157,158,159,160,161,167,168,169,170,172,174,180,181,185,186,203,209,211,212,215,216,217,218,219,221,224,225,226,227,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,35,-10,-57,-17,-19,-20,-21,35,-18,-13,79,79,35,-33,-34,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,35,35,79,-58,-60,-61,-77,-69,-70,-71,-72,-73,35,35,-74,-75,-76,130,35,35,35,35,-36,-35,35,-23,-59,-62,35,35,35,79,-78,-86,35,35,35,-102,-103,-104,-105,-106,-107,35,35,35,35,35,35,35,35,35,35,35,35,-14,-22,35,35,-37,35,79,-87,-88,35,-38,35,79,79,79,79,35,-91,-94,-92,79,-95,79,-93,]),';':([20,35,38,39,40,58,59,60,61,62,63,64,65,66,67,68,71,72,73,77,78,80,82,83,84,87,88,90,91,92,95,96,97,98,99,100,101,102,103,105,106,108,109,120,121,122,123,127,128,129,130,132,133,134,135,136,137,138,139,148,149,162,163,164,165,166,177,180,181,183,185,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,208,210,211,212,215,216,218,219,221,223,224,225,226,227,],[-12,-56,-13,63,63,63,-58,-60,-61,121,-77,-69,-70,-71,-72,-73,-74,-75,-76,128,129,-57,-79,-80,-81,-124,-125,-127,-128,-134,-108,-110,-133,-136,-137,-138,-139,-140,-141,168,-30,-65,-67,-59,-62,-63,-30,63,-78,-86,181,185,-89,-90,-96,-97,-98,-109,-111,-131,-132,-126,-111,-134,-129,-130,-64,63,-87,-83,-88,-99,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-66,-68,-82,-135,63,63,63,63,-91,-94,-92,225,63,-95,63,-93,]),'IF':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,120,121,127,128,129,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[-12,-13,74,74,74,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,-59,-62,74,-78,-86,74,-87,-88,74,74,74,74,-91,-94,-92,74,-95,74,-93,]),'WHILE':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,120,121,127,128,129,180,181,185,207,211,212,215,216,218,219,221,224,225,226,227,],[-12,-13,75,75,75,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,-59,-62,75,-78,-86,75,-87,-88,213,75,75,75,75,-91,-94,-92,75,-95,75,-93,]),'DO':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,120,121,127,128,129,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[-12,-13,76,76,76,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,-59,-62,76,-78,-86,76,-87,-88,76,76,76,76,-91,-94,-92,76,-95,76,-93,]),'BREAK':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,120,121,127,128,129,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[-12,-13,78,78,78,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,-59,-62,78,-78,-86,78,-87,-88,78,78,78,78,-91,-94,-92,78,-95,78,-93,]),'RETURN':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,120,121,127,128,129,180,181,185,211,212,215,216,218,219,221,224,225,226,227,],[-12,-13,80,80,80,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,-59,-62,80,-78,-86,80,-87,-88,80,80,80,80,-91,-94,-92,80,-95,80,-93,]),'UMINUS':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,80,89,93,94,120,121,125,126,127,128,129,131,140,141,142,143,144,145,146,147,150,151,152,153,154,155,156,157,158,159,160,161,170,180,181,185,186,209,211,212,215,216,217,218,219,221,224,225,226,227,],[-12,-13,89,89,89,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,89,89,89,89,-59,-62,89,89,89,-78,-86,89,89,89,-102,-103,-104,-105,-106,-107,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-87,-88,89,89,89,89,89,89,89,-91,-94,-92,89,-95,89,-93,]),'PLUSPLUS':([20,35,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,79,80,81,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,120,121,125,126,127,128,129,131,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,170,180,181,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,209,210,211,212,215,216,217,218,219,221,224,225,226,227,],[-12,-56,-13,93,93,93,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,-56,93,-111,-109,148,-124,-125,93,-127,-128,-134,93,93,-108,-110,-133,-136,-137,-138,-139,-140,-141,-59,-62,93,93,93,-78,-86,93,148,-109,-111,93,93,-102,-103,-104,-105,-106,-107,-131,-132,93,93,93,93,93,93,93,93,93,93,93,93,-126,-111,-134,-129,-130,93,93,-87,-88,93,148,148,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,148,93,-135,93,93,93,93,93,-91,-94,-92,93,-95,93,-93,]),'MINUSMINUS':([20,35,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,79,80,81,83,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,120,121,125,126,127,128,129,131,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,170,180,181,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,209,210,211,212,215,216,217,218,219,221,224,225,226,227,],[-12,-56,-13,94,94,94,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,-56,94,-111,-109,149,-124,-125,94,-127,-128,-134,94,94,-108,-110,-133,-136,-137,-138,-139,-140,-141,-59,-62,94,94,94,-78,-86,94,149,-109,-111,94,94,-102,-103,-104,-105,-106,-107,-131,-132,94,94,94,94,94,94,94,94,94,94,94,94,-126,-111,-134,-129,-130,94,94,-87,-88,94,149,149,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,149,94,-135,94,94,94,94,94,-91,-94,-92,94,-95,94,-93,]),'NUM':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,80,89,93,94,120,121,125,126,127,128,129,131,140,141,142,143,144,145,146,147,150,151,152,153,154,155,156,157,158,159,160,161,170,180,181,185,186,209,211,212,215,216,217,218,219,221,224,225,226,227,],[-12,-13,98,98,98,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,98,98,98,98,-59,-62,98,98,98,-78,-86,98,98,98,-102,-103,-104,-105,-106,-107,98,98,98,98,98,98,98,98,98,98,98,98,98,98,-87,-88,98,98,98,98,98,98,98,-91,-94,-92,98,-95,98,-93,]),'CHAR_LITERAL':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,80,89,93,94,120,121,125,126,127,128,129,131,140,141,142,143,144,145,146,147,150,151,152,153,154,155,156,157,158,159,160,161,170,180,181,185,186,209,211,212,215,216,217,218,219,221,224,225,226,227,],[-12,-13,99,99,99,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,99,99,99,99,-59,-62,99,99,99,-78,-86,99,99,99,-102,-103,-104,-105,-106,-107,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-87,-88,99,99,99,99,99,99,99,-91,-94,-92,99,-95,99,-93,]),'STRING_LITERAL':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,80,89,93,94,120,121,125,126,127,128,129,131,140,141,142,143,144,145,146,147,150,151,152,153,154,155,156,157,158,159,160,161,170,180,181,185,186,209,211,212,215,216,217,218,219,221,224,225,226,227,],[-12,-13,100,100,100,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,100,100,100,100,-59,-62,100,100,100,-78,-86,100,100,100,-102,-103,-104,-105,-106,-107,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-87,-88,100,100,100,100,100,100,100,-91,-94,-92,100,-95,100,-93,]),'TRUE':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,80,89,93,94,120,121,125,126,127,128,129,131,140,141,142,143,144,145,146,147,150,151,152,153,154,155,156,157,158,159,160,161,170,180,181,185,186,209,211,212,215,216,217,218,219,221,224,225,226,227,],[-12,-13,101,101,101,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,101,101,101,101,-59,-62,101,101,101,-78,-86,101,101,101,-102,-103,-104,-105,-106,-107,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-87,-88,101,101,101,101,101,101,101,-91,-94,-92,101,-95,101,-93,]),'FALSE':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,80,89,93,94,120,121,125,126,127,128,129,131,140,141,142,143,144,145,146,147,150,151,152,153,154,155,156,157,158,159,160,161,170,180,181,185,186,209,211,212,215,216,217,218,219,221,224,225,226,227,],[-12,-13,102,102,102,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,102,102,102,102,-59,-62,102,102,102,-78,-86,102,102,102,-102,-103,-104,-105,-106,-107,102,102,102,102,102,102,102,102,102,102,102,102,102,102,-87,-88,102,102,102,102,102,102,102,-91,-94,-92,102,-95,102,-93,]),'NULL':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,80,89,93,94,120,121,125,126,127,128,129,131,140,141,142,143,144,145,146,147,150,151,152,153,154,155,156,157,158,159,160,161,170,180,181,185,186,209,211,212,215,216,217,218,219,221,224,225,226,227,],[-12,-13,103,103,103,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,103,103,103,103,-59,-62,103,103,103,-78,-86,103,103,103,-102,-103,-104,-105,-106,-107,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-87,-88,103,103,103,103,103,103,103,-91,-94,-92,103,-95,103,-93,]),'}':([24,25,26,27,28,37,38,57,58,59,60,61,63,64,65,66,67,68,71,72,73,104,119,120,121,128,129,167,168,180,181,185,215,216,218,219,221,225,226,227,],[38,-17,-19,-20,-21,-18,-13,38,-26,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,38,-23,-59,-62,-78,-86,-14,-22,38,-87,-88,38,38,-91,-94,-92,-95,38,-93,]),'(':([32,33,35,74,75,79,106,107,213,],[55,56,-56,125,126,131,-25,-16,217,]),'[':([35,42,43,45,46,47,48,49,50,51,52,53,54,79,81,110,112,139,163,172,203,],[-56,111,111,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-56,140,171,171,186,186,-37,-38,]),'ASSIGN':([35,79,81,85,92,106,109,123,139,210,],[-56,-56,-100,142,-101,-30,170,-30,-100,-135,]),'ADD':([35,79,81,83,86,87,88,90,91,92,95,96,97,98,99,100,101,102,103,137,138,139,148,149,162,163,164,165,166,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,210,],[-56,-56,-111,-109,150,-124,-125,-127,-128,-134,-108,-110,-133,-136,-137,-138,-139,-140,-141,150,-109,-111,-131,-132,-126,-111,-134,150,150,150,150,-112,-113,-114,-115,150,150,150,150,150,150,150,150,150,-135,]),'SUB':([35,79,81,83,86,87,88,90,91,92,95,96,97,98,99,100,101,102,103,137,138,139,148,149,162,163,164,165,166,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,210,],[-56,-56,-111,-109,151,-124,-125,-127,-128,-134,-108,-110,-133,-136,-137,-138,-139,-140,-141,151,-109,-111,-131,-132,-126,-111,-134,151,151,151,151,-112,-113,-114,-115,151,151,151,151,151,151,151,151,151,-135,]),'MUL':([35,79,81,83,86,87,88,90,91,92,95,96,97,98,99,100,101,102,103,137,138,139,148,149,162,163,164,165,166,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,210,],[-56,-56,-111,-109,152,-124,-125,-127,-128,-134,-108,-110,-133,-136,-137,-138,-139,-140,-141,152,-109,-111,-131,-132,-126,-111,-134,152,152,152,152,152,152,-114,-115,152,152,152,152,152,152,152,152,152,-135,]),'DIV':([35,79,81,83,86,87,88,90,91,92,95,96,97,98,99,100,101,102,103,137,138,139,148,149,162,163,164,165,166,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,210,],[-56,-56,-111,-109,153,-124,-125,-127,-128,-134,-108,-110,-133,-136,-137,-138,-139,-140,-141,153,-109,-111,-131,-132,-126,-111,-134,153,153,153,153,153,153,-114,-115,153,153,153,153,153,153,153,153,153,-135,]),'AND':([35,79,81,83,86,87,88,90,91,92,95,96,97,98,99,100,101,102,103,137,138,139,148,149,162,163,164,165,166,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,210,],[-56,-56,-111,-109,154,-124,-125,-127,-128,-134,-108,-110,-133,-136,-137,-138,-139,-140,-141,154,-109,-111,-131,-132,-126,-111,-134,154,154,154,154,-112,-113,-114,-115,-116,154,-118,-119,-120,-121,-122,-123,154,-135,]),'OR':([35,79,81,83,86,87,88,90,91,92,95,96,97,98,99,100,101,102,103,137,138,139,148,149,162,163,164,165,166,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,210,],[-56,-56,-111,-109,155,-124,-125,-127,-128,-134,-108,-110,-133,-136,-137,-138,-139,-140,-141,155,-109,-111,-131,-132,-126,-111,-134,155,155,155,155,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,155,-135,]),'LESS':([35,79,81,83,86,87,88,90,91,92,95,96,97,98,99,100,101,102,103,137,138,139,148,149,162,163,164,165,166,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,210,],[-56,-56,-111,-109,156,-124,-125,-127,-128,-134,-108,-110,-133,-136,-137,-138,-139,-140,-141,156,-109,-111,-131,-132,-126,-111,-134,156,156,156,156,-112,-113,-114,-115,156,156,-118,-119,-120,-121,156,156,156,-135,]),'LTEQ':([35,79,81,83,86,87,88,90,91,92,95,96,97,98,99,100,101,102,103,137,138,139,148,149,162,163,164,165,166,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,210,],[-56,-56,-111,-109,157,-124,-125,-127,-128,-134,-108,-110,-133,-136,-137,-138,-139,-140,-141,157,-109,-111,-131,-132,-126,-111,-134,157,157,157,157,-112,-113,-114,-115,157,157,-118,-119,-120,-121,157,157,157,-135,]),'GREATER':([35,79,81,83,86,87,88,90,91,92,95,96,97,98,99,100,101,102,103,137,138,139,148,149,162,163,164,165,166,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,210,],[-56,-56,-111,-109,158,-124,-125,-127,-128,-134,-108,-110,-133,-136,-137,-138,-139,-140,-141,158,-109,-111,-131,-132,-126,-111,-134,158,158,158,158,-112,-113,-114,-115,158,158,-118,-119,-120,-121,158,158,158,-135,]),'GTEQ':([35,79,81,83,86,87,88,90,91,92,95,96,97,98,99,100,101,102,103,137,138,139,148,149,162,163,164,165,166,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,210,],[-56,-56,-111,-109,159,-124,-125,-127,-128,-134,-108,-110,-133,-136,-137,-138,-139,-140,-141,159,-109,-111,-131,-132,-126,-111,-134,159,159,159,159,-112,-113,-114,-115,159,159,-118,-119,-120,-121,159,159,159,-135,]),'EQ':([35,79,81,83,86,87,88,90,91,92,95,96,97,98,99,100,101,102,103,137,138,139,148,149,162,163,164,165,166,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,210,],[-56,-56,-111,-109,160,-124,-125,-127,-128,-134,-108,-110,-133,-136,-137,-138,-139,-140,-141,160,-109,-111,-131,-132,-126,-111,-134,160,160,160,160,-112,-113,-114,-115,160,160,-118,-119,-120,-121,-122,-123,160,-135,]),'NEQ':([35,79,81,83,86,87,88,90,91,92,95,96,97,98,99,100,101,102,103,137,138,139,148,149,162,163,164,165,166,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,210,],[-56,-56,-111,-109,161,-124,-125,-127,-128,-134,-108,-110,-133,-136,-137,-138,-139,-140,-141,161,-109,-111,-131,-132,-126,-111,-134,161,161,161,161,-112,-113,-114,-115,161,161,-118,-119,-120,-121,-122,-123,161,-135,]),'TIMES_ASSIGN':([35,79,81,85,92,139,210,],[-56,-56,-100,143,-101,-100,-135,]),'DIVIDE_ASSIGN':([35,79,81,85,92,139,210,],[-56,-56,-100,144,-101,-100,-135,]),'REMAINDER_ASSIGN':([35,79,81,85,92,139,210,],[-56,-56,-100,145,-101,-100,-135,]),'PLUS_ASSIGN':([35,79,81,85,92,139,210,],[-56,-56,-100,146,-101,-100,-135,]),'MINUS_ASSIGN':([35,79,81,85,92,139,210,],[-56,-56,-100,147,-101,-100,-135,]),')':([35,55,56,87,88,90,91,92,95,96,97,98,99,100,101,102,103,113,114,115,116,118,123,131,135,136,137,138,139,148,149,162,163,164,165,166,175,178,179,182,184,188,189,190,191,192,193,194,195,196,197,198,199,200,204,210,214,220,],[-56,-57,-57,-124,-125,-127,-128,-134,-108,-110,-133,-136,-137,-138,-139,-140,-141,173,-27,-28,-31,176,-30,183,-96,-97,-98,-109,-111,-131,-132,-126,-111,-134,-129,-130,-29,205,206,208,-84,-99,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-32,-135,-85,223,]),']':([35,87,88,90,91,95,96,97,98,99,100,101,102,103,111,138,140,148,149,162,163,164,165,166,171,187,189,190,191,192,193,194,195,196,197,198,199,200,210,],[-56,-124,-125,-127,-128,-108,-110,-133,-136,-137,-138,-139,-140,-141,172,-109,172,-131,-132,-126,-111,-134,-129,-130,203,210,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-135,]),'ELSE':([38,218,],[-13,222,]),'MAIN':([41,43,44,45,46,47,48,49,50,51,52,53,54,110,112,172,203,],[107,-33,-34,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-36,-35,-37,-38,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'type_declarations':([0,],[2,]),'type_declaration':([0,17,],[3,23,]),'class_declaration':([0,17,],[4,4,]),'class_header_name':([0,17,],[5,5,]),'modifiers_opt':([0,17,19,24,],[6,6,31,31,]),'modifiers':([0,17,19,24,39,40,58,127,180,211,212,215,216,224,226,],[7,7,7,7,70,70,70,70,70,70,70,70,70,70,70,]),'empty':([0,17,19,24,55,56,80,],[8,8,8,8,115,115,134,]),'modifier':([0,7,17,19,24,39,40,58,70,127,180,211,212,215,216,224,226,],[9,22,9,9,9,9,9,9,22,9,9,9,9,9,9,9,9,]),'class_body':([5,],[18,]),'opening_bracket':([5,29,30,76,205,206,222,],[19,39,40,127,211,212,224,]),'classbodydecllist':([19,],[24,]),'classbodydecl':([19,24,],[25,37,]),'method_declaration':([19,24,],[26,26,]),'tmain':([19,24,],[27,27,]),'field_declartaion':([19,24,],[28,28,]),'method_header':([19,24,],[29,29,]),'tmain_header':([19,24,],[30,30,]),'method_header_name':([19,24,],[32,32,]),'tmain_name':([19,24,],[33,33,]),'name':([21,31,39,40,41,55,56,58,69,70,80,89,93,94,117,124,125,126,127,131,140,141,150,151,152,153,154,155,156,157,158,159,160,161,169,170,174,180,186,209,211,212,215,216,217,224,226,],[34,42,81,81,106,42,42,81,123,42,139,163,163,163,123,123,139,139,81,139,163,163,163,163,163,163,163,163,163,163,163,163,163,163,123,163,42,81,163,139,81,81,81,81,139,81,81,]),'closing_bracket':([24,57,104,180,215,216,226,],[36,119,167,207,218,219,227,]),'type':([31,39,40,55,56,58,70,127,174,180,211,212,215,216,224,226,],[41,69,69,117,117,69,124,69,117,69,69,69,69,69,69,69,]),'primitive_type':([31,39,40,55,56,58,70,127,174,180,211,212,215,216,224,226,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'array_type':([31,39,40,55,56,58,70,127,174,180,211,212,215,216,224,226,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'method_body':([39,40,],[57,104,]),'block_statements':([39,40,127,211,212,224,],[58,58,180,215,216,226,]),'block_statement':([39,40,58,127,180,211,212,215,216,224,226,],[59,59,120,59,120,59,59,120,120,59,120,]),'local_variable_declaration_statement':([39,40,58,127,180,211,212,215,216,224,226,],[60,60,60,60,60,60,60,60,60,60,60,]),'statement':([39,40,58,127,180,211,212,215,216,224,226,],[61,61,61,61,61,61,61,61,61,61,61,]),'local_variable_declaration':([39,40,58,127,180,211,212,215,216,224,226,],[62,62,62,62,62,62,62,62,62,62,62,]),'other_statement':([39,40,58,127,180,211,212,215,216,224,226,],[64,64,64,64,64,64,64,64,64,64,64,]),'if_then_statement':([39,40,58,127,180,211,212,215,216,224,226,],[65,65,65,65,65,65,65,65,65,65,65,]),'if_then_else_statement':([39,40,58,127,180,211,212,215,216,224,226,],[66,66,66,66,66,66,66,66,66,66,66,]),'while_statement':([39,40,58,127,180,211,212,215,216,224,226,],[67,67,67,67,67,67,67,67,67,67,67,]),'do_while_statement':([39,40,58,127,180,211,212,215,216,224,226,],[68,68,68,68,68,68,68,68,68,68,68,]),'expression_statement':([39,40,58,127,180,211,212,215,216,224,226,],[71,71,71,71,71,71,71,71,71,71,71,]),'break_statement':([39,40,58,127,180,211,212,215,216,224,226,],[72,72,72,72,72,72,72,72,72,72,72,]),'return_statement':([39,40,58,127,180,211,212,215,216,224,226,],[73,73,73,73,73,73,73,73,73,73,73,]),'statement_expression':([39,40,58,127,180,211,212,215,216,224,226,],[77,77,77,77,77,77,77,77,77,77,77,]),'assignment':([39,40,58,80,125,126,127,131,180,209,211,212,215,216,217,224,226,],[82,82,82,136,136,136,82,136,82,136,82,82,82,82,136,82,82,]),'unary_expression':([39,40,58,80,89,93,94,125,126,127,131,140,141,150,151,152,153,154,155,156,157,158,159,160,161,170,180,186,209,211,212,215,216,217,224,226,],[83,83,83,138,138,138,138,138,138,83,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,83,138,138,83,83,83,83,138,83,83,]),'method_invocation':([39,40,58,127,180,211,212,215,216,224,226,],[84,84,84,84,84,84,84,84,84,84,84,]),'Location':([39,40,58,80,125,126,127,131,180,209,211,212,215,216,217,224,226,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'Expr':([39,40,58,80,89,93,94,125,126,127,131,140,141,150,151,152,153,154,155,156,157,158,159,160,161,170,180,186,209,211,212,215,216,217,224,226,],[86,86,86,137,162,165,166,137,137,86,137,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,86,187,137,86,86,86,86,137,86,86,]),'pre_increment_expression':([39,40,58,80,89,93,94,125,126,127,131,140,141,150,151,152,153,154,155,156,157,158,159,160,161,170,180,186,209,211,212,215,216,217,224,226,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'pre_decrement_expression':([39,40,58,80,89,93,94,125,126,127,131,140,141,150,151,152,153,154,155,156,157,158,159,160,161,170,180,186,209,211,212,215,216,217,224,226,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'post_increment_expression':([39,40,58,80,89,93,94,125,126,127,131,140,141,150,151,152,153,154,155,156,157,158,159,160,161,170,180,186,209,211,212,215,216,217,224,226,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'post_decrement_expression':([39,40,58,80,89,93,94,125,126,127,131,140,141,150,151,152,153,154,155,156,157,158,159,160,161,170,180,186,209,211,212,215,216,217,224,226,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'array_access':([39,40,58,80,89,93,94,125,126,127,131,140,141,150,151,152,153,154,155,156,157,158,159,160,161,170,180,186,209,211,212,215,216,217,224,226,],[92,92,92,92,164,164,164,92,92,92,92,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,92,164,92,92,92,92,92,92,92,92,]),'exprbinaryexpr':([39,40,58,80,89,93,94,125,126,127,131,140,141,150,151,152,153,154,155,156,157,158,159,160,161,170,180,186,209,211,212,215,216,217,224,226,],[95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,]),'primary':([39,40,58,80,89,93,94,125,126,127,131,140,141,150,151,152,153,154,155,156,157,158,159,160,161,170,180,186,209,211,212,215,216,217,224,226,],[96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,]),'literal':([39,40,58,80,89,93,94,125,126,127,131,140,141,150,151,152,153,154,155,156,157,158,159,160,161,170,180,186,209,211,212,215,216,217,224,226,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'variable_declarators':([41,69,124,],[105,122,177,]),'variable_declarator':([41,69,124,169,],[108,108,108,201,]),'variable_declarator_id':([41,69,117,124,169,],[109,109,175,109,109,]),'dims':([42,43,81,],[110,112,110,]),'formal_parameter_list_opt':([55,56,],[113,118,]),'formal_parameter_list':([55,56,],[114,114,]),'formal_parameter':([55,56,174,],[116,116,204,]),'expression_opt':([80,],[132,]),'expression':([80,125,126,131,209,217,],[133,178,179,184,214,220,]),'assignment_expression':([80,125,126,131,209,217,],[135,135,135,135,135,135,]),'assignment_operator':([85,],[141,]),'argument_list':([131,],[182,]),'else':([218,],[221,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> type_declarations','start',1,'p_start','parser.py',31),
  ('type_declarations -> type_declaration','type_declarations',1,'p_type_declarations','parser.py',37),
  ('type_declarations -> type_declarations , type_declaration','type_declarations',3,'p_type_declarations','parser.py',38),
  ('type_declaration -> class_declaration','type_declaration',1,'p_type_declarations','parser.py',40),
  ('class_declaration -> class_header_name class_body','class_declaration',2,'p_class_declaration','parser.py',45),
  ('class_header_name -> modifiers_opt CLASS name','class_header_name',3,'p_class_header','parser.py',51),
  ('modifiers_opt -> modifiers','modifiers_opt',1,'p_modifiers_opt','parser.py',59),
  ('modifiers_opt -> empty','modifiers_opt',1,'p_modifiers_opt','parser.py',60),
  ('modifiers -> modifier','modifiers',1,'p_modifiers_opt','parser.py',61),
  ('modifiers -> modifiers modifier','modifiers',2,'p_modifiers_opt','parser.py',62),
  ('class_body -> opening_bracket classbodydecllist closing_bracket','class_body',3,'p_class_body','parser.py',68),
  ('opening_bracket -> {','opening_bracket',1,'p_class_body','parser.py',69),
  ('closing_bracket -> }','closing_bracket',1,'p_class_body','parser.py',70),
  ('tmain -> tmain_header opening_bracket method_body closing_bracket','tmain',4,'p_main_func','parser.py',87),
  ('tmain_header -> tmain_name ( formal_parameter_list_opt )','tmain_header',4,'p_main_head','parser.py',93),
  ('tmain_name -> modifiers_opt type MAIN','tmain_name',3,'p_main_name','parser.py',99),
  ('classbodydecllist -> classbodydecl','classbodydecllist',1,'p_classbodydecllist','parser.py',105),
  ('classbodydecllist -> classbodydecllist classbodydecl','classbodydecllist',2,'p_classbodydecllist','parser.py',106),
  ('classbodydecl -> method_declaration','classbodydecl',1,'p_singleclassbody','parser.py',113),
  ('classbodydecl -> tmain','classbodydecl',1,'p_singleclassbody','parser.py',114),
  ('classbodydecl -> field_declartaion','classbodydecl',1,'p_singleclassbody','parser.py',115),
  ('field_declartaion -> modifiers_opt type variable_declarators ;','field_declartaion',4,'p_field_declartaion','parser.py',120),
  ('method_declaration -> method_header opening_bracket method_body closing_bracket','method_declaration',4,'p_method_declaration','parser.py',130),
  ('method_header -> method_header_name ( formal_parameter_list_opt )','method_header',4,'p_method_header','parser.py',137),
  ('method_header_name -> modifiers_opt type name','method_header_name',3,'p_method_name','parser.py',143),
  ('method_body -> block_statements','method_body',1,'p_method_name','parser.py',144),
  ('formal_parameter_list_opt -> formal_parameter_list','formal_parameter_list_opt',1,'p_method_name','parser.py',145),
  ('formal_parameter_list_opt -> empty','formal_parameter_list_opt',1,'p_method_name','parser.py',146),
  ('formal_parameter -> type variable_declarator_id','formal_parameter',2,'p_method_name','parser.py',147),
  ('variable_declarator_id -> name','variable_declarator_id',1,'p_method_name','parser.py',148),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formalparamlist','parser.py',169),
  ('formal_parameter_list -> formal_parameter_list , formal_parameter','formal_parameter_list',3,'p_formalparamlist','parser.py',170),
  ('type -> primitive_type','type',1,'p_type','parser.py',175),
  ('type -> array_type','type',1,'p_type','parser.py',176),
  ('array_type -> primitive_type dims','array_type',2,'p_type','parser.py',177),
  ('array_type -> name dims','array_type',2,'p_type','parser.py',178),
  ('dims -> [ ]','dims',2,'p_type','parser.py',179),
  ('dims -> dims [ ]','dims',3,'p_type','parser.py',180),
  ('primitive_type -> BOOLEAN','primitive_type',1,'p_type','parser.py',181),
  ('primitive_type -> VOID','primitive_type',1,'p_type','parser.py',182),
  ('primitive_type -> BYTE','primitive_type',1,'p_type','parser.py',183),
  ('primitive_type -> SHORT','primitive_type',1,'p_type','parser.py',184),
  ('primitive_type -> INT','primitive_type',1,'p_type','parser.py',185),
  ('primitive_type -> LONG','primitive_type',1,'p_type','parser.py',186),
  ('primitive_type -> CHAR','primitive_type',1,'p_type','parser.py',187),
  ('primitive_type -> FLOAT','primitive_type',1,'p_type','parser.py',188),
  ('primitive_type -> DOUBLE','primitive_type',1,'p_type','parser.py',189),
  ('primitive_type -> STRING','primitive_type',1,'p_type','parser.py',190),
  ('modifier -> PUBLIC','modifier',1,'p_modifier_type','parser.py',195),
  ('modifier -> PROTECTED','modifier',1,'p_modifier_type','parser.py',196),
  ('modifier -> PRIVATE','modifier',1,'p_modifier_type','parser.py',197),
  ('modifier -> STATIC','modifier',1,'p_modifier_type','parser.py',198),
  ('modifier -> ABSTRACT','modifier',1,'p_modifier_type','parser.py',199),
  ('modifier -> FINAL','modifier',1,'p_modifier_type','parser.py',200),
  ('modifier -> NATIVE','modifier',1,'p_modifier_type','parser.py',201),
  ('name -> NAME','name',1,'p_name','parser.py',206),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',212),
  ('block_statements -> block_statement','block_statements',1,'p_blocks','parser.py',218),
  ('block_statements -> block_statements block_statement','block_statements',2,'p_blocks','parser.py',219),
  ('block_statement -> local_variable_declaration_statement','block_statement',1,'p_block','parser.py',227),
  ('block_statement -> statement','block_statement',1,'p_block','parser.py',228),
  ('local_variable_declaration_statement -> local_variable_declaration ;','local_variable_declaration_statement',2,'p_local_variable_declaration','parser.py',236),
  ('local_variable_declaration -> type variable_declarators','local_variable_declaration',2,'p_local_variable_declaration','parser.py',237),
  ('local_variable_declaration -> modifiers type variable_declarators','local_variable_declaration',3,'p_local_variable_declaration','parser.py',238),
  ('variable_declarators -> variable_declarator','variable_declarators',1,'p_variable_declarations','parser.py',249),
  ('variable_declarators -> variable_declarators , variable_declarator','variable_declarators',3,'p_variable_declarations','parser.py',250),
  ('variable_declarator -> variable_declarator_id','variable_declarator',1,'p_variable_declarations','parser.py',251),
  ('variable_declarator -> variable_declarator_id ASSIGN Expr','variable_declarator',3,'p_variable_declarations','parser.py',252),
  ('statement -> other_statement','statement',1,'p_statement','parser.py',265),
  ('statement -> if_then_statement','statement',1,'p_statement','parser.py',266),
  ('statement -> if_then_else_statement','statement',1,'p_statement','parser.py',267),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',268),
  ('statement -> do_while_statement','statement',1,'p_statement','parser.py',269),
  ('other_statement -> expression_statement','other_statement',1,'p_other_statement','parser.py',275),
  ('other_statement -> break_statement','other_statement',1,'p_other_statement','parser.py',276),
  ('other_statement -> return_statement','other_statement',1,'p_other_statement','parser.py',277),
  ('other_statement -> ;','other_statement',1,'p_other_statement','parser.py',278),
  ('expression_statement -> statement_expression ;','expression_statement',2,'p_expression_statement','parser.py',284),
  ('statement_expression -> assignment','statement_expression',1,'p_expression_statement','parser.py',285),
  ('statement_expression -> unary_expression','statement_expression',1,'p_expression_statement','parser.py',286),
  ('statement_expression -> method_invocation','statement_expression',1,'p_expression_statement','parser.py',287),
  ('method_invocation -> NAME ( argument_list )','method_invocation',4,'p_method_invocation','parser.py',293),
  ('method_invocation -> NAME ( )','method_invocation',3,'p_method_invocation','parser.py',294),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',300),
  ('argument_list -> argument_list , expression','argument_list',3,'p_argument_list','parser.py',301),
  ('break_statement -> BREAK ;','break_statement',2,'p_break_statement','parser.py',307),
  ('break_statement -> BREAK NAME ;','break_statement',3,'p_break_statement','parser.py',308),
  ('return_statement -> RETURN expression_opt ;','return_statement',3,'p_return_statement','parser.py',314),
  ('expression_opt -> expression','expression_opt',1,'p_return_statement','parser.py',315),
  ('expression_opt -> empty','expression_opt',1,'p_return_statement','parser.py',316),
  ('if_then_statement -> IF ( expression ) opening_bracket block_statements closing_bracket','if_then_statement',7,'p_if_statements','parser.py',322),
  ('if_then_else_statement -> IF ( expression ) opening_bracket block_statements closing_bracket else','if_then_else_statement',8,'p_if_then_else_statements','parser.py',328),
  ('else -> ELSE opening_bracket block_statements closing_bracket','else',4,'p_if_then_else_statements','parser.py',329),
  ('while_statement -> WHILE ( expression ) opening_bracket block_statements closing_bracket','while_statement',7,'p_while_statements','parser.py',341),
  ('do_while_statement -> DO opening_bracket block_statements closing_bracket WHILE ( expression ) ;','do_while_statement',9,'p_do_while_statement','parser.py',349),
  ('expression -> assignment_expression','expression',1,'p_expressions','parser.py',358),
  ('assignment_expression -> assignment','assignment_expression',1,'p_assignment_expression','parser.py',365),
  ('assignment_expression -> Expr','assignment_expression',1,'p_assignment_expression','parser.py',366),
  ('assignment -> Location assignment_operator Expr','assignment',3,'p_assignment_expression','parser.py',367),
  ('Location -> name','Location',1,'p_location','parser.py',379),
  ('Location -> array_access','Location',1,'p_location','parser.py',380),
  ('assignment_operator -> ASSIGN','assignment_operator',1,'p_assign_op','parser.py',384),
  ('assignment_operator -> TIMES_ASSIGN','assignment_operator',1,'p_assign_op','parser.py',385),
  ('assignment_operator -> DIVIDE_ASSIGN','assignment_operator',1,'p_assign_op','parser.py',386),
  ('assignment_operator -> REMAINDER_ASSIGN','assignment_operator',1,'p_assign_op','parser.py',387),
  ('assignment_operator -> PLUS_ASSIGN','assignment_operator',1,'p_assign_op','parser.py',388),
  ('assignment_operator -> MINUS_ASSIGN','assignment_operator',1,'p_assign_op','parser.py',389),
  ('Expr -> exprbinaryexpr','Expr',1,'p_conditional_expression','parser.py',395),
  ('Expr -> unary_expression','Expr',1,'p_conditional_expression','parser.py',396),
  ('Expr -> primary','Expr',1,'p_conditional_expression','parser.py',397),
  ('Expr -> name','Expr',1,'p_conditional_expression','parser.py',398),
  ('exprbinaryexpr -> Expr ADD Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',404),
  ('exprbinaryexpr -> Expr SUB Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',405),
  ('exprbinaryexpr -> Expr MUL Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',406),
  ('exprbinaryexpr -> Expr DIV Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',407),
  ('exprbinaryexpr -> Expr AND Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',408),
  ('exprbinaryexpr -> Expr OR Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',409),
  ('exprbinaryexpr -> Expr LESS Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',410),
  ('exprbinaryexpr -> Expr LTEQ Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',411),
  ('exprbinaryexpr -> Expr GREATER Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',412),
  ('exprbinaryexpr -> Expr GTEQ Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',413),
  ('exprbinaryexpr -> Expr EQ Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',414),
  ('exprbinaryexpr -> Expr NEQ Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',415),
  ('unary_expression -> pre_increment_expression','unary_expression',1,'p_unary_expression','parser.py',422),
  ('unary_expression -> pre_decrement_expression','unary_expression',1,'p_unary_expression','parser.py',423),
  ('unary_expression -> UMINUS Expr','unary_expression',2,'p_unary_expression','parser.py',424),
  ('unary_expression -> post_increment_expression','unary_expression',1,'p_unary_expression','parser.py',425),
  ('unary_expression -> post_decrement_expression','unary_expression',1,'p_unary_expression','parser.py',426),
  ('pre_increment_expression -> PLUSPLUS Expr','pre_increment_expression',2,'p_pre_expressions','parser.py',434),
  ('pre_decrement_expression -> MINUSMINUS Expr','pre_decrement_expression',2,'p_pre_expressions','parser.py',435),
  ('post_increment_expression -> Expr PLUSPLUS','post_increment_expression',2,'p_post_expressions','parser.py',441),
  ('post_decrement_expression -> Expr MINUSMINUS','post_decrement_expression',2,'p_post_expressions','parser.py',442),
  ('primary -> literal','primary',1,'p_primary','parser.py',448),
  ('primary -> array_access','primary',1,'p_primary','parser.py',449),
  ('array_access -> name [ Expr ]','array_access',4,'p_primary','parser.py',450),
  ('literal -> NUM','literal',1,'p_literal','parser.py',457),
  ('literal -> CHAR_LITERAL','literal',1,'p_literal','parser.py',458),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','parser.py',459),
  ('literal -> TRUE','literal',1,'p_literal','parser.py',460),
  ('literal -> FALSE','literal',1,'p_literal','parser.py',461),
  ('literal -> NULL','literal',1,'p_literal','parser.py',462),
]

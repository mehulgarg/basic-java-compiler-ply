Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> type_declarations
Rule 2     type_declarations -> type_declaration
Rule 3     type_declarations -> type_declarations , type_declaration
Rule 4     type_declaration -> class_declaration
Rule 5     class_declaration -> class_header_name class_body
Rule 6     class_header_name -> modifiers_opt CLASS name
Rule 7     modifiers_opt -> modifiers
Rule 8     modifiers_opt -> empty
Rule 9     modifiers -> modifier
Rule 10    modifiers -> modifiers modifier
Rule 11    class_body -> opening_bracket classbodydecllist closing_bracket
Rule 12    opening_bracket -> {
Rule 13    closing_bracket -> }
Rule 14    tmain -> tmain_header opening_bracket method_body closing_bracket
Rule 15    tmain_header -> tmain_name ( formal_parameter_list_opt )
Rule 16    tmain_name -> modifiers_opt type MAIN
Rule 17    classbodydecllist -> classbodydecl
Rule 18    classbodydecllist -> classbodydecllist classbodydecl
Rule 19    classbodydecl -> method_declaration
Rule 20    classbodydecl -> tmain
Rule 21    classbodydecl -> field_declartaion
Rule 22    field_declartaion -> modifiers_opt type variable_declarators ;
Rule 23    method_declaration -> method_header opening_bracket method_body closing_bracket
Rule 24    method_header -> method_header_name ( formal_parameter_list_opt )
Rule 25    method_header_name -> modifiers_opt type name
Rule 26    method_body -> block_statements
Rule 27    formal_parameter -> type variable_declarator_id
Rule 28    variable_declarator_id -> name
Rule 29    formal_parameter_list_opt -> formal_parameter_list
Rule 30    formal_parameter_list_opt -> empty
Rule 31    formal_parameter_list -> formal_parameter
Rule 32    formal_parameter_list -> formal_parameter_list , formal_parameter
Rule 33    type -> primitive_type
Rule 34    type -> array_type
Rule 35    array_type -> primitive_type dims
Rule 36    array_type -> name dims
Rule 37    dims -> [ ]
Rule 38    dims -> dims [ ]
Rule 39    primitive_type -> BOOLEAN
Rule 40    primitive_type -> VOID
Rule 41    primitive_type -> BYTE
Rule 42    primitive_type -> SHORT
Rule 43    primitive_type -> INT
Rule 44    primitive_type -> LONG
Rule 45    primitive_type -> CHAR
Rule 46    primitive_type -> FLOAT
Rule 47    primitive_type -> DOUBLE
Rule 48    primitive_type -> STRING
Rule 49    modifier -> PUBLIC
Rule 50    modifier -> PROTECTED
Rule 51    modifier -> PRIVATE
Rule 52    modifier -> STATIC
Rule 53    modifier -> ABSTRACT
Rule 54    modifier -> FINAL
Rule 55    modifier -> NATIVE
Rule 56    name -> NAME
Rule 57    empty -> <empty>
Rule 58    block_statements -> block_statement
Rule 59    block_statements -> block_statements block_statement
Rule 60    block_statement -> local_variable_declaration_statement
Rule 61    block_statement -> statement
Rule 62    local_variable_declaration_statement -> local_variable_declaration ;
Rule 63    local_variable_declaration -> type variable_declarators
Rule 64    local_variable_declaration -> modifiers type variable_declarators
Rule 65    variable_declarators -> variable_declarator
Rule 66    variable_declarators -> variable_declarators , variable_declarator
Rule 67    variable_declarator -> variable_declarator_id
Rule 68    variable_declarator -> variable_declarator_id ASSIGN Expr
Rule 69    statement -> other_statement
Rule 70    statement -> if_then_statement
Rule 71    statement -> if_then_else_statement
Rule 72    statement -> while_statement
Rule 73    statement -> do_while_statement
Rule 74    other_statement -> expression_statement
Rule 75    other_statement -> break_statement
Rule 76    other_statement -> return_statement
Rule 77    other_statement -> ;
Rule 78    expression_statement -> statement_expression ;
Rule 79    statement_expression -> assignment
Rule 80    statement_expression -> unary_expression
Rule 81    statement_expression -> method_invocation
Rule 82    method_invocation -> NAME ( argument_list )
Rule 83    method_invocation -> NAME ( )
Rule 84    argument_list -> expression
Rule 85    argument_list -> argument_list , expression
Rule 86    break_statement -> BREAK ;
Rule 87    break_statement -> BREAK NAME ;
Rule 88    return_statement -> RETURN expression_opt ;
Rule 89    expression_opt -> expression
Rule 90    expression_opt -> empty
Rule 91    if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket
Rule 92    closing_parantheses_if -> )
Rule 93    if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else
Rule 94    else -> else_stmt opening_bracket block_statements closing_bracket
Rule 95    else_stmt -> ELSE
Rule 96    while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket
Rule 97    closing_parantheses -> )
Rule 98    while -> WHILE
Rule 99    do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ;
Rule 100   do -> DO
Rule 101   expression -> assignment_expression
Rule 102   assignment_expression -> assignment
Rule 103   assignment_expression -> Expr
Rule 104   assignment -> Location assignment_operator Expr
Rule 105   Location -> name
Rule 106   Location -> array_access
Rule 107   assignment_operator -> ASSIGN
Rule 108   assignment_operator -> TIMES_ASSIGN
Rule 109   assignment_operator -> DIVIDE_ASSIGN
Rule 110   assignment_operator -> REMAINDER_ASSIGN
Rule 111   assignment_operator -> PLUS_ASSIGN
Rule 112   assignment_operator -> MINUS_ASSIGN
Rule 113   Expr -> exprbinaryexpr
Rule 114   Expr -> unary_expression
Rule 115   Expr -> literal
Rule 116   Expr -> name
Rule 117   Expr -> array_access
Rule 118   exprbinaryexpr -> Expr ADD Expr
Rule 119   exprbinaryexpr -> Expr SUB Expr
Rule 120   exprbinaryexpr -> Expr MUL Expr
Rule 121   exprbinaryexpr -> Expr DIV Expr
Rule 122   exprbinaryexpr -> Expr AND Expr
Rule 123   exprbinaryexpr -> Expr OR Expr
Rule 124   exprbinaryexpr -> Expr LESS Expr
Rule 125   exprbinaryexpr -> Expr LTEQ Expr
Rule 126   exprbinaryexpr -> Expr GREATER Expr
Rule 127   exprbinaryexpr -> Expr GTEQ Expr
Rule 128   exprbinaryexpr -> Expr EQ Expr
Rule 129   exprbinaryexpr -> Expr NEQ Expr
Rule 130   unary_expression -> pre_increment_expression
Rule 131   unary_expression -> pre_decrement_expression
Rule 132   unary_expression -> UMINUS Expr
Rule 133   unary_expression -> post_increment_expression
Rule 134   unary_expression -> post_decrement_expression
Rule 135   pre_increment_expression -> PLUSPLUS Expr
Rule 136   pre_decrement_expression -> MINUSMINUS Expr
Rule 137   post_increment_expression -> Expr PLUSPLUS
Rule 138   post_decrement_expression -> Expr MINUSMINUS
Rule 139   array_access -> name [ Expr ]
Rule 140   literal -> NUM
Rule 141   literal -> CHAR_LITERAL
Rule 142   literal -> STRING_LITERAL
Rule 143   literal -> TRUE
Rule 144   literal -> FALSE
Rule 145   literal -> NULL

Terminals, with rules where they appear

(                    : 15 24 82 83 91 93 96 99
)                    : 15 24 82 83 92 97 99
,                    : 3 32 66 85
;                    : 22 62 77 78 86 87 88 99
ABSTRACT             : 53
ADD                  : 118
AND                  : 122
ASSIGN               : 68 107
BOOLEAN              : 39
BREAK                : 86 87
BYTE                 : 41
CHAR                 : 45
CHAR_LITERAL         : 141
CLASS                : 6
DIV                  : 121
DIVIDE_ASSIGN        : 109
DO                   : 100
DOUBLE               : 47
ELSE                 : 95
EQ                   : 128
FALSE                : 144
FINAL                : 54
FLOAT                : 46
GREATER              : 126
GTEQ                 : 127
IF                   : 91 93
INT                  : 43
LESS                 : 124
LONG                 : 44
LTEQ                 : 125
MAIN                 : 16
MINUSMINUS           : 136 138
MINUS_ASSIGN         : 112
MUL                  : 120
NAME                 : 56 82 83 87
NATIVE               : 55
NEQ                  : 129
NULL                 : 145
NUM                  : 140
OR                   : 123
PLUSPLUS             : 135 137
PLUS_ASSIGN          : 111
PRIVATE              : 51
PROTECTED            : 50
PUBLIC               : 49
REMAINDER_ASSIGN     : 110
RETURN               : 88
SHORT                : 42
STATIC               : 52
STRING               : 48
STRING_LITERAL       : 142
SUB                  : 119
TIMES_ASSIGN         : 108
TRUE                 : 143
UMINUS               : 132
VOID                 : 40
WHILE                : 98 99
[                    : 37 38 139
]                    : 37 38 139
error                : 
{                    : 12
}                    : 13

Nonterminals, with rules where they appear

Expr                 : 68 103 104 118 118 119 119 120 120 121 121 122 122 123 123 124 124 125 125 126 126 127 127 128 128 129 129 132 135 136 137 138 139
Location             : 104
argument_list        : 82 85
array_access         : 106 117
array_type           : 34
assignment           : 79 102
assignment_expression : 101
assignment_operator  : 104
block_statement      : 58 59
block_statements     : 26 59 91 93 94 96 99
break_statement      : 75
class_body           : 5
class_declaration    : 4
class_header_name    : 5
classbodydecl        : 17 18
classbodydecllist    : 11 18
closing_bracket      : 11 14 23 91 93 94 96 99
closing_parantheses  : 96
closing_parantheses_if : 91 93
dims                 : 35 36 38
do                   : 99
do_while_statement   : 73
else                 : 93
else_stmt            : 94
empty                : 8 30 90
exprbinaryexpr       : 113
expression           : 84 85 89 91 93 96 99
expression_opt       : 88
expression_statement : 74
field_declartaion    : 21
formal_parameter     : 31 32
formal_parameter_list : 29 32
formal_parameter_list_opt : 15 24
if_then_else_statement : 71
if_then_statement    : 70
literal              : 115
local_variable_declaration : 62
local_variable_declaration_statement : 60
method_body          : 14 23
method_declaration   : 19
method_header        : 23
method_header_name   : 24
method_invocation    : 81
modifier             : 9 10
modifiers            : 7 10 64
modifiers_opt        : 6 16 22 25
name                 : 6 25 28 36 105 116 139
opening_bracket      : 11 14 23 91 93 94 96 99
other_statement      : 69
post_decrement_expression : 134
post_increment_expression : 133
pre_decrement_expression : 131
pre_increment_expression : 130
primitive_type       : 33 35
return_statement     : 76
start                : 0
statement            : 61
statement_expression : 78
tmain                : 20
tmain_header         : 14
tmain_name           : 15
type                 : 16 22 25 27 63 64
type_declaration     : 2 3
type_declarations    : 1 3
unary_expression     : 80 114
variable_declarator  : 65 66
variable_declarator_id : 27 67 68
variable_declarators : 22 63 64 66
while                : 96
while_statement      : 72

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . type_declarations
    (2) type_declarations -> . type_declaration
    (3) type_declarations -> . type_declarations , type_declaration
    (4) type_declaration -> . class_declaration
    (5) class_declaration -> . class_header_name class_body
    (6) class_header_name -> . modifiers_opt CLASS name
    (7) modifiers_opt -> . modifiers
    (8) modifiers_opt -> . empty
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (57) empty -> .
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE

    CLASS           reduce using rule 57 (empty -> .)
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16

    start                          shift and go to state 1
    type_declarations              shift and go to state 2
    type_declaration               shift and go to state 3
    class_declaration              shift and go to state 4
    class_header_name              shift and go to state 5
    modifiers_opt                  shift and go to state 6
    modifiers                      shift and go to state 7
    empty                          shift and go to state 8
    modifier                       shift and go to state 9

state 1

    (0) S' -> start .



state 2

    (1) start -> type_declarations .
    (3) type_declarations -> type_declarations . , type_declaration

    $end            reduce using rule 1 (start -> type_declarations .)
    ,               shift and go to state 17


state 3

    (2) type_declarations -> type_declaration .

    ,               reduce using rule 2 (type_declarations -> type_declaration .)
    $end            reduce using rule 2 (type_declarations -> type_declaration .)


state 4

    (4) type_declaration -> class_declaration .

    ,               reduce using rule 4 (type_declaration -> class_declaration .)
    $end            reduce using rule 4 (type_declaration -> class_declaration .)


state 5

    (5) class_declaration -> class_header_name . class_body
    (11) class_body -> . opening_bracket classbodydecllist closing_bracket
    (12) opening_bracket -> . {

    {               shift and go to state 20

    class_body                     shift and go to state 18
    opening_bracket                shift and go to state 19

state 6

    (6) class_header_name -> modifiers_opt . CLASS name

    CLASS           shift and go to state 21


state 7

    (7) modifiers_opt -> modifiers .
    (10) modifiers -> modifiers . modifier
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE

    CLASS           reduce using rule 7 (modifiers_opt -> modifiers .)
    BOOLEAN         reduce using rule 7 (modifiers_opt -> modifiers .)
    VOID            reduce using rule 7 (modifiers_opt -> modifiers .)
    BYTE            reduce using rule 7 (modifiers_opt -> modifiers .)
    SHORT           reduce using rule 7 (modifiers_opt -> modifiers .)
    INT             reduce using rule 7 (modifiers_opt -> modifiers .)
    LONG            reduce using rule 7 (modifiers_opt -> modifiers .)
    CHAR            reduce using rule 7 (modifiers_opt -> modifiers .)
    FLOAT           reduce using rule 7 (modifiers_opt -> modifiers .)
    DOUBLE          reduce using rule 7 (modifiers_opt -> modifiers .)
    STRING          reduce using rule 7 (modifiers_opt -> modifiers .)
    NAME            reduce using rule 7 (modifiers_opt -> modifiers .)
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16

    modifier                       shift and go to state 22

state 8

    (8) modifiers_opt -> empty .

    CLASS           reduce using rule 8 (modifiers_opt -> empty .)
    BOOLEAN         reduce using rule 8 (modifiers_opt -> empty .)
    VOID            reduce using rule 8 (modifiers_opt -> empty .)
    BYTE            reduce using rule 8 (modifiers_opt -> empty .)
    SHORT           reduce using rule 8 (modifiers_opt -> empty .)
    INT             reduce using rule 8 (modifiers_opt -> empty .)
    LONG            reduce using rule 8 (modifiers_opt -> empty .)
    CHAR            reduce using rule 8 (modifiers_opt -> empty .)
    FLOAT           reduce using rule 8 (modifiers_opt -> empty .)
    DOUBLE          reduce using rule 8 (modifiers_opt -> empty .)
    STRING          reduce using rule 8 (modifiers_opt -> empty .)
    NAME            reduce using rule 8 (modifiers_opt -> empty .)


state 9

    (9) modifiers -> modifier .

    PUBLIC          reduce using rule 9 (modifiers -> modifier .)
    PROTECTED       reduce using rule 9 (modifiers -> modifier .)
    PRIVATE         reduce using rule 9 (modifiers -> modifier .)
    STATIC          reduce using rule 9 (modifiers -> modifier .)
    ABSTRACT        reduce using rule 9 (modifiers -> modifier .)
    FINAL           reduce using rule 9 (modifiers -> modifier .)
    NATIVE          reduce using rule 9 (modifiers -> modifier .)
    CLASS           reduce using rule 9 (modifiers -> modifier .)
    BOOLEAN         reduce using rule 9 (modifiers -> modifier .)
    VOID            reduce using rule 9 (modifiers -> modifier .)
    BYTE            reduce using rule 9 (modifiers -> modifier .)
    SHORT           reduce using rule 9 (modifiers -> modifier .)
    INT             reduce using rule 9 (modifiers -> modifier .)
    LONG            reduce using rule 9 (modifiers -> modifier .)
    CHAR            reduce using rule 9 (modifiers -> modifier .)
    FLOAT           reduce using rule 9 (modifiers -> modifier .)
    DOUBLE          reduce using rule 9 (modifiers -> modifier .)
    STRING          reduce using rule 9 (modifiers -> modifier .)
    NAME            reduce using rule 9 (modifiers -> modifier .)


state 10

    (49) modifier -> PUBLIC .

    PUBLIC          reduce using rule 49 (modifier -> PUBLIC .)
    PROTECTED       reduce using rule 49 (modifier -> PUBLIC .)
    PRIVATE         reduce using rule 49 (modifier -> PUBLIC .)
    STATIC          reduce using rule 49 (modifier -> PUBLIC .)
    ABSTRACT        reduce using rule 49 (modifier -> PUBLIC .)
    FINAL           reduce using rule 49 (modifier -> PUBLIC .)
    NATIVE          reduce using rule 49 (modifier -> PUBLIC .)
    CLASS           reduce using rule 49 (modifier -> PUBLIC .)
    BOOLEAN         reduce using rule 49 (modifier -> PUBLIC .)
    VOID            reduce using rule 49 (modifier -> PUBLIC .)
    BYTE            reduce using rule 49 (modifier -> PUBLIC .)
    SHORT           reduce using rule 49 (modifier -> PUBLIC .)
    INT             reduce using rule 49 (modifier -> PUBLIC .)
    LONG            reduce using rule 49 (modifier -> PUBLIC .)
    CHAR            reduce using rule 49 (modifier -> PUBLIC .)
    FLOAT           reduce using rule 49 (modifier -> PUBLIC .)
    DOUBLE          reduce using rule 49 (modifier -> PUBLIC .)
    STRING          reduce using rule 49 (modifier -> PUBLIC .)
    NAME            reduce using rule 49 (modifier -> PUBLIC .)


state 11

    (50) modifier -> PROTECTED .

    PUBLIC          reduce using rule 50 (modifier -> PROTECTED .)
    PROTECTED       reduce using rule 50 (modifier -> PROTECTED .)
    PRIVATE         reduce using rule 50 (modifier -> PROTECTED .)
    STATIC          reduce using rule 50 (modifier -> PROTECTED .)
    ABSTRACT        reduce using rule 50 (modifier -> PROTECTED .)
    FINAL           reduce using rule 50 (modifier -> PROTECTED .)
    NATIVE          reduce using rule 50 (modifier -> PROTECTED .)
    CLASS           reduce using rule 50 (modifier -> PROTECTED .)
    BOOLEAN         reduce using rule 50 (modifier -> PROTECTED .)
    VOID            reduce using rule 50 (modifier -> PROTECTED .)
    BYTE            reduce using rule 50 (modifier -> PROTECTED .)
    SHORT           reduce using rule 50 (modifier -> PROTECTED .)
    INT             reduce using rule 50 (modifier -> PROTECTED .)
    LONG            reduce using rule 50 (modifier -> PROTECTED .)
    CHAR            reduce using rule 50 (modifier -> PROTECTED .)
    FLOAT           reduce using rule 50 (modifier -> PROTECTED .)
    DOUBLE          reduce using rule 50 (modifier -> PROTECTED .)
    STRING          reduce using rule 50 (modifier -> PROTECTED .)
    NAME            reduce using rule 50 (modifier -> PROTECTED .)


state 12

    (51) modifier -> PRIVATE .

    PUBLIC          reduce using rule 51 (modifier -> PRIVATE .)
    PROTECTED       reduce using rule 51 (modifier -> PRIVATE .)
    PRIVATE         reduce using rule 51 (modifier -> PRIVATE .)
    STATIC          reduce using rule 51 (modifier -> PRIVATE .)
    ABSTRACT        reduce using rule 51 (modifier -> PRIVATE .)
    FINAL           reduce using rule 51 (modifier -> PRIVATE .)
    NATIVE          reduce using rule 51 (modifier -> PRIVATE .)
    CLASS           reduce using rule 51 (modifier -> PRIVATE .)
    BOOLEAN         reduce using rule 51 (modifier -> PRIVATE .)
    VOID            reduce using rule 51 (modifier -> PRIVATE .)
    BYTE            reduce using rule 51 (modifier -> PRIVATE .)
    SHORT           reduce using rule 51 (modifier -> PRIVATE .)
    INT             reduce using rule 51 (modifier -> PRIVATE .)
    LONG            reduce using rule 51 (modifier -> PRIVATE .)
    CHAR            reduce using rule 51 (modifier -> PRIVATE .)
    FLOAT           reduce using rule 51 (modifier -> PRIVATE .)
    DOUBLE          reduce using rule 51 (modifier -> PRIVATE .)
    STRING          reduce using rule 51 (modifier -> PRIVATE .)
    NAME            reduce using rule 51 (modifier -> PRIVATE .)


state 13

    (52) modifier -> STATIC .

    PUBLIC          reduce using rule 52 (modifier -> STATIC .)
    PROTECTED       reduce using rule 52 (modifier -> STATIC .)
    PRIVATE         reduce using rule 52 (modifier -> STATIC .)
    STATIC          reduce using rule 52 (modifier -> STATIC .)
    ABSTRACT        reduce using rule 52 (modifier -> STATIC .)
    FINAL           reduce using rule 52 (modifier -> STATIC .)
    NATIVE          reduce using rule 52 (modifier -> STATIC .)
    CLASS           reduce using rule 52 (modifier -> STATIC .)
    BOOLEAN         reduce using rule 52 (modifier -> STATIC .)
    VOID            reduce using rule 52 (modifier -> STATIC .)
    BYTE            reduce using rule 52 (modifier -> STATIC .)
    SHORT           reduce using rule 52 (modifier -> STATIC .)
    INT             reduce using rule 52 (modifier -> STATIC .)
    LONG            reduce using rule 52 (modifier -> STATIC .)
    CHAR            reduce using rule 52 (modifier -> STATIC .)
    FLOAT           reduce using rule 52 (modifier -> STATIC .)
    DOUBLE          reduce using rule 52 (modifier -> STATIC .)
    STRING          reduce using rule 52 (modifier -> STATIC .)
    NAME            reduce using rule 52 (modifier -> STATIC .)


state 14

    (53) modifier -> ABSTRACT .

    PUBLIC          reduce using rule 53 (modifier -> ABSTRACT .)
    PROTECTED       reduce using rule 53 (modifier -> ABSTRACT .)
    PRIVATE         reduce using rule 53 (modifier -> ABSTRACT .)
    STATIC          reduce using rule 53 (modifier -> ABSTRACT .)
    ABSTRACT        reduce using rule 53 (modifier -> ABSTRACT .)
    FINAL           reduce using rule 53 (modifier -> ABSTRACT .)
    NATIVE          reduce using rule 53 (modifier -> ABSTRACT .)
    CLASS           reduce using rule 53 (modifier -> ABSTRACT .)
    BOOLEAN         reduce using rule 53 (modifier -> ABSTRACT .)
    VOID            reduce using rule 53 (modifier -> ABSTRACT .)
    BYTE            reduce using rule 53 (modifier -> ABSTRACT .)
    SHORT           reduce using rule 53 (modifier -> ABSTRACT .)
    INT             reduce using rule 53 (modifier -> ABSTRACT .)
    LONG            reduce using rule 53 (modifier -> ABSTRACT .)
    CHAR            reduce using rule 53 (modifier -> ABSTRACT .)
    FLOAT           reduce using rule 53 (modifier -> ABSTRACT .)
    DOUBLE          reduce using rule 53 (modifier -> ABSTRACT .)
    STRING          reduce using rule 53 (modifier -> ABSTRACT .)
    NAME            reduce using rule 53 (modifier -> ABSTRACT .)


state 15

    (54) modifier -> FINAL .

    PUBLIC          reduce using rule 54 (modifier -> FINAL .)
    PROTECTED       reduce using rule 54 (modifier -> FINAL .)
    PRIVATE         reduce using rule 54 (modifier -> FINAL .)
    STATIC          reduce using rule 54 (modifier -> FINAL .)
    ABSTRACT        reduce using rule 54 (modifier -> FINAL .)
    FINAL           reduce using rule 54 (modifier -> FINAL .)
    NATIVE          reduce using rule 54 (modifier -> FINAL .)
    CLASS           reduce using rule 54 (modifier -> FINAL .)
    BOOLEAN         reduce using rule 54 (modifier -> FINAL .)
    VOID            reduce using rule 54 (modifier -> FINAL .)
    BYTE            reduce using rule 54 (modifier -> FINAL .)
    SHORT           reduce using rule 54 (modifier -> FINAL .)
    INT             reduce using rule 54 (modifier -> FINAL .)
    LONG            reduce using rule 54 (modifier -> FINAL .)
    CHAR            reduce using rule 54 (modifier -> FINAL .)
    FLOAT           reduce using rule 54 (modifier -> FINAL .)
    DOUBLE          reduce using rule 54 (modifier -> FINAL .)
    STRING          reduce using rule 54 (modifier -> FINAL .)
    NAME            reduce using rule 54 (modifier -> FINAL .)


state 16

    (55) modifier -> NATIVE .

    PUBLIC          reduce using rule 55 (modifier -> NATIVE .)
    PROTECTED       reduce using rule 55 (modifier -> NATIVE .)
    PRIVATE         reduce using rule 55 (modifier -> NATIVE .)
    STATIC          reduce using rule 55 (modifier -> NATIVE .)
    ABSTRACT        reduce using rule 55 (modifier -> NATIVE .)
    FINAL           reduce using rule 55 (modifier -> NATIVE .)
    NATIVE          reduce using rule 55 (modifier -> NATIVE .)
    CLASS           reduce using rule 55 (modifier -> NATIVE .)
    BOOLEAN         reduce using rule 55 (modifier -> NATIVE .)
    VOID            reduce using rule 55 (modifier -> NATIVE .)
    BYTE            reduce using rule 55 (modifier -> NATIVE .)
    SHORT           reduce using rule 55 (modifier -> NATIVE .)
    INT             reduce using rule 55 (modifier -> NATIVE .)
    LONG            reduce using rule 55 (modifier -> NATIVE .)
    CHAR            reduce using rule 55 (modifier -> NATIVE .)
    FLOAT           reduce using rule 55 (modifier -> NATIVE .)
    DOUBLE          reduce using rule 55 (modifier -> NATIVE .)
    STRING          reduce using rule 55 (modifier -> NATIVE .)
    NAME            reduce using rule 55 (modifier -> NATIVE .)


state 17

    (3) type_declarations -> type_declarations , . type_declaration
    (4) type_declaration -> . class_declaration
    (5) class_declaration -> . class_header_name class_body
    (6) class_header_name -> . modifiers_opt CLASS name
    (7) modifiers_opt -> . modifiers
    (8) modifiers_opt -> . empty
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (57) empty -> .
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE

    CLASS           reduce using rule 57 (empty -> .)
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16

    type_declaration               shift and go to state 23
    class_declaration              shift and go to state 4
    class_header_name              shift and go to state 5
    modifiers_opt                  shift and go to state 6
    modifiers                      shift and go to state 7
    empty                          shift and go to state 8
    modifier                       shift and go to state 9

state 18

    (5) class_declaration -> class_header_name class_body .

    ,               reduce using rule 5 (class_declaration -> class_header_name class_body .)
    $end            reduce using rule 5 (class_declaration -> class_header_name class_body .)


state 19

    (11) class_body -> opening_bracket . classbodydecllist closing_bracket
    (17) classbodydecllist -> . classbodydecl
    (18) classbodydecllist -> . classbodydecllist classbodydecl
    (19) classbodydecl -> . method_declaration
    (20) classbodydecl -> . tmain
    (21) classbodydecl -> . field_declartaion
    (23) method_declaration -> . method_header opening_bracket method_body closing_bracket
    (14) tmain -> . tmain_header opening_bracket method_body closing_bracket
    (22) field_declartaion -> . modifiers_opt type variable_declarators ;
    (24) method_header -> . method_header_name ( formal_parameter_list_opt )
    (15) tmain_header -> . tmain_name ( formal_parameter_list_opt )
    (7) modifiers_opt -> . modifiers
    (8) modifiers_opt -> . empty
    (25) method_header_name -> . modifiers_opt type name
    (16) tmain_name -> . modifiers_opt type MAIN
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (57) empty -> .
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE

    BOOLEAN         reduce using rule 57 (empty -> .)
    VOID            reduce using rule 57 (empty -> .)
    BYTE            reduce using rule 57 (empty -> .)
    SHORT           reduce using rule 57 (empty -> .)
    INT             reduce using rule 57 (empty -> .)
    LONG            reduce using rule 57 (empty -> .)
    CHAR            reduce using rule 57 (empty -> .)
    FLOAT           reduce using rule 57 (empty -> .)
    DOUBLE          reduce using rule 57 (empty -> .)
    STRING          reduce using rule 57 (empty -> .)
    NAME            reduce using rule 57 (empty -> .)
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16

    classbodydecllist              shift and go to state 24
    classbodydecl                  shift and go to state 25
    method_declaration             shift and go to state 26
    tmain                          shift and go to state 27
    field_declartaion              shift and go to state 28
    method_header                  shift and go to state 29
    tmain_header                   shift and go to state 30
    modifiers_opt                  shift and go to state 31
    method_header_name             shift and go to state 32
    tmain_name                     shift and go to state 33
    modifiers                      shift and go to state 7
    empty                          shift and go to state 8
    modifier                       shift and go to state 9

state 20

    (12) opening_bracket -> { .

    PUBLIC          reduce using rule 12 (opening_bracket -> { .)
    PROTECTED       reduce using rule 12 (opening_bracket -> { .)
    PRIVATE         reduce using rule 12 (opening_bracket -> { .)
    STATIC          reduce using rule 12 (opening_bracket -> { .)
    ABSTRACT        reduce using rule 12 (opening_bracket -> { .)
    FINAL           reduce using rule 12 (opening_bracket -> { .)
    NATIVE          reduce using rule 12 (opening_bracket -> { .)
    BOOLEAN         reduce using rule 12 (opening_bracket -> { .)
    VOID            reduce using rule 12 (opening_bracket -> { .)
    BYTE            reduce using rule 12 (opening_bracket -> { .)
    SHORT           reduce using rule 12 (opening_bracket -> { .)
    INT             reduce using rule 12 (opening_bracket -> { .)
    LONG            reduce using rule 12 (opening_bracket -> { .)
    CHAR            reduce using rule 12 (opening_bracket -> { .)
    FLOAT           reduce using rule 12 (opening_bracket -> { .)
    DOUBLE          reduce using rule 12 (opening_bracket -> { .)
    STRING          reduce using rule 12 (opening_bracket -> { .)
    NAME            reduce using rule 12 (opening_bracket -> { .)
    ;               reduce using rule 12 (opening_bracket -> { .)
    IF              reduce using rule 12 (opening_bracket -> { .)
    BREAK           reduce using rule 12 (opening_bracket -> { .)
    RETURN          reduce using rule 12 (opening_bracket -> { .)
    WHILE           reduce using rule 12 (opening_bracket -> { .)
    DO              reduce using rule 12 (opening_bracket -> { .)
    UMINUS          reduce using rule 12 (opening_bracket -> { .)
    PLUSPLUS        reduce using rule 12 (opening_bracket -> { .)
    MINUSMINUS      reduce using rule 12 (opening_bracket -> { .)
    NUM             reduce using rule 12 (opening_bracket -> { .)
    CHAR_LITERAL    reduce using rule 12 (opening_bracket -> { .)
    STRING_LITERAL  reduce using rule 12 (opening_bracket -> { .)
    TRUE            reduce using rule 12 (opening_bracket -> { .)
    FALSE           reduce using rule 12 (opening_bracket -> { .)
    NULL            reduce using rule 12 (opening_bracket -> { .)


state 21

    (6) class_header_name -> modifiers_opt CLASS . name
    (56) name -> . NAME

    NAME            shift and go to state 35

    name                           shift and go to state 34

state 22

    (10) modifiers -> modifiers modifier .

    PUBLIC          reduce using rule 10 (modifiers -> modifiers modifier .)
    PROTECTED       reduce using rule 10 (modifiers -> modifiers modifier .)
    PRIVATE         reduce using rule 10 (modifiers -> modifiers modifier .)
    STATIC          reduce using rule 10 (modifiers -> modifiers modifier .)
    ABSTRACT        reduce using rule 10 (modifiers -> modifiers modifier .)
    FINAL           reduce using rule 10 (modifiers -> modifiers modifier .)
    NATIVE          reduce using rule 10 (modifiers -> modifiers modifier .)
    CLASS           reduce using rule 10 (modifiers -> modifiers modifier .)
    BOOLEAN         reduce using rule 10 (modifiers -> modifiers modifier .)
    VOID            reduce using rule 10 (modifiers -> modifiers modifier .)
    BYTE            reduce using rule 10 (modifiers -> modifiers modifier .)
    SHORT           reduce using rule 10 (modifiers -> modifiers modifier .)
    INT             reduce using rule 10 (modifiers -> modifiers modifier .)
    LONG            reduce using rule 10 (modifiers -> modifiers modifier .)
    CHAR            reduce using rule 10 (modifiers -> modifiers modifier .)
    FLOAT           reduce using rule 10 (modifiers -> modifiers modifier .)
    DOUBLE          reduce using rule 10 (modifiers -> modifiers modifier .)
    STRING          reduce using rule 10 (modifiers -> modifiers modifier .)
    NAME            reduce using rule 10 (modifiers -> modifiers modifier .)


state 23

    (3) type_declarations -> type_declarations , type_declaration .

    ,               reduce using rule 3 (type_declarations -> type_declarations , type_declaration .)
    $end            reduce using rule 3 (type_declarations -> type_declarations , type_declaration .)


state 24

    (11) class_body -> opening_bracket classbodydecllist . closing_bracket
    (18) classbodydecllist -> classbodydecllist . classbodydecl
    (13) closing_bracket -> . }
    (19) classbodydecl -> . method_declaration
    (20) classbodydecl -> . tmain
    (21) classbodydecl -> . field_declartaion
    (23) method_declaration -> . method_header opening_bracket method_body closing_bracket
    (14) tmain -> . tmain_header opening_bracket method_body closing_bracket
    (22) field_declartaion -> . modifiers_opt type variable_declarators ;
    (24) method_header -> . method_header_name ( formal_parameter_list_opt )
    (15) tmain_header -> . tmain_name ( formal_parameter_list_opt )
    (7) modifiers_opt -> . modifiers
    (8) modifiers_opt -> . empty
    (25) method_header_name -> . modifiers_opt type name
    (16) tmain_name -> . modifiers_opt type MAIN
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (57) empty -> .
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE

    }               shift and go to state 38
    BOOLEAN         reduce using rule 57 (empty -> .)
    VOID            reduce using rule 57 (empty -> .)
    BYTE            reduce using rule 57 (empty -> .)
    SHORT           reduce using rule 57 (empty -> .)
    INT             reduce using rule 57 (empty -> .)
    LONG            reduce using rule 57 (empty -> .)
    CHAR            reduce using rule 57 (empty -> .)
    FLOAT           reduce using rule 57 (empty -> .)
    DOUBLE          reduce using rule 57 (empty -> .)
    STRING          reduce using rule 57 (empty -> .)
    NAME            reduce using rule 57 (empty -> .)
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16

    closing_bracket                shift and go to state 36
    classbodydecl                  shift and go to state 37
    method_declaration             shift and go to state 26
    tmain                          shift and go to state 27
    field_declartaion              shift and go to state 28
    method_header                  shift and go to state 29
    tmain_header                   shift and go to state 30
    modifiers_opt                  shift and go to state 31
    method_header_name             shift and go to state 32
    tmain_name                     shift and go to state 33
    modifiers                      shift and go to state 7
    empty                          shift and go to state 8
    modifier                       shift and go to state 9

state 25

    (17) classbodydecllist -> classbodydecl .

    }               reduce using rule 17 (classbodydecllist -> classbodydecl .)
    PUBLIC          reduce using rule 17 (classbodydecllist -> classbodydecl .)
    PROTECTED       reduce using rule 17 (classbodydecllist -> classbodydecl .)
    PRIVATE         reduce using rule 17 (classbodydecllist -> classbodydecl .)
    STATIC          reduce using rule 17 (classbodydecllist -> classbodydecl .)
    ABSTRACT        reduce using rule 17 (classbodydecllist -> classbodydecl .)
    FINAL           reduce using rule 17 (classbodydecllist -> classbodydecl .)
    NATIVE          reduce using rule 17 (classbodydecllist -> classbodydecl .)
    BOOLEAN         reduce using rule 17 (classbodydecllist -> classbodydecl .)
    VOID            reduce using rule 17 (classbodydecllist -> classbodydecl .)
    BYTE            reduce using rule 17 (classbodydecllist -> classbodydecl .)
    SHORT           reduce using rule 17 (classbodydecllist -> classbodydecl .)
    INT             reduce using rule 17 (classbodydecllist -> classbodydecl .)
    LONG            reduce using rule 17 (classbodydecllist -> classbodydecl .)
    CHAR            reduce using rule 17 (classbodydecllist -> classbodydecl .)
    FLOAT           reduce using rule 17 (classbodydecllist -> classbodydecl .)
    DOUBLE          reduce using rule 17 (classbodydecllist -> classbodydecl .)
    STRING          reduce using rule 17 (classbodydecllist -> classbodydecl .)
    NAME            reduce using rule 17 (classbodydecllist -> classbodydecl .)


state 26

    (19) classbodydecl -> method_declaration .

    }               reduce using rule 19 (classbodydecl -> method_declaration .)
    PUBLIC          reduce using rule 19 (classbodydecl -> method_declaration .)
    PROTECTED       reduce using rule 19 (classbodydecl -> method_declaration .)
    PRIVATE         reduce using rule 19 (classbodydecl -> method_declaration .)
    STATIC          reduce using rule 19 (classbodydecl -> method_declaration .)
    ABSTRACT        reduce using rule 19 (classbodydecl -> method_declaration .)
    FINAL           reduce using rule 19 (classbodydecl -> method_declaration .)
    NATIVE          reduce using rule 19 (classbodydecl -> method_declaration .)
    BOOLEAN         reduce using rule 19 (classbodydecl -> method_declaration .)
    VOID            reduce using rule 19 (classbodydecl -> method_declaration .)
    BYTE            reduce using rule 19 (classbodydecl -> method_declaration .)
    SHORT           reduce using rule 19 (classbodydecl -> method_declaration .)
    INT             reduce using rule 19 (classbodydecl -> method_declaration .)
    LONG            reduce using rule 19 (classbodydecl -> method_declaration .)
    CHAR            reduce using rule 19 (classbodydecl -> method_declaration .)
    FLOAT           reduce using rule 19 (classbodydecl -> method_declaration .)
    DOUBLE          reduce using rule 19 (classbodydecl -> method_declaration .)
    STRING          reduce using rule 19 (classbodydecl -> method_declaration .)
    NAME            reduce using rule 19 (classbodydecl -> method_declaration .)


state 27

    (20) classbodydecl -> tmain .

    }               reduce using rule 20 (classbodydecl -> tmain .)
    PUBLIC          reduce using rule 20 (classbodydecl -> tmain .)
    PROTECTED       reduce using rule 20 (classbodydecl -> tmain .)
    PRIVATE         reduce using rule 20 (classbodydecl -> tmain .)
    STATIC          reduce using rule 20 (classbodydecl -> tmain .)
    ABSTRACT        reduce using rule 20 (classbodydecl -> tmain .)
    FINAL           reduce using rule 20 (classbodydecl -> tmain .)
    NATIVE          reduce using rule 20 (classbodydecl -> tmain .)
    BOOLEAN         reduce using rule 20 (classbodydecl -> tmain .)
    VOID            reduce using rule 20 (classbodydecl -> tmain .)
    BYTE            reduce using rule 20 (classbodydecl -> tmain .)
    SHORT           reduce using rule 20 (classbodydecl -> tmain .)
    INT             reduce using rule 20 (classbodydecl -> tmain .)
    LONG            reduce using rule 20 (classbodydecl -> tmain .)
    CHAR            reduce using rule 20 (classbodydecl -> tmain .)
    FLOAT           reduce using rule 20 (classbodydecl -> tmain .)
    DOUBLE          reduce using rule 20 (classbodydecl -> tmain .)
    STRING          reduce using rule 20 (classbodydecl -> tmain .)
    NAME            reduce using rule 20 (classbodydecl -> tmain .)


state 28

    (21) classbodydecl -> field_declartaion .

    }               reduce using rule 21 (classbodydecl -> field_declartaion .)
    PUBLIC          reduce using rule 21 (classbodydecl -> field_declartaion .)
    PROTECTED       reduce using rule 21 (classbodydecl -> field_declartaion .)
    PRIVATE         reduce using rule 21 (classbodydecl -> field_declartaion .)
    STATIC          reduce using rule 21 (classbodydecl -> field_declartaion .)
    ABSTRACT        reduce using rule 21 (classbodydecl -> field_declartaion .)
    FINAL           reduce using rule 21 (classbodydecl -> field_declartaion .)
    NATIVE          reduce using rule 21 (classbodydecl -> field_declartaion .)
    BOOLEAN         reduce using rule 21 (classbodydecl -> field_declartaion .)
    VOID            reduce using rule 21 (classbodydecl -> field_declartaion .)
    BYTE            reduce using rule 21 (classbodydecl -> field_declartaion .)
    SHORT           reduce using rule 21 (classbodydecl -> field_declartaion .)
    INT             reduce using rule 21 (classbodydecl -> field_declartaion .)
    LONG            reduce using rule 21 (classbodydecl -> field_declartaion .)
    CHAR            reduce using rule 21 (classbodydecl -> field_declartaion .)
    FLOAT           reduce using rule 21 (classbodydecl -> field_declartaion .)
    DOUBLE          reduce using rule 21 (classbodydecl -> field_declartaion .)
    STRING          reduce using rule 21 (classbodydecl -> field_declartaion .)
    NAME            reduce using rule 21 (classbodydecl -> field_declartaion .)


state 29

    (23) method_declaration -> method_header . opening_bracket method_body closing_bracket
    (12) opening_bracket -> . {

    {               shift and go to state 20

    opening_bracket                shift and go to state 39

state 30

    (14) tmain -> tmain_header . opening_bracket method_body closing_bracket
    (12) opening_bracket -> . {

    {               shift and go to state 20

    opening_bracket                shift and go to state 40

state 31

    (22) field_declartaion -> modifiers_opt . type variable_declarators ;
    (25) method_header_name -> modifiers_opt . type name
    (16) tmain_name -> modifiers_opt . type MAIN
    (33) type -> . primitive_type
    (34) type -> . array_type
    (39) primitive_type -> . BOOLEAN
    (40) primitive_type -> . VOID
    (41) primitive_type -> . BYTE
    (42) primitive_type -> . SHORT
    (43) primitive_type -> . INT
    (44) primitive_type -> . LONG
    (45) primitive_type -> . CHAR
    (46) primitive_type -> . FLOAT
    (47) primitive_type -> . DOUBLE
    (48) primitive_type -> . STRING
    (35) array_type -> . primitive_type dims
    (36) array_type -> . name dims
    (56) name -> . NAME

    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 46
    BYTE            shift and go to state 47
    SHORT           shift and go to state 48
    INT             shift and go to state 49
    LONG            shift and go to state 50
    CHAR            shift and go to state 51
    FLOAT           shift and go to state 52
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 54
    NAME            shift and go to state 35

    type                           shift and go to state 41
    name                           shift and go to state 42
    primitive_type                 shift and go to state 43
    array_type                     shift and go to state 44

state 32

    (24) method_header -> method_header_name . ( formal_parameter_list_opt )

    (               shift and go to state 55


state 33

    (15) tmain_header -> tmain_name . ( formal_parameter_list_opt )

    (               shift and go to state 56


state 34

    (6) class_header_name -> modifiers_opt CLASS name .

    {               reduce using rule 6 (class_header_name -> modifiers_opt CLASS name .)


state 35

    (56) name -> NAME .

    {               reduce using rule 56 (name -> NAME .)
    [               reduce using rule 56 (name -> NAME .)
    (               reduce using rule 56 (name -> NAME .)
    ASSIGN          reduce using rule 56 (name -> NAME .)
    ;               reduce using rule 56 (name -> NAME .)
    ,               reduce using rule 56 (name -> NAME .)
    ADD             reduce using rule 56 (name -> NAME .)
    SUB             reduce using rule 56 (name -> NAME .)
    MUL             reduce using rule 56 (name -> NAME .)
    DIV             reduce using rule 56 (name -> NAME .)
    AND             reduce using rule 56 (name -> NAME .)
    OR              reduce using rule 56 (name -> NAME .)
    LESS            reduce using rule 56 (name -> NAME .)
    LTEQ            reduce using rule 56 (name -> NAME .)
    GREATER         reduce using rule 56 (name -> NAME .)
    GTEQ            reduce using rule 56 (name -> NAME .)
    EQ              reduce using rule 56 (name -> NAME .)
    NEQ             reduce using rule 56 (name -> NAME .)
    PLUSPLUS        reduce using rule 56 (name -> NAME .)
    MINUSMINUS      reduce using rule 56 (name -> NAME .)
    TIMES_ASSIGN    reduce using rule 56 (name -> NAME .)
    DIVIDE_ASSIGN   reduce using rule 56 (name -> NAME .)
    REMAINDER_ASSIGN reduce using rule 56 (name -> NAME .)
    PLUS_ASSIGN     reduce using rule 56 (name -> NAME .)
    MINUS_ASSIGN    reduce using rule 56 (name -> NAME .)
    )               reduce using rule 56 (name -> NAME .)
    ]               reduce using rule 56 (name -> NAME .)


state 36

    (11) class_body -> opening_bracket classbodydecllist closing_bracket .

    ,               reduce using rule 11 (class_body -> opening_bracket classbodydecllist closing_bracket .)
    $end            reduce using rule 11 (class_body -> opening_bracket classbodydecllist closing_bracket .)


state 37

    (18) classbodydecllist -> classbodydecllist classbodydecl .

    }               reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    PUBLIC          reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    PROTECTED       reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    PRIVATE         reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    STATIC          reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    ABSTRACT        reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    FINAL           reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    NATIVE          reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    BOOLEAN         reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    VOID            reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    BYTE            reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    SHORT           reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    INT             reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    LONG            reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    CHAR            reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    FLOAT           reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    DOUBLE          reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    STRING          reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)
    NAME            reduce using rule 18 (classbodydecllist -> classbodydecllist classbodydecl .)


state 38

    (13) closing_bracket -> } .

    ,               reduce using rule 13 (closing_bracket -> } .)
    $end            reduce using rule 13 (closing_bracket -> } .)
    }               reduce using rule 13 (closing_bracket -> } .)
    PUBLIC          reduce using rule 13 (closing_bracket -> } .)
    PROTECTED       reduce using rule 13 (closing_bracket -> } .)
    PRIVATE         reduce using rule 13 (closing_bracket -> } .)
    STATIC          reduce using rule 13 (closing_bracket -> } .)
    ABSTRACT        reduce using rule 13 (closing_bracket -> } .)
    FINAL           reduce using rule 13 (closing_bracket -> } .)
    NATIVE          reduce using rule 13 (closing_bracket -> } .)
    BOOLEAN         reduce using rule 13 (closing_bracket -> } .)
    VOID            reduce using rule 13 (closing_bracket -> } .)
    BYTE            reduce using rule 13 (closing_bracket -> } .)
    SHORT           reduce using rule 13 (closing_bracket -> } .)
    INT             reduce using rule 13 (closing_bracket -> } .)
    LONG            reduce using rule 13 (closing_bracket -> } .)
    CHAR            reduce using rule 13 (closing_bracket -> } .)
    FLOAT           reduce using rule 13 (closing_bracket -> } .)
    DOUBLE          reduce using rule 13 (closing_bracket -> } .)
    STRING          reduce using rule 13 (closing_bracket -> } .)
    NAME            reduce using rule 13 (closing_bracket -> } .)
    WHILE           reduce using rule 13 (closing_bracket -> } .)
    ELSE            reduce using rule 13 (closing_bracket -> } .)
    ;               reduce using rule 13 (closing_bracket -> } .)
    IF              reduce using rule 13 (closing_bracket -> } .)
    BREAK           reduce using rule 13 (closing_bracket -> } .)
    RETURN          reduce using rule 13 (closing_bracket -> } .)
    DO              reduce using rule 13 (closing_bracket -> } .)
    UMINUS          reduce using rule 13 (closing_bracket -> } .)
    PLUSPLUS        reduce using rule 13 (closing_bracket -> } .)
    MINUSMINUS      reduce using rule 13 (closing_bracket -> } .)
    NUM             reduce using rule 13 (closing_bracket -> } .)
    CHAR_LITERAL    reduce using rule 13 (closing_bracket -> } .)
    STRING_LITERAL  reduce using rule 13 (closing_bracket -> } .)
    TRUE            reduce using rule 13 (closing_bracket -> } .)
    FALSE           reduce using rule 13 (closing_bracket -> } .)
    NULL            reduce using rule 13 (closing_bracket -> } .)


state 39

    (23) method_declaration -> method_header opening_bracket . method_body closing_bracket
    (26) method_body -> . block_statements
    (58) block_statements -> . block_statement
    (59) block_statements -> . block_statements block_statement
    (60) block_statement -> . local_variable_declaration_statement
    (61) block_statement -> . statement
    (62) local_variable_declaration_statement -> . local_variable_declaration ;
    (69) statement -> . other_statement
    (70) statement -> . if_then_statement
    (71) statement -> . if_then_else_statement
    (72) statement -> . while_statement
    (73) statement -> . do_while_statement
    (63) local_variable_declaration -> . type variable_declarators
    (64) local_variable_declaration -> . modifiers type variable_declarators
    (74) other_statement -> . expression_statement
    (75) other_statement -> . break_statement
    (76) other_statement -> . return_statement
    (77) other_statement -> . ;
    (91) if_then_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket
    (93) if_then_else_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else
    (96) while_statement -> . while ( expression closing_parantheses opening_bracket block_statements closing_bracket
    (99) do_while_statement -> . do opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (33) type -> . primitive_type
    (34) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (78) expression_statement -> . statement_expression ;
    (86) break_statement -> . BREAK ;
    (87) break_statement -> . BREAK NAME ;
    (88) return_statement -> . RETURN expression_opt ;
    (98) while -> . WHILE
    (100) do -> . DO
    (39) primitive_type -> . BOOLEAN
    (40) primitive_type -> . VOID
    (41) primitive_type -> . BYTE
    (42) primitive_type -> . SHORT
    (43) primitive_type -> . INT
    (44) primitive_type -> . LONG
    (45) primitive_type -> . CHAR
    (46) primitive_type -> . FLOAT
    (47) primitive_type -> . DOUBLE
    (48) primitive_type -> . STRING
    (35) array_type -> . primitive_type dims
    (36) array_type -> . name dims
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE
    (79) statement_expression -> . assignment
    (80) statement_expression -> . unary_expression
    (81) statement_expression -> . method_invocation
    (56) name -> . NAME
    (104) assignment -> . Location assignment_operator Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (82) method_invocation -> . NAME ( argument_list )
    (83) method_invocation -> . NAME ( )
    (105) Location -> . name
    (106) Location -> . array_access
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS
    (139) array_access -> . name [ Expr ]
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL

    ;               shift and go to state 63
    IF              shift and go to state 74
    BREAK           shift and go to state 79
    RETURN          shift and go to state 81
    WHILE           shift and go to state 77
    DO              shift and go to state 82
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 46
    BYTE            shift and go to state 47
    SHORT           shift and go to state 48
    INT             shift and go to state 49
    LONG            shift and go to state 50
    CHAR            shift and go to state 51
    FLOAT           shift and go to state 52
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 54
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    NAME            shift and go to state 80
    UMINUS          shift and go to state 91
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104

    method_body                    shift and go to state 57
    block_statements               shift and go to state 58
    block_statement                shift and go to state 59
    local_variable_declaration_statement shift and go to state 60
    statement                      shift and go to state 61
    local_variable_declaration     shift and go to state 62
    other_statement                shift and go to state 64
    if_then_statement              shift and go to state 65
    if_then_else_statement         shift and go to state 66
    while_statement                shift and go to state 67
    do_while_statement             shift and go to state 68
    type                           shift and go to state 69
    modifiers                      shift and go to state 70
    expression_statement           shift and go to state 71
    break_statement                shift and go to state 72
    return_statement               shift and go to state 73
    while                          shift and go to state 75
    do                             shift and go to state 76
    primitive_type                 shift and go to state 43
    array_type                     shift and go to state 44
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 78
    name                           shift and go to state 83
    assignment                     shift and go to state 84
    unary_expression               shift and go to state 85
    method_invocation              shift and go to state 86
    Location                       shift and go to state 87
    Expr                           shift and go to state 88
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93
    array_access                   shift and go to state 94
    exprbinaryexpr                 shift and go to state 97
    literal                        shift and go to state 98

state 40

    (14) tmain -> tmain_header opening_bracket . method_body closing_bracket
    (26) method_body -> . block_statements
    (58) block_statements -> . block_statement
    (59) block_statements -> . block_statements block_statement
    (60) block_statement -> . local_variable_declaration_statement
    (61) block_statement -> . statement
    (62) local_variable_declaration_statement -> . local_variable_declaration ;
    (69) statement -> . other_statement
    (70) statement -> . if_then_statement
    (71) statement -> . if_then_else_statement
    (72) statement -> . while_statement
    (73) statement -> . do_while_statement
    (63) local_variable_declaration -> . type variable_declarators
    (64) local_variable_declaration -> . modifiers type variable_declarators
    (74) other_statement -> . expression_statement
    (75) other_statement -> . break_statement
    (76) other_statement -> . return_statement
    (77) other_statement -> . ;
    (91) if_then_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket
    (93) if_then_else_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else
    (96) while_statement -> . while ( expression closing_parantheses opening_bracket block_statements closing_bracket
    (99) do_while_statement -> . do opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (33) type -> . primitive_type
    (34) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (78) expression_statement -> . statement_expression ;
    (86) break_statement -> . BREAK ;
    (87) break_statement -> . BREAK NAME ;
    (88) return_statement -> . RETURN expression_opt ;
    (98) while -> . WHILE
    (100) do -> . DO
    (39) primitive_type -> . BOOLEAN
    (40) primitive_type -> . VOID
    (41) primitive_type -> . BYTE
    (42) primitive_type -> . SHORT
    (43) primitive_type -> . INT
    (44) primitive_type -> . LONG
    (45) primitive_type -> . CHAR
    (46) primitive_type -> . FLOAT
    (47) primitive_type -> . DOUBLE
    (48) primitive_type -> . STRING
    (35) array_type -> . primitive_type dims
    (36) array_type -> . name dims
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE
    (79) statement_expression -> . assignment
    (80) statement_expression -> . unary_expression
    (81) statement_expression -> . method_invocation
    (56) name -> . NAME
    (104) assignment -> . Location assignment_operator Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (82) method_invocation -> . NAME ( argument_list )
    (83) method_invocation -> . NAME ( )
    (105) Location -> . name
    (106) Location -> . array_access
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS
    (139) array_access -> . name [ Expr ]
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL

    ;               shift and go to state 63
    IF              shift and go to state 74
    BREAK           shift and go to state 79
    RETURN          shift and go to state 81
    WHILE           shift and go to state 77
    DO              shift and go to state 82
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 46
    BYTE            shift and go to state 47
    SHORT           shift and go to state 48
    INT             shift and go to state 49
    LONG            shift and go to state 50
    CHAR            shift and go to state 51
    FLOAT           shift and go to state 52
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 54
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    NAME            shift and go to state 80
    UMINUS          shift and go to state 91
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104

    method_body                    shift and go to state 105
    block_statements               shift and go to state 58
    block_statement                shift and go to state 59
    local_variable_declaration_statement shift and go to state 60
    statement                      shift and go to state 61
    local_variable_declaration     shift and go to state 62
    other_statement                shift and go to state 64
    if_then_statement              shift and go to state 65
    if_then_else_statement         shift and go to state 66
    while_statement                shift and go to state 67
    do_while_statement             shift and go to state 68
    type                           shift and go to state 69
    modifiers                      shift and go to state 70
    expression_statement           shift and go to state 71
    break_statement                shift and go to state 72
    return_statement               shift and go to state 73
    while                          shift and go to state 75
    do                             shift and go to state 76
    primitive_type                 shift and go to state 43
    array_type                     shift and go to state 44
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 78
    name                           shift and go to state 83
    assignment                     shift and go to state 84
    unary_expression               shift and go to state 85
    method_invocation              shift and go to state 86
    Location                       shift and go to state 87
    Expr                           shift and go to state 88
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93
    array_access                   shift and go to state 94
    exprbinaryexpr                 shift and go to state 97
    literal                        shift and go to state 98

state 41

    (22) field_declartaion -> modifiers_opt type . variable_declarators ;
    (25) method_header_name -> modifiers_opt type . name
    (16) tmain_name -> modifiers_opt type . MAIN
    (65) variable_declarators -> . variable_declarator
    (66) variable_declarators -> . variable_declarators , variable_declarator
    (56) name -> . NAME
    (67) variable_declarator -> . variable_declarator_id
    (68) variable_declarator -> . variable_declarator_id ASSIGN Expr
    (28) variable_declarator_id -> . name

    MAIN            shift and go to state 108
    NAME            shift and go to state 35

    variable_declarators           shift and go to state 106
    name                           shift and go to state 107
    variable_declarator            shift and go to state 109
    variable_declarator_id         shift and go to state 110

state 42

    (36) array_type -> name . dims
    (37) dims -> . [ ]
    (38) dims -> . dims [ ]

    [               shift and go to state 112

    dims                           shift and go to state 111

state 43

    (33) type -> primitive_type .
    (35) array_type -> primitive_type . dims
    (37) dims -> . [ ]
    (38) dims -> . dims [ ]

    MAIN            reduce using rule 33 (type -> primitive_type .)
    NAME            reduce using rule 33 (type -> primitive_type .)
    [               shift and go to state 112

    dims                           shift and go to state 113

state 44

    (34) type -> array_type .

    MAIN            reduce using rule 34 (type -> array_type .)
    NAME            reduce using rule 34 (type -> array_type .)


state 45

    (39) primitive_type -> BOOLEAN .

    [               reduce using rule 39 (primitive_type -> BOOLEAN .)
    MAIN            reduce using rule 39 (primitive_type -> BOOLEAN .)
    NAME            reduce using rule 39 (primitive_type -> BOOLEAN .)


state 46

    (40) primitive_type -> VOID .

    [               reduce using rule 40 (primitive_type -> VOID .)
    MAIN            reduce using rule 40 (primitive_type -> VOID .)
    NAME            reduce using rule 40 (primitive_type -> VOID .)


state 47

    (41) primitive_type -> BYTE .

    [               reduce using rule 41 (primitive_type -> BYTE .)
    MAIN            reduce using rule 41 (primitive_type -> BYTE .)
    NAME            reduce using rule 41 (primitive_type -> BYTE .)


state 48

    (42) primitive_type -> SHORT .

    [               reduce using rule 42 (primitive_type -> SHORT .)
    MAIN            reduce using rule 42 (primitive_type -> SHORT .)
    NAME            reduce using rule 42 (primitive_type -> SHORT .)


state 49

    (43) primitive_type -> INT .

    [               reduce using rule 43 (primitive_type -> INT .)
    MAIN            reduce using rule 43 (primitive_type -> INT .)
    NAME            reduce using rule 43 (primitive_type -> INT .)


state 50

    (44) primitive_type -> LONG .

    [               reduce using rule 44 (primitive_type -> LONG .)
    MAIN            reduce using rule 44 (primitive_type -> LONG .)
    NAME            reduce using rule 44 (primitive_type -> LONG .)


state 51

    (45) primitive_type -> CHAR .

    [               reduce using rule 45 (primitive_type -> CHAR .)
    MAIN            reduce using rule 45 (primitive_type -> CHAR .)
    NAME            reduce using rule 45 (primitive_type -> CHAR .)


state 52

    (46) primitive_type -> FLOAT .

    [               reduce using rule 46 (primitive_type -> FLOAT .)
    MAIN            reduce using rule 46 (primitive_type -> FLOAT .)
    NAME            reduce using rule 46 (primitive_type -> FLOAT .)


state 53

    (47) primitive_type -> DOUBLE .

    [               reduce using rule 47 (primitive_type -> DOUBLE .)
    MAIN            reduce using rule 47 (primitive_type -> DOUBLE .)
    NAME            reduce using rule 47 (primitive_type -> DOUBLE .)


state 54

    (48) primitive_type -> STRING .

    [               reduce using rule 48 (primitive_type -> STRING .)
    MAIN            reduce using rule 48 (primitive_type -> STRING .)
    NAME            reduce using rule 48 (primitive_type -> STRING .)


state 55

    (24) method_header -> method_header_name ( . formal_parameter_list_opt )
    (29) formal_parameter_list_opt -> . formal_parameter_list
    (30) formal_parameter_list_opt -> . empty
    (31) formal_parameter_list -> . formal_parameter
    (32) formal_parameter_list -> . formal_parameter_list , formal_parameter
    (57) empty -> .
    (27) formal_parameter -> . type variable_declarator_id
    (33) type -> . primitive_type
    (34) type -> . array_type
    (39) primitive_type -> . BOOLEAN
    (40) primitive_type -> . VOID
    (41) primitive_type -> . BYTE
    (42) primitive_type -> . SHORT
    (43) primitive_type -> . INT
    (44) primitive_type -> . LONG
    (45) primitive_type -> . CHAR
    (46) primitive_type -> . FLOAT
    (47) primitive_type -> . DOUBLE
    (48) primitive_type -> . STRING
    (35) array_type -> . primitive_type dims
    (36) array_type -> . name dims
    (56) name -> . NAME

    )               reduce using rule 57 (empty -> .)
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 46
    BYTE            shift and go to state 47
    SHORT           shift and go to state 48
    INT             shift and go to state 49
    LONG            shift and go to state 50
    CHAR            shift and go to state 51
    FLOAT           shift and go to state 52
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 54
    NAME            shift and go to state 35

    formal_parameter_list_opt      shift and go to state 114
    formal_parameter_list          shift and go to state 115
    empty                          shift and go to state 116
    formal_parameter               shift and go to state 117
    type                           shift and go to state 118
    primitive_type                 shift and go to state 43
    array_type                     shift and go to state 44
    name                           shift and go to state 42

state 56

    (15) tmain_header -> tmain_name ( . formal_parameter_list_opt )
    (29) formal_parameter_list_opt -> . formal_parameter_list
    (30) formal_parameter_list_opt -> . empty
    (31) formal_parameter_list -> . formal_parameter
    (32) formal_parameter_list -> . formal_parameter_list , formal_parameter
    (57) empty -> .
    (27) formal_parameter -> . type variable_declarator_id
    (33) type -> . primitive_type
    (34) type -> . array_type
    (39) primitive_type -> . BOOLEAN
    (40) primitive_type -> . VOID
    (41) primitive_type -> . BYTE
    (42) primitive_type -> . SHORT
    (43) primitive_type -> . INT
    (44) primitive_type -> . LONG
    (45) primitive_type -> . CHAR
    (46) primitive_type -> . FLOAT
    (47) primitive_type -> . DOUBLE
    (48) primitive_type -> . STRING
    (35) array_type -> . primitive_type dims
    (36) array_type -> . name dims
    (56) name -> . NAME

    )               reduce using rule 57 (empty -> .)
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 46
    BYTE            shift and go to state 47
    SHORT           shift and go to state 48
    INT             shift and go to state 49
    LONG            shift and go to state 50
    CHAR            shift and go to state 51
    FLOAT           shift and go to state 52
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 54
    NAME            shift and go to state 35

    formal_parameter_list_opt      shift and go to state 119
    formal_parameter_list          shift and go to state 115
    empty                          shift and go to state 116
    formal_parameter               shift and go to state 117
    type                           shift and go to state 118
    primitive_type                 shift and go to state 43
    array_type                     shift and go to state 44
    name                           shift and go to state 42

state 57

    (23) method_declaration -> method_header opening_bracket method_body . closing_bracket
    (13) closing_bracket -> . }

    }               shift and go to state 38

    closing_bracket                shift and go to state 120

state 58

    (26) method_body -> block_statements .
    (59) block_statements -> block_statements . block_statement
    (60) block_statement -> . local_variable_declaration_statement
    (61) block_statement -> . statement
    (62) local_variable_declaration_statement -> . local_variable_declaration ;
    (69) statement -> . other_statement
    (70) statement -> . if_then_statement
    (71) statement -> . if_then_else_statement
    (72) statement -> . while_statement
    (73) statement -> . do_while_statement
    (63) local_variable_declaration -> . type variable_declarators
    (64) local_variable_declaration -> . modifiers type variable_declarators
    (74) other_statement -> . expression_statement
    (75) other_statement -> . break_statement
    (76) other_statement -> . return_statement
    (77) other_statement -> . ;
    (91) if_then_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket
    (93) if_then_else_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else
    (96) while_statement -> . while ( expression closing_parantheses opening_bracket block_statements closing_bracket
    (99) do_while_statement -> . do opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (33) type -> . primitive_type
    (34) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (78) expression_statement -> . statement_expression ;
    (86) break_statement -> . BREAK ;
    (87) break_statement -> . BREAK NAME ;
    (88) return_statement -> . RETURN expression_opt ;
    (98) while -> . WHILE
    (100) do -> . DO
    (39) primitive_type -> . BOOLEAN
    (40) primitive_type -> . VOID
    (41) primitive_type -> . BYTE
    (42) primitive_type -> . SHORT
    (43) primitive_type -> . INT
    (44) primitive_type -> . LONG
    (45) primitive_type -> . CHAR
    (46) primitive_type -> . FLOAT
    (47) primitive_type -> . DOUBLE
    (48) primitive_type -> . STRING
    (35) array_type -> . primitive_type dims
    (36) array_type -> . name dims
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE
    (79) statement_expression -> . assignment
    (80) statement_expression -> . unary_expression
    (81) statement_expression -> . method_invocation
    (56) name -> . NAME
    (104) assignment -> . Location assignment_operator Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (82) method_invocation -> . NAME ( argument_list )
    (83) method_invocation -> . NAME ( )
    (105) Location -> . name
    (106) Location -> . array_access
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS
    (139) array_access -> . name [ Expr ]
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL

    }               reduce using rule 26 (method_body -> block_statements .)
    ;               shift and go to state 63
    IF              shift and go to state 74
    BREAK           shift and go to state 79
    RETURN          shift and go to state 81
    WHILE           shift and go to state 77
    DO              shift and go to state 82
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 46
    BYTE            shift and go to state 47
    SHORT           shift and go to state 48
    INT             shift and go to state 49
    LONG            shift and go to state 50
    CHAR            shift and go to state 51
    FLOAT           shift and go to state 52
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 54
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    NAME            shift and go to state 80
    UMINUS          shift and go to state 91
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104

    block_statement                shift and go to state 121
    local_variable_declaration_statement shift and go to state 60
    statement                      shift and go to state 61
    local_variable_declaration     shift and go to state 62
    other_statement                shift and go to state 64
    if_then_statement              shift and go to state 65
    if_then_else_statement         shift and go to state 66
    while_statement                shift and go to state 67
    do_while_statement             shift and go to state 68
    type                           shift and go to state 69
    modifiers                      shift and go to state 70
    expression_statement           shift and go to state 71
    break_statement                shift and go to state 72
    return_statement               shift and go to state 73
    while                          shift and go to state 75
    do                             shift and go to state 76
    primitive_type                 shift and go to state 43
    array_type                     shift and go to state 44
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 78
    name                           shift and go to state 83
    assignment                     shift and go to state 84
    unary_expression               shift and go to state 85
    method_invocation              shift and go to state 86
    Location                       shift and go to state 87
    Expr                           shift and go to state 88
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93
    array_access                   shift and go to state 94
    exprbinaryexpr                 shift and go to state 97
    literal                        shift and go to state 98

state 59

    (58) block_statements -> block_statement .

    ;               reduce using rule 58 (block_statements -> block_statement .)
    IF              reduce using rule 58 (block_statements -> block_statement .)
    BREAK           reduce using rule 58 (block_statements -> block_statement .)
    RETURN          reduce using rule 58 (block_statements -> block_statement .)
    WHILE           reduce using rule 58 (block_statements -> block_statement .)
    DO              reduce using rule 58 (block_statements -> block_statement .)
    BOOLEAN         reduce using rule 58 (block_statements -> block_statement .)
    VOID            reduce using rule 58 (block_statements -> block_statement .)
    BYTE            reduce using rule 58 (block_statements -> block_statement .)
    SHORT           reduce using rule 58 (block_statements -> block_statement .)
    INT             reduce using rule 58 (block_statements -> block_statement .)
    LONG            reduce using rule 58 (block_statements -> block_statement .)
    CHAR            reduce using rule 58 (block_statements -> block_statement .)
    FLOAT           reduce using rule 58 (block_statements -> block_statement .)
    DOUBLE          reduce using rule 58 (block_statements -> block_statement .)
    STRING          reduce using rule 58 (block_statements -> block_statement .)
    PUBLIC          reduce using rule 58 (block_statements -> block_statement .)
    PROTECTED       reduce using rule 58 (block_statements -> block_statement .)
    PRIVATE         reduce using rule 58 (block_statements -> block_statement .)
    STATIC          reduce using rule 58 (block_statements -> block_statement .)
    ABSTRACT        reduce using rule 58 (block_statements -> block_statement .)
    FINAL           reduce using rule 58 (block_statements -> block_statement .)
    NATIVE          reduce using rule 58 (block_statements -> block_statement .)
    NAME            reduce using rule 58 (block_statements -> block_statement .)
    UMINUS          reduce using rule 58 (block_statements -> block_statement .)
    PLUSPLUS        reduce using rule 58 (block_statements -> block_statement .)
    MINUSMINUS      reduce using rule 58 (block_statements -> block_statement .)
    NUM             reduce using rule 58 (block_statements -> block_statement .)
    CHAR_LITERAL    reduce using rule 58 (block_statements -> block_statement .)
    STRING_LITERAL  reduce using rule 58 (block_statements -> block_statement .)
    TRUE            reduce using rule 58 (block_statements -> block_statement .)
    FALSE           reduce using rule 58 (block_statements -> block_statement .)
    NULL            reduce using rule 58 (block_statements -> block_statement .)
    }               reduce using rule 58 (block_statements -> block_statement .)


state 60

    (60) block_statement -> local_variable_declaration_statement .

    ;               reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    IF              reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    BREAK           reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    RETURN          reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    WHILE           reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    DO              reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    BOOLEAN         reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    VOID            reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    BYTE            reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    SHORT           reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    INT             reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    LONG            reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    CHAR            reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    FLOAT           reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    DOUBLE          reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    STRING          reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    PUBLIC          reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    PROTECTED       reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    PRIVATE         reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    STATIC          reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    ABSTRACT        reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    FINAL           reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    NATIVE          reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    NAME            reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    UMINUS          reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    PLUSPLUS        reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    MINUSMINUS      reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    NUM             reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    CHAR_LITERAL    reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    STRING_LITERAL  reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    TRUE            reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    FALSE           reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    NULL            reduce using rule 60 (block_statement -> local_variable_declaration_statement .)
    }               reduce using rule 60 (block_statement -> local_variable_declaration_statement .)


state 61

    (61) block_statement -> statement .

    ;               reduce using rule 61 (block_statement -> statement .)
    IF              reduce using rule 61 (block_statement -> statement .)
    BREAK           reduce using rule 61 (block_statement -> statement .)
    RETURN          reduce using rule 61 (block_statement -> statement .)
    WHILE           reduce using rule 61 (block_statement -> statement .)
    DO              reduce using rule 61 (block_statement -> statement .)
    BOOLEAN         reduce using rule 61 (block_statement -> statement .)
    VOID            reduce using rule 61 (block_statement -> statement .)
    BYTE            reduce using rule 61 (block_statement -> statement .)
    SHORT           reduce using rule 61 (block_statement -> statement .)
    INT             reduce using rule 61 (block_statement -> statement .)
    LONG            reduce using rule 61 (block_statement -> statement .)
    CHAR            reduce using rule 61 (block_statement -> statement .)
    FLOAT           reduce using rule 61 (block_statement -> statement .)
    DOUBLE          reduce using rule 61 (block_statement -> statement .)
    STRING          reduce using rule 61 (block_statement -> statement .)
    PUBLIC          reduce using rule 61 (block_statement -> statement .)
    PROTECTED       reduce using rule 61 (block_statement -> statement .)
    PRIVATE         reduce using rule 61 (block_statement -> statement .)
    STATIC          reduce using rule 61 (block_statement -> statement .)
    ABSTRACT        reduce using rule 61 (block_statement -> statement .)
    FINAL           reduce using rule 61 (block_statement -> statement .)
    NATIVE          reduce using rule 61 (block_statement -> statement .)
    NAME            reduce using rule 61 (block_statement -> statement .)
    UMINUS          reduce using rule 61 (block_statement -> statement .)
    PLUSPLUS        reduce using rule 61 (block_statement -> statement .)
    MINUSMINUS      reduce using rule 61 (block_statement -> statement .)
    NUM             reduce using rule 61 (block_statement -> statement .)
    CHAR_LITERAL    reduce using rule 61 (block_statement -> statement .)
    STRING_LITERAL  reduce using rule 61 (block_statement -> statement .)
    TRUE            reduce using rule 61 (block_statement -> statement .)
    FALSE           reduce using rule 61 (block_statement -> statement .)
    NULL            reduce using rule 61 (block_statement -> statement .)
    }               reduce using rule 61 (block_statement -> statement .)


state 62

    (62) local_variable_declaration_statement -> local_variable_declaration . ;

    ;               shift and go to state 122


state 63

    (77) other_statement -> ; .

    ;               reduce using rule 77 (other_statement -> ; .)
    IF              reduce using rule 77 (other_statement -> ; .)
    BREAK           reduce using rule 77 (other_statement -> ; .)
    RETURN          reduce using rule 77 (other_statement -> ; .)
    WHILE           reduce using rule 77 (other_statement -> ; .)
    DO              reduce using rule 77 (other_statement -> ; .)
    BOOLEAN         reduce using rule 77 (other_statement -> ; .)
    VOID            reduce using rule 77 (other_statement -> ; .)
    BYTE            reduce using rule 77 (other_statement -> ; .)
    SHORT           reduce using rule 77 (other_statement -> ; .)
    INT             reduce using rule 77 (other_statement -> ; .)
    LONG            reduce using rule 77 (other_statement -> ; .)
    CHAR            reduce using rule 77 (other_statement -> ; .)
    FLOAT           reduce using rule 77 (other_statement -> ; .)
    DOUBLE          reduce using rule 77 (other_statement -> ; .)
    STRING          reduce using rule 77 (other_statement -> ; .)
    PUBLIC          reduce using rule 77 (other_statement -> ; .)
    PROTECTED       reduce using rule 77 (other_statement -> ; .)
    PRIVATE         reduce using rule 77 (other_statement -> ; .)
    STATIC          reduce using rule 77 (other_statement -> ; .)
    ABSTRACT        reduce using rule 77 (other_statement -> ; .)
    FINAL           reduce using rule 77 (other_statement -> ; .)
    NATIVE          reduce using rule 77 (other_statement -> ; .)
    NAME            reduce using rule 77 (other_statement -> ; .)
    UMINUS          reduce using rule 77 (other_statement -> ; .)
    PLUSPLUS        reduce using rule 77 (other_statement -> ; .)
    MINUSMINUS      reduce using rule 77 (other_statement -> ; .)
    NUM             reduce using rule 77 (other_statement -> ; .)
    CHAR_LITERAL    reduce using rule 77 (other_statement -> ; .)
    STRING_LITERAL  reduce using rule 77 (other_statement -> ; .)
    TRUE            reduce using rule 77 (other_statement -> ; .)
    FALSE           reduce using rule 77 (other_statement -> ; .)
    NULL            reduce using rule 77 (other_statement -> ; .)
    }               reduce using rule 77 (other_statement -> ; .)


state 64

    (69) statement -> other_statement .

    ;               reduce using rule 69 (statement -> other_statement .)
    IF              reduce using rule 69 (statement -> other_statement .)
    BREAK           reduce using rule 69 (statement -> other_statement .)
    RETURN          reduce using rule 69 (statement -> other_statement .)
    WHILE           reduce using rule 69 (statement -> other_statement .)
    DO              reduce using rule 69 (statement -> other_statement .)
    BOOLEAN         reduce using rule 69 (statement -> other_statement .)
    VOID            reduce using rule 69 (statement -> other_statement .)
    BYTE            reduce using rule 69 (statement -> other_statement .)
    SHORT           reduce using rule 69 (statement -> other_statement .)
    INT             reduce using rule 69 (statement -> other_statement .)
    LONG            reduce using rule 69 (statement -> other_statement .)
    CHAR            reduce using rule 69 (statement -> other_statement .)
    FLOAT           reduce using rule 69 (statement -> other_statement .)
    DOUBLE          reduce using rule 69 (statement -> other_statement .)
    STRING          reduce using rule 69 (statement -> other_statement .)
    PUBLIC          reduce using rule 69 (statement -> other_statement .)
    PROTECTED       reduce using rule 69 (statement -> other_statement .)
    PRIVATE         reduce using rule 69 (statement -> other_statement .)
    STATIC          reduce using rule 69 (statement -> other_statement .)
    ABSTRACT        reduce using rule 69 (statement -> other_statement .)
    FINAL           reduce using rule 69 (statement -> other_statement .)
    NATIVE          reduce using rule 69 (statement -> other_statement .)
    NAME            reduce using rule 69 (statement -> other_statement .)
    UMINUS          reduce using rule 69 (statement -> other_statement .)
    PLUSPLUS        reduce using rule 69 (statement -> other_statement .)
    MINUSMINUS      reduce using rule 69 (statement -> other_statement .)
    NUM             reduce using rule 69 (statement -> other_statement .)
    CHAR_LITERAL    reduce using rule 69 (statement -> other_statement .)
    STRING_LITERAL  reduce using rule 69 (statement -> other_statement .)
    TRUE            reduce using rule 69 (statement -> other_statement .)
    FALSE           reduce using rule 69 (statement -> other_statement .)
    NULL            reduce using rule 69 (statement -> other_statement .)
    }               reduce using rule 69 (statement -> other_statement .)


state 65

    (70) statement -> if_then_statement .

    ;               reduce using rule 70 (statement -> if_then_statement .)
    IF              reduce using rule 70 (statement -> if_then_statement .)
    BREAK           reduce using rule 70 (statement -> if_then_statement .)
    RETURN          reduce using rule 70 (statement -> if_then_statement .)
    WHILE           reduce using rule 70 (statement -> if_then_statement .)
    DO              reduce using rule 70 (statement -> if_then_statement .)
    BOOLEAN         reduce using rule 70 (statement -> if_then_statement .)
    VOID            reduce using rule 70 (statement -> if_then_statement .)
    BYTE            reduce using rule 70 (statement -> if_then_statement .)
    SHORT           reduce using rule 70 (statement -> if_then_statement .)
    INT             reduce using rule 70 (statement -> if_then_statement .)
    LONG            reduce using rule 70 (statement -> if_then_statement .)
    CHAR            reduce using rule 70 (statement -> if_then_statement .)
    FLOAT           reduce using rule 70 (statement -> if_then_statement .)
    DOUBLE          reduce using rule 70 (statement -> if_then_statement .)
    STRING          reduce using rule 70 (statement -> if_then_statement .)
    PUBLIC          reduce using rule 70 (statement -> if_then_statement .)
    PROTECTED       reduce using rule 70 (statement -> if_then_statement .)
    PRIVATE         reduce using rule 70 (statement -> if_then_statement .)
    STATIC          reduce using rule 70 (statement -> if_then_statement .)
    ABSTRACT        reduce using rule 70 (statement -> if_then_statement .)
    FINAL           reduce using rule 70 (statement -> if_then_statement .)
    NATIVE          reduce using rule 70 (statement -> if_then_statement .)
    NAME            reduce using rule 70 (statement -> if_then_statement .)
    UMINUS          reduce using rule 70 (statement -> if_then_statement .)
    PLUSPLUS        reduce using rule 70 (statement -> if_then_statement .)
    MINUSMINUS      reduce using rule 70 (statement -> if_then_statement .)
    NUM             reduce using rule 70 (statement -> if_then_statement .)
    CHAR_LITERAL    reduce using rule 70 (statement -> if_then_statement .)
    STRING_LITERAL  reduce using rule 70 (statement -> if_then_statement .)
    TRUE            reduce using rule 70 (statement -> if_then_statement .)
    FALSE           reduce using rule 70 (statement -> if_then_statement .)
    NULL            reduce using rule 70 (statement -> if_then_statement .)
    }               reduce using rule 70 (statement -> if_then_statement .)


state 66

    (71) statement -> if_then_else_statement .

    ;               reduce using rule 71 (statement -> if_then_else_statement .)
    IF              reduce using rule 71 (statement -> if_then_else_statement .)
    BREAK           reduce using rule 71 (statement -> if_then_else_statement .)
    RETURN          reduce using rule 71 (statement -> if_then_else_statement .)
    WHILE           reduce using rule 71 (statement -> if_then_else_statement .)
    DO              reduce using rule 71 (statement -> if_then_else_statement .)
    BOOLEAN         reduce using rule 71 (statement -> if_then_else_statement .)
    VOID            reduce using rule 71 (statement -> if_then_else_statement .)
    BYTE            reduce using rule 71 (statement -> if_then_else_statement .)
    SHORT           reduce using rule 71 (statement -> if_then_else_statement .)
    INT             reduce using rule 71 (statement -> if_then_else_statement .)
    LONG            reduce using rule 71 (statement -> if_then_else_statement .)
    CHAR            reduce using rule 71 (statement -> if_then_else_statement .)
    FLOAT           reduce using rule 71 (statement -> if_then_else_statement .)
    DOUBLE          reduce using rule 71 (statement -> if_then_else_statement .)
    STRING          reduce using rule 71 (statement -> if_then_else_statement .)
    PUBLIC          reduce using rule 71 (statement -> if_then_else_statement .)
    PROTECTED       reduce using rule 71 (statement -> if_then_else_statement .)
    PRIVATE         reduce using rule 71 (statement -> if_then_else_statement .)
    STATIC          reduce using rule 71 (statement -> if_then_else_statement .)
    ABSTRACT        reduce using rule 71 (statement -> if_then_else_statement .)
    FINAL           reduce using rule 71 (statement -> if_then_else_statement .)
    NATIVE          reduce using rule 71 (statement -> if_then_else_statement .)
    NAME            reduce using rule 71 (statement -> if_then_else_statement .)
    UMINUS          reduce using rule 71 (statement -> if_then_else_statement .)
    PLUSPLUS        reduce using rule 71 (statement -> if_then_else_statement .)
    MINUSMINUS      reduce using rule 71 (statement -> if_then_else_statement .)
    NUM             reduce using rule 71 (statement -> if_then_else_statement .)
    CHAR_LITERAL    reduce using rule 71 (statement -> if_then_else_statement .)
    STRING_LITERAL  reduce using rule 71 (statement -> if_then_else_statement .)
    TRUE            reduce using rule 71 (statement -> if_then_else_statement .)
    FALSE           reduce using rule 71 (statement -> if_then_else_statement .)
    NULL            reduce using rule 71 (statement -> if_then_else_statement .)
    }               reduce using rule 71 (statement -> if_then_else_statement .)


state 67

    (72) statement -> while_statement .

    ;               reduce using rule 72 (statement -> while_statement .)
    IF              reduce using rule 72 (statement -> while_statement .)
    BREAK           reduce using rule 72 (statement -> while_statement .)
    RETURN          reduce using rule 72 (statement -> while_statement .)
    WHILE           reduce using rule 72 (statement -> while_statement .)
    DO              reduce using rule 72 (statement -> while_statement .)
    BOOLEAN         reduce using rule 72 (statement -> while_statement .)
    VOID            reduce using rule 72 (statement -> while_statement .)
    BYTE            reduce using rule 72 (statement -> while_statement .)
    SHORT           reduce using rule 72 (statement -> while_statement .)
    INT             reduce using rule 72 (statement -> while_statement .)
    LONG            reduce using rule 72 (statement -> while_statement .)
    CHAR            reduce using rule 72 (statement -> while_statement .)
    FLOAT           reduce using rule 72 (statement -> while_statement .)
    DOUBLE          reduce using rule 72 (statement -> while_statement .)
    STRING          reduce using rule 72 (statement -> while_statement .)
    PUBLIC          reduce using rule 72 (statement -> while_statement .)
    PROTECTED       reduce using rule 72 (statement -> while_statement .)
    PRIVATE         reduce using rule 72 (statement -> while_statement .)
    STATIC          reduce using rule 72 (statement -> while_statement .)
    ABSTRACT        reduce using rule 72 (statement -> while_statement .)
    FINAL           reduce using rule 72 (statement -> while_statement .)
    NATIVE          reduce using rule 72 (statement -> while_statement .)
    NAME            reduce using rule 72 (statement -> while_statement .)
    UMINUS          reduce using rule 72 (statement -> while_statement .)
    PLUSPLUS        reduce using rule 72 (statement -> while_statement .)
    MINUSMINUS      reduce using rule 72 (statement -> while_statement .)
    NUM             reduce using rule 72 (statement -> while_statement .)
    CHAR_LITERAL    reduce using rule 72 (statement -> while_statement .)
    STRING_LITERAL  reduce using rule 72 (statement -> while_statement .)
    TRUE            reduce using rule 72 (statement -> while_statement .)
    FALSE           reduce using rule 72 (statement -> while_statement .)
    NULL            reduce using rule 72 (statement -> while_statement .)
    }               reduce using rule 72 (statement -> while_statement .)


state 68

    (73) statement -> do_while_statement .

    ;               reduce using rule 73 (statement -> do_while_statement .)
    IF              reduce using rule 73 (statement -> do_while_statement .)
    BREAK           reduce using rule 73 (statement -> do_while_statement .)
    RETURN          reduce using rule 73 (statement -> do_while_statement .)
    WHILE           reduce using rule 73 (statement -> do_while_statement .)
    DO              reduce using rule 73 (statement -> do_while_statement .)
    BOOLEAN         reduce using rule 73 (statement -> do_while_statement .)
    VOID            reduce using rule 73 (statement -> do_while_statement .)
    BYTE            reduce using rule 73 (statement -> do_while_statement .)
    SHORT           reduce using rule 73 (statement -> do_while_statement .)
    INT             reduce using rule 73 (statement -> do_while_statement .)
    LONG            reduce using rule 73 (statement -> do_while_statement .)
    CHAR            reduce using rule 73 (statement -> do_while_statement .)
    FLOAT           reduce using rule 73 (statement -> do_while_statement .)
    DOUBLE          reduce using rule 73 (statement -> do_while_statement .)
    STRING          reduce using rule 73 (statement -> do_while_statement .)
    PUBLIC          reduce using rule 73 (statement -> do_while_statement .)
    PROTECTED       reduce using rule 73 (statement -> do_while_statement .)
    PRIVATE         reduce using rule 73 (statement -> do_while_statement .)
    STATIC          reduce using rule 73 (statement -> do_while_statement .)
    ABSTRACT        reduce using rule 73 (statement -> do_while_statement .)
    FINAL           reduce using rule 73 (statement -> do_while_statement .)
    NATIVE          reduce using rule 73 (statement -> do_while_statement .)
    NAME            reduce using rule 73 (statement -> do_while_statement .)
    UMINUS          reduce using rule 73 (statement -> do_while_statement .)
    PLUSPLUS        reduce using rule 73 (statement -> do_while_statement .)
    MINUSMINUS      reduce using rule 73 (statement -> do_while_statement .)
    NUM             reduce using rule 73 (statement -> do_while_statement .)
    CHAR_LITERAL    reduce using rule 73 (statement -> do_while_statement .)
    STRING_LITERAL  reduce using rule 73 (statement -> do_while_statement .)
    TRUE            reduce using rule 73 (statement -> do_while_statement .)
    FALSE           reduce using rule 73 (statement -> do_while_statement .)
    NULL            reduce using rule 73 (statement -> do_while_statement .)
    }               reduce using rule 73 (statement -> do_while_statement .)


state 69

    (63) local_variable_declaration -> type . variable_declarators
    (65) variable_declarators -> . variable_declarator
    (66) variable_declarators -> . variable_declarators , variable_declarator
    (67) variable_declarator -> . variable_declarator_id
    (68) variable_declarator -> . variable_declarator_id ASSIGN Expr
    (28) variable_declarator_id -> . name
    (56) name -> . NAME

    NAME            shift and go to state 35

    variable_declarators           shift and go to state 123
    variable_declarator            shift and go to state 109
    variable_declarator_id         shift and go to state 110
    name                           shift and go to state 124

state 70

    (64) local_variable_declaration -> modifiers . type variable_declarators
    (10) modifiers -> modifiers . modifier
    (33) type -> . primitive_type
    (34) type -> . array_type
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE
    (39) primitive_type -> . BOOLEAN
    (40) primitive_type -> . VOID
    (41) primitive_type -> . BYTE
    (42) primitive_type -> . SHORT
    (43) primitive_type -> . INT
    (44) primitive_type -> . LONG
    (45) primitive_type -> . CHAR
    (46) primitive_type -> . FLOAT
    (47) primitive_type -> . DOUBLE
    (48) primitive_type -> . STRING
    (35) array_type -> . primitive_type dims
    (36) array_type -> . name dims
    (56) name -> . NAME

    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 46
    BYTE            shift and go to state 47
    SHORT           shift and go to state 48
    INT             shift and go to state 49
    LONG            shift and go to state 50
    CHAR            shift and go to state 51
    FLOAT           shift and go to state 52
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 54
    NAME            shift and go to state 35

    type                           shift and go to state 125
    modifier                       shift and go to state 22
    primitive_type                 shift and go to state 43
    array_type                     shift and go to state 44
    name                           shift and go to state 42

state 71

    (74) other_statement -> expression_statement .

    ;               reduce using rule 74 (other_statement -> expression_statement .)
    IF              reduce using rule 74 (other_statement -> expression_statement .)
    BREAK           reduce using rule 74 (other_statement -> expression_statement .)
    RETURN          reduce using rule 74 (other_statement -> expression_statement .)
    WHILE           reduce using rule 74 (other_statement -> expression_statement .)
    DO              reduce using rule 74 (other_statement -> expression_statement .)
    BOOLEAN         reduce using rule 74 (other_statement -> expression_statement .)
    VOID            reduce using rule 74 (other_statement -> expression_statement .)
    BYTE            reduce using rule 74 (other_statement -> expression_statement .)
    SHORT           reduce using rule 74 (other_statement -> expression_statement .)
    INT             reduce using rule 74 (other_statement -> expression_statement .)
    LONG            reduce using rule 74 (other_statement -> expression_statement .)
    CHAR            reduce using rule 74 (other_statement -> expression_statement .)
    FLOAT           reduce using rule 74 (other_statement -> expression_statement .)
    DOUBLE          reduce using rule 74 (other_statement -> expression_statement .)
    STRING          reduce using rule 74 (other_statement -> expression_statement .)
    PUBLIC          reduce using rule 74 (other_statement -> expression_statement .)
    PROTECTED       reduce using rule 74 (other_statement -> expression_statement .)
    PRIVATE         reduce using rule 74 (other_statement -> expression_statement .)
    STATIC          reduce using rule 74 (other_statement -> expression_statement .)
    ABSTRACT        reduce using rule 74 (other_statement -> expression_statement .)
    FINAL           reduce using rule 74 (other_statement -> expression_statement .)
    NATIVE          reduce using rule 74 (other_statement -> expression_statement .)
    NAME            reduce using rule 74 (other_statement -> expression_statement .)
    UMINUS          reduce using rule 74 (other_statement -> expression_statement .)
    PLUSPLUS        reduce using rule 74 (other_statement -> expression_statement .)
    MINUSMINUS      reduce using rule 74 (other_statement -> expression_statement .)
    NUM             reduce using rule 74 (other_statement -> expression_statement .)
    CHAR_LITERAL    reduce using rule 74 (other_statement -> expression_statement .)
    STRING_LITERAL  reduce using rule 74 (other_statement -> expression_statement .)
    TRUE            reduce using rule 74 (other_statement -> expression_statement .)
    FALSE           reduce using rule 74 (other_statement -> expression_statement .)
    NULL            reduce using rule 74 (other_statement -> expression_statement .)
    }               reduce using rule 74 (other_statement -> expression_statement .)


state 72

    (75) other_statement -> break_statement .

    ;               reduce using rule 75 (other_statement -> break_statement .)
    IF              reduce using rule 75 (other_statement -> break_statement .)
    BREAK           reduce using rule 75 (other_statement -> break_statement .)
    RETURN          reduce using rule 75 (other_statement -> break_statement .)
    WHILE           reduce using rule 75 (other_statement -> break_statement .)
    DO              reduce using rule 75 (other_statement -> break_statement .)
    BOOLEAN         reduce using rule 75 (other_statement -> break_statement .)
    VOID            reduce using rule 75 (other_statement -> break_statement .)
    BYTE            reduce using rule 75 (other_statement -> break_statement .)
    SHORT           reduce using rule 75 (other_statement -> break_statement .)
    INT             reduce using rule 75 (other_statement -> break_statement .)
    LONG            reduce using rule 75 (other_statement -> break_statement .)
    CHAR            reduce using rule 75 (other_statement -> break_statement .)
    FLOAT           reduce using rule 75 (other_statement -> break_statement .)
    DOUBLE          reduce using rule 75 (other_statement -> break_statement .)
    STRING          reduce using rule 75 (other_statement -> break_statement .)
    PUBLIC          reduce using rule 75 (other_statement -> break_statement .)
    PROTECTED       reduce using rule 75 (other_statement -> break_statement .)
    PRIVATE         reduce using rule 75 (other_statement -> break_statement .)
    STATIC          reduce using rule 75 (other_statement -> break_statement .)
    ABSTRACT        reduce using rule 75 (other_statement -> break_statement .)
    FINAL           reduce using rule 75 (other_statement -> break_statement .)
    NATIVE          reduce using rule 75 (other_statement -> break_statement .)
    NAME            reduce using rule 75 (other_statement -> break_statement .)
    UMINUS          reduce using rule 75 (other_statement -> break_statement .)
    PLUSPLUS        reduce using rule 75 (other_statement -> break_statement .)
    MINUSMINUS      reduce using rule 75 (other_statement -> break_statement .)
    NUM             reduce using rule 75 (other_statement -> break_statement .)
    CHAR_LITERAL    reduce using rule 75 (other_statement -> break_statement .)
    STRING_LITERAL  reduce using rule 75 (other_statement -> break_statement .)
    TRUE            reduce using rule 75 (other_statement -> break_statement .)
    FALSE           reduce using rule 75 (other_statement -> break_statement .)
    NULL            reduce using rule 75 (other_statement -> break_statement .)
    }               reduce using rule 75 (other_statement -> break_statement .)


state 73

    (76) other_statement -> return_statement .

    ;               reduce using rule 76 (other_statement -> return_statement .)
    IF              reduce using rule 76 (other_statement -> return_statement .)
    BREAK           reduce using rule 76 (other_statement -> return_statement .)
    RETURN          reduce using rule 76 (other_statement -> return_statement .)
    WHILE           reduce using rule 76 (other_statement -> return_statement .)
    DO              reduce using rule 76 (other_statement -> return_statement .)
    BOOLEAN         reduce using rule 76 (other_statement -> return_statement .)
    VOID            reduce using rule 76 (other_statement -> return_statement .)
    BYTE            reduce using rule 76 (other_statement -> return_statement .)
    SHORT           reduce using rule 76 (other_statement -> return_statement .)
    INT             reduce using rule 76 (other_statement -> return_statement .)
    LONG            reduce using rule 76 (other_statement -> return_statement .)
    CHAR            reduce using rule 76 (other_statement -> return_statement .)
    FLOAT           reduce using rule 76 (other_statement -> return_statement .)
    DOUBLE          reduce using rule 76 (other_statement -> return_statement .)
    STRING          reduce using rule 76 (other_statement -> return_statement .)
    PUBLIC          reduce using rule 76 (other_statement -> return_statement .)
    PROTECTED       reduce using rule 76 (other_statement -> return_statement .)
    PRIVATE         reduce using rule 76 (other_statement -> return_statement .)
    STATIC          reduce using rule 76 (other_statement -> return_statement .)
    ABSTRACT        reduce using rule 76 (other_statement -> return_statement .)
    FINAL           reduce using rule 76 (other_statement -> return_statement .)
    NATIVE          reduce using rule 76 (other_statement -> return_statement .)
    NAME            reduce using rule 76 (other_statement -> return_statement .)
    UMINUS          reduce using rule 76 (other_statement -> return_statement .)
    PLUSPLUS        reduce using rule 76 (other_statement -> return_statement .)
    MINUSMINUS      reduce using rule 76 (other_statement -> return_statement .)
    NUM             reduce using rule 76 (other_statement -> return_statement .)
    CHAR_LITERAL    reduce using rule 76 (other_statement -> return_statement .)
    STRING_LITERAL  reduce using rule 76 (other_statement -> return_statement .)
    TRUE            reduce using rule 76 (other_statement -> return_statement .)
    FALSE           reduce using rule 76 (other_statement -> return_statement .)
    NULL            reduce using rule 76 (other_statement -> return_statement .)
    }               reduce using rule 76 (other_statement -> return_statement .)


state 74

    (91) if_then_statement -> IF . ( expression closing_parantheses_if opening_bracket block_statements closing_bracket
    (93) if_then_else_statement -> IF . ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else

    (               shift and go to state 126


state 75

    (96) while_statement -> while . ( expression closing_parantheses opening_bracket block_statements closing_bracket

    (               shift and go to state 127


state 76

    (99) do_while_statement -> do . opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (12) opening_bracket -> . {

    {               shift and go to state 20

    opening_bracket                shift and go to state 128

state 77

    (98) while -> WHILE .

    (               reduce using rule 98 (while -> WHILE .)


state 78

    (78) expression_statement -> statement_expression . ;

    ;               shift and go to state 129


state 79

    (86) break_statement -> BREAK . ;
    (87) break_statement -> BREAK . NAME ;

    ;               shift and go to state 130
    NAME            shift and go to state 131


state 80

    (56) name -> NAME .
    (82) method_invocation -> NAME . ( argument_list )
    (83) method_invocation -> NAME . ( )

    [               reduce using rule 56 (name -> NAME .)
    ASSIGN          reduce using rule 56 (name -> NAME .)
    TIMES_ASSIGN    reduce using rule 56 (name -> NAME .)
    DIVIDE_ASSIGN   reduce using rule 56 (name -> NAME .)
    REMAINDER_ASSIGN reduce using rule 56 (name -> NAME .)
    PLUS_ASSIGN     reduce using rule 56 (name -> NAME .)
    MINUS_ASSIGN    reduce using rule 56 (name -> NAME .)
    PLUSPLUS        reduce using rule 56 (name -> NAME .)
    MINUSMINUS      reduce using rule 56 (name -> NAME .)
    ADD             reduce using rule 56 (name -> NAME .)
    SUB             reduce using rule 56 (name -> NAME .)
    MUL             reduce using rule 56 (name -> NAME .)
    DIV             reduce using rule 56 (name -> NAME .)
    AND             reduce using rule 56 (name -> NAME .)
    OR              reduce using rule 56 (name -> NAME .)
    LESS            reduce using rule 56 (name -> NAME .)
    LTEQ            reduce using rule 56 (name -> NAME .)
    GREATER         reduce using rule 56 (name -> NAME .)
    GTEQ            reduce using rule 56 (name -> NAME .)
    EQ              reduce using rule 56 (name -> NAME .)
    NEQ             reduce using rule 56 (name -> NAME .)
    (               shift and go to state 132


state 81

    (88) return_statement -> RETURN . expression_opt ;
    (89) expression_opt -> . expression
    (90) expression_opt -> . empty
    (101) expression -> . assignment_expression
    (57) empty -> .
    (102) assignment_expression -> . assignment
    (103) assignment_expression -> . Expr
    (104) assignment -> . Location assignment_operator Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (105) Location -> . name
    (106) Location -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    ;               reduce using rule 57 (empty -> .)
    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    expression_opt                 shift and go to state 133
    expression                     shift and go to state 134
    empty                          shift and go to state 135
    assignment_expression          shift and go to state 136
    assignment                     shift and go to state 137
    Expr                           shift and go to state 138
    Location                       shift and go to state 87
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 140
    array_access                   shift and go to state 141
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 82

    (100) do -> DO .

    {               reduce using rule 100 (do -> DO .)


state 83

    (36) array_type -> name . dims
    (105) Location -> name .
    (139) array_access -> name . [ Expr ]
    (116) Expr -> name .
    (37) dims -> . [ ]
    (38) dims -> . dims [ ]

    ASSIGN          reduce using rule 105 (Location -> name .)
    TIMES_ASSIGN    reduce using rule 105 (Location -> name .)
    DIVIDE_ASSIGN   reduce using rule 105 (Location -> name .)
    REMAINDER_ASSIGN reduce using rule 105 (Location -> name .)
    PLUS_ASSIGN     reduce using rule 105 (Location -> name .)
    MINUS_ASSIGN    reduce using rule 105 (Location -> name .)
    [               shift and go to state 142
    PLUSPLUS        reduce using rule 116 (Expr -> name .)
    MINUSMINUS      reduce using rule 116 (Expr -> name .)
    ADD             reduce using rule 116 (Expr -> name .)
    SUB             reduce using rule 116 (Expr -> name .)
    MUL             reduce using rule 116 (Expr -> name .)
    DIV             reduce using rule 116 (Expr -> name .)
    AND             reduce using rule 116 (Expr -> name .)
    OR              reduce using rule 116 (Expr -> name .)
    LESS            reduce using rule 116 (Expr -> name .)
    LTEQ            reduce using rule 116 (Expr -> name .)
    GREATER         reduce using rule 116 (Expr -> name .)
    GTEQ            reduce using rule 116 (Expr -> name .)
    EQ              reduce using rule 116 (Expr -> name .)
    NEQ             reduce using rule 116 (Expr -> name .)

    dims                           shift and go to state 111

state 84

    (79) statement_expression -> assignment .

    ;               reduce using rule 79 (statement_expression -> assignment .)


state 85

    (80) statement_expression -> unary_expression .
    (114) Expr -> unary_expression .

    ;               reduce using rule 80 (statement_expression -> unary_expression .)
    PLUSPLUS        reduce using rule 114 (Expr -> unary_expression .)
    MINUSMINUS      reduce using rule 114 (Expr -> unary_expression .)
    ADD             reduce using rule 114 (Expr -> unary_expression .)
    SUB             reduce using rule 114 (Expr -> unary_expression .)
    MUL             reduce using rule 114 (Expr -> unary_expression .)
    DIV             reduce using rule 114 (Expr -> unary_expression .)
    AND             reduce using rule 114 (Expr -> unary_expression .)
    OR              reduce using rule 114 (Expr -> unary_expression .)
    LESS            reduce using rule 114 (Expr -> unary_expression .)
    LTEQ            reduce using rule 114 (Expr -> unary_expression .)
    GREATER         reduce using rule 114 (Expr -> unary_expression .)
    GTEQ            reduce using rule 114 (Expr -> unary_expression .)
    EQ              reduce using rule 114 (Expr -> unary_expression .)
    NEQ             reduce using rule 114 (Expr -> unary_expression .)


state 86

    (81) statement_expression -> method_invocation .

    ;               reduce using rule 81 (statement_expression -> method_invocation .)


state 87

    (104) assignment -> Location . assignment_operator Expr
    (107) assignment_operator -> . ASSIGN
    (108) assignment_operator -> . TIMES_ASSIGN
    (109) assignment_operator -> . DIVIDE_ASSIGN
    (110) assignment_operator -> . REMAINDER_ASSIGN
    (111) assignment_operator -> . PLUS_ASSIGN
    (112) assignment_operator -> . MINUS_ASSIGN

    ASSIGN          shift and go to state 144
    TIMES_ASSIGN    shift and go to state 145
    DIVIDE_ASSIGN   shift and go to state 146
    REMAINDER_ASSIGN shift and go to state 147
    PLUS_ASSIGN     shift and go to state 148
    MINUS_ASSIGN    shift and go to state 149

    assignment_operator            shift and go to state 143

state 88

    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr

    PLUSPLUS        shift and go to state 150
    MINUSMINUS      shift and go to state 151
    ADD             shift and go to state 152
    SUB             shift and go to state 153
    MUL             shift and go to state 154
    DIV             shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    LESS            shift and go to state 158
    LTEQ            shift and go to state 159
    GREATER         shift and go to state 160
    GTEQ            shift and go to state 161
    EQ              shift and go to state 162
    NEQ             shift and go to state 163


state 89

    (130) unary_expression -> pre_increment_expression .

    ;               reduce using rule 130 (unary_expression -> pre_increment_expression .)
    PLUSPLUS        reduce using rule 130 (unary_expression -> pre_increment_expression .)
    MINUSMINUS      reduce using rule 130 (unary_expression -> pre_increment_expression .)
    ADD             reduce using rule 130 (unary_expression -> pre_increment_expression .)
    SUB             reduce using rule 130 (unary_expression -> pre_increment_expression .)
    MUL             reduce using rule 130 (unary_expression -> pre_increment_expression .)
    DIV             reduce using rule 130 (unary_expression -> pre_increment_expression .)
    AND             reduce using rule 130 (unary_expression -> pre_increment_expression .)
    OR              reduce using rule 130 (unary_expression -> pre_increment_expression .)
    LESS            reduce using rule 130 (unary_expression -> pre_increment_expression .)
    LTEQ            reduce using rule 130 (unary_expression -> pre_increment_expression .)
    GREATER         reduce using rule 130 (unary_expression -> pre_increment_expression .)
    GTEQ            reduce using rule 130 (unary_expression -> pre_increment_expression .)
    EQ              reduce using rule 130 (unary_expression -> pre_increment_expression .)
    NEQ             reduce using rule 130 (unary_expression -> pre_increment_expression .)
    )               reduce using rule 130 (unary_expression -> pre_increment_expression .)
    ,               reduce using rule 130 (unary_expression -> pre_increment_expression .)
    ]               reduce using rule 130 (unary_expression -> pre_increment_expression .)


state 90

    (131) unary_expression -> pre_decrement_expression .

    ;               reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    PLUSPLUS        reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    MINUSMINUS      reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    ADD             reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    SUB             reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    MUL             reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    DIV             reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    AND             reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    OR              reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    LESS            reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    LTEQ            reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    GREATER         reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    GTEQ            reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    EQ              reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    NEQ             reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    )               reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    ,               reduce using rule 131 (unary_expression -> pre_decrement_expression .)
    ]               reduce using rule 131 (unary_expression -> pre_decrement_expression .)


state 91

    (132) unary_expression -> UMINUS . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 164
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 92

    (133) unary_expression -> post_increment_expression .

    ;               reduce using rule 133 (unary_expression -> post_increment_expression .)
    PLUSPLUS        reduce using rule 133 (unary_expression -> post_increment_expression .)
    MINUSMINUS      reduce using rule 133 (unary_expression -> post_increment_expression .)
    ADD             reduce using rule 133 (unary_expression -> post_increment_expression .)
    SUB             reduce using rule 133 (unary_expression -> post_increment_expression .)
    MUL             reduce using rule 133 (unary_expression -> post_increment_expression .)
    DIV             reduce using rule 133 (unary_expression -> post_increment_expression .)
    AND             reduce using rule 133 (unary_expression -> post_increment_expression .)
    OR              reduce using rule 133 (unary_expression -> post_increment_expression .)
    LESS            reduce using rule 133 (unary_expression -> post_increment_expression .)
    LTEQ            reduce using rule 133 (unary_expression -> post_increment_expression .)
    GREATER         reduce using rule 133 (unary_expression -> post_increment_expression .)
    GTEQ            reduce using rule 133 (unary_expression -> post_increment_expression .)
    EQ              reduce using rule 133 (unary_expression -> post_increment_expression .)
    NEQ             reduce using rule 133 (unary_expression -> post_increment_expression .)
    )               reduce using rule 133 (unary_expression -> post_increment_expression .)
    ,               reduce using rule 133 (unary_expression -> post_increment_expression .)
    ]               reduce using rule 133 (unary_expression -> post_increment_expression .)


state 93

    (134) unary_expression -> post_decrement_expression .

    ;               reduce using rule 134 (unary_expression -> post_decrement_expression .)
    PLUSPLUS        reduce using rule 134 (unary_expression -> post_decrement_expression .)
    MINUSMINUS      reduce using rule 134 (unary_expression -> post_decrement_expression .)
    ADD             reduce using rule 134 (unary_expression -> post_decrement_expression .)
    SUB             reduce using rule 134 (unary_expression -> post_decrement_expression .)
    MUL             reduce using rule 134 (unary_expression -> post_decrement_expression .)
    DIV             reduce using rule 134 (unary_expression -> post_decrement_expression .)
    AND             reduce using rule 134 (unary_expression -> post_decrement_expression .)
    OR              reduce using rule 134 (unary_expression -> post_decrement_expression .)
    LESS            reduce using rule 134 (unary_expression -> post_decrement_expression .)
    LTEQ            reduce using rule 134 (unary_expression -> post_decrement_expression .)
    GREATER         reduce using rule 134 (unary_expression -> post_decrement_expression .)
    GTEQ            reduce using rule 134 (unary_expression -> post_decrement_expression .)
    EQ              reduce using rule 134 (unary_expression -> post_decrement_expression .)
    NEQ             reduce using rule 134 (unary_expression -> post_decrement_expression .)
    )               reduce using rule 134 (unary_expression -> post_decrement_expression .)
    ,               reduce using rule 134 (unary_expression -> post_decrement_expression .)
    ]               reduce using rule 134 (unary_expression -> post_decrement_expression .)


state 94

    (106) Location -> array_access .
    (117) Expr -> array_access .

    ASSIGN          reduce using rule 106 (Location -> array_access .)
    TIMES_ASSIGN    reduce using rule 106 (Location -> array_access .)
    DIVIDE_ASSIGN   reduce using rule 106 (Location -> array_access .)
    REMAINDER_ASSIGN reduce using rule 106 (Location -> array_access .)
    PLUS_ASSIGN     reduce using rule 106 (Location -> array_access .)
    MINUS_ASSIGN    reduce using rule 106 (Location -> array_access .)
    PLUSPLUS        reduce using rule 117 (Expr -> array_access .)
    MINUSMINUS      reduce using rule 117 (Expr -> array_access .)
    ADD             reduce using rule 117 (Expr -> array_access .)
    SUB             reduce using rule 117 (Expr -> array_access .)
    MUL             reduce using rule 117 (Expr -> array_access .)
    DIV             reduce using rule 117 (Expr -> array_access .)
    AND             reduce using rule 117 (Expr -> array_access .)
    OR              reduce using rule 117 (Expr -> array_access .)
    LESS            reduce using rule 117 (Expr -> array_access .)
    LTEQ            reduce using rule 117 (Expr -> array_access .)
    GREATER         reduce using rule 117 (Expr -> array_access .)
    GTEQ            reduce using rule 117 (Expr -> array_access .)
    EQ              reduce using rule 117 (Expr -> array_access .)
    NEQ             reduce using rule 117 (Expr -> array_access .)


state 95

    (135) pre_increment_expression -> PLUSPLUS . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 167
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 96

    (136) pre_decrement_expression -> MINUSMINUS . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 168
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 97

    (113) Expr -> exprbinaryexpr .

    PLUSPLUS        reduce using rule 113 (Expr -> exprbinaryexpr .)
    MINUSMINUS      reduce using rule 113 (Expr -> exprbinaryexpr .)
    ADD             reduce using rule 113 (Expr -> exprbinaryexpr .)
    SUB             reduce using rule 113 (Expr -> exprbinaryexpr .)
    MUL             reduce using rule 113 (Expr -> exprbinaryexpr .)
    DIV             reduce using rule 113 (Expr -> exprbinaryexpr .)
    AND             reduce using rule 113 (Expr -> exprbinaryexpr .)
    OR              reduce using rule 113 (Expr -> exprbinaryexpr .)
    LESS            reduce using rule 113 (Expr -> exprbinaryexpr .)
    LTEQ            reduce using rule 113 (Expr -> exprbinaryexpr .)
    GREATER         reduce using rule 113 (Expr -> exprbinaryexpr .)
    GTEQ            reduce using rule 113 (Expr -> exprbinaryexpr .)
    EQ              reduce using rule 113 (Expr -> exprbinaryexpr .)
    NEQ             reduce using rule 113 (Expr -> exprbinaryexpr .)
    ;               reduce using rule 113 (Expr -> exprbinaryexpr .)
    )               reduce using rule 113 (Expr -> exprbinaryexpr .)
    ,               reduce using rule 113 (Expr -> exprbinaryexpr .)
    ]               reduce using rule 113 (Expr -> exprbinaryexpr .)


state 98

    (115) Expr -> literal .

    PLUSPLUS        reduce using rule 115 (Expr -> literal .)
    MINUSMINUS      reduce using rule 115 (Expr -> literal .)
    ADD             reduce using rule 115 (Expr -> literal .)
    SUB             reduce using rule 115 (Expr -> literal .)
    MUL             reduce using rule 115 (Expr -> literal .)
    DIV             reduce using rule 115 (Expr -> literal .)
    AND             reduce using rule 115 (Expr -> literal .)
    OR              reduce using rule 115 (Expr -> literal .)
    LESS            reduce using rule 115 (Expr -> literal .)
    LTEQ            reduce using rule 115 (Expr -> literal .)
    GREATER         reduce using rule 115 (Expr -> literal .)
    GTEQ            reduce using rule 115 (Expr -> literal .)
    EQ              reduce using rule 115 (Expr -> literal .)
    NEQ             reduce using rule 115 (Expr -> literal .)
    ;               reduce using rule 115 (Expr -> literal .)
    )               reduce using rule 115 (Expr -> literal .)
    ,               reduce using rule 115 (Expr -> literal .)
    ]               reduce using rule 115 (Expr -> literal .)


state 99

    (140) literal -> NUM .

    PLUSPLUS        reduce using rule 140 (literal -> NUM .)
    MINUSMINUS      reduce using rule 140 (literal -> NUM .)
    ADD             reduce using rule 140 (literal -> NUM .)
    SUB             reduce using rule 140 (literal -> NUM .)
    MUL             reduce using rule 140 (literal -> NUM .)
    DIV             reduce using rule 140 (literal -> NUM .)
    AND             reduce using rule 140 (literal -> NUM .)
    OR              reduce using rule 140 (literal -> NUM .)
    LESS            reduce using rule 140 (literal -> NUM .)
    LTEQ            reduce using rule 140 (literal -> NUM .)
    GREATER         reduce using rule 140 (literal -> NUM .)
    GTEQ            reduce using rule 140 (literal -> NUM .)
    EQ              reduce using rule 140 (literal -> NUM .)
    NEQ             reduce using rule 140 (literal -> NUM .)
    ;               reduce using rule 140 (literal -> NUM .)
    )               reduce using rule 140 (literal -> NUM .)
    ,               reduce using rule 140 (literal -> NUM .)
    ]               reduce using rule 140 (literal -> NUM .)


state 100

    (141) literal -> CHAR_LITERAL .

    PLUSPLUS        reduce using rule 141 (literal -> CHAR_LITERAL .)
    MINUSMINUS      reduce using rule 141 (literal -> CHAR_LITERAL .)
    ADD             reduce using rule 141 (literal -> CHAR_LITERAL .)
    SUB             reduce using rule 141 (literal -> CHAR_LITERAL .)
    MUL             reduce using rule 141 (literal -> CHAR_LITERAL .)
    DIV             reduce using rule 141 (literal -> CHAR_LITERAL .)
    AND             reduce using rule 141 (literal -> CHAR_LITERAL .)
    OR              reduce using rule 141 (literal -> CHAR_LITERAL .)
    LESS            reduce using rule 141 (literal -> CHAR_LITERAL .)
    LTEQ            reduce using rule 141 (literal -> CHAR_LITERAL .)
    GREATER         reduce using rule 141 (literal -> CHAR_LITERAL .)
    GTEQ            reduce using rule 141 (literal -> CHAR_LITERAL .)
    EQ              reduce using rule 141 (literal -> CHAR_LITERAL .)
    NEQ             reduce using rule 141 (literal -> CHAR_LITERAL .)
    ;               reduce using rule 141 (literal -> CHAR_LITERAL .)
    )               reduce using rule 141 (literal -> CHAR_LITERAL .)
    ,               reduce using rule 141 (literal -> CHAR_LITERAL .)
    ]               reduce using rule 141 (literal -> CHAR_LITERAL .)


state 101

    (142) literal -> STRING_LITERAL .

    PLUSPLUS        reduce using rule 142 (literal -> STRING_LITERAL .)
    MINUSMINUS      reduce using rule 142 (literal -> STRING_LITERAL .)
    ADD             reduce using rule 142 (literal -> STRING_LITERAL .)
    SUB             reduce using rule 142 (literal -> STRING_LITERAL .)
    MUL             reduce using rule 142 (literal -> STRING_LITERAL .)
    DIV             reduce using rule 142 (literal -> STRING_LITERAL .)
    AND             reduce using rule 142 (literal -> STRING_LITERAL .)
    OR              reduce using rule 142 (literal -> STRING_LITERAL .)
    LESS            reduce using rule 142 (literal -> STRING_LITERAL .)
    LTEQ            reduce using rule 142 (literal -> STRING_LITERAL .)
    GREATER         reduce using rule 142 (literal -> STRING_LITERAL .)
    GTEQ            reduce using rule 142 (literal -> STRING_LITERAL .)
    EQ              reduce using rule 142 (literal -> STRING_LITERAL .)
    NEQ             reduce using rule 142 (literal -> STRING_LITERAL .)
    ;               reduce using rule 142 (literal -> STRING_LITERAL .)
    )               reduce using rule 142 (literal -> STRING_LITERAL .)
    ,               reduce using rule 142 (literal -> STRING_LITERAL .)
    ]               reduce using rule 142 (literal -> STRING_LITERAL .)


state 102

    (143) literal -> TRUE .

    PLUSPLUS        reduce using rule 143 (literal -> TRUE .)
    MINUSMINUS      reduce using rule 143 (literal -> TRUE .)
    ADD             reduce using rule 143 (literal -> TRUE .)
    SUB             reduce using rule 143 (literal -> TRUE .)
    MUL             reduce using rule 143 (literal -> TRUE .)
    DIV             reduce using rule 143 (literal -> TRUE .)
    AND             reduce using rule 143 (literal -> TRUE .)
    OR              reduce using rule 143 (literal -> TRUE .)
    LESS            reduce using rule 143 (literal -> TRUE .)
    LTEQ            reduce using rule 143 (literal -> TRUE .)
    GREATER         reduce using rule 143 (literal -> TRUE .)
    GTEQ            reduce using rule 143 (literal -> TRUE .)
    EQ              reduce using rule 143 (literal -> TRUE .)
    NEQ             reduce using rule 143 (literal -> TRUE .)
    ;               reduce using rule 143 (literal -> TRUE .)
    )               reduce using rule 143 (literal -> TRUE .)
    ,               reduce using rule 143 (literal -> TRUE .)
    ]               reduce using rule 143 (literal -> TRUE .)


state 103

    (144) literal -> FALSE .

    PLUSPLUS        reduce using rule 144 (literal -> FALSE .)
    MINUSMINUS      reduce using rule 144 (literal -> FALSE .)
    ADD             reduce using rule 144 (literal -> FALSE .)
    SUB             reduce using rule 144 (literal -> FALSE .)
    MUL             reduce using rule 144 (literal -> FALSE .)
    DIV             reduce using rule 144 (literal -> FALSE .)
    AND             reduce using rule 144 (literal -> FALSE .)
    OR              reduce using rule 144 (literal -> FALSE .)
    LESS            reduce using rule 144 (literal -> FALSE .)
    LTEQ            reduce using rule 144 (literal -> FALSE .)
    GREATER         reduce using rule 144 (literal -> FALSE .)
    GTEQ            reduce using rule 144 (literal -> FALSE .)
    EQ              reduce using rule 144 (literal -> FALSE .)
    NEQ             reduce using rule 144 (literal -> FALSE .)
    ;               reduce using rule 144 (literal -> FALSE .)
    )               reduce using rule 144 (literal -> FALSE .)
    ,               reduce using rule 144 (literal -> FALSE .)
    ]               reduce using rule 144 (literal -> FALSE .)


state 104

    (145) literal -> NULL .

    PLUSPLUS        reduce using rule 145 (literal -> NULL .)
    MINUSMINUS      reduce using rule 145 (literal -> NULL .)
    ADD             reduce using rule 145 (literal -> NULL .)
    SUB             reduce using rule 145 (literal -> NULL .)
    MUL             reduce using rule 145 (literal -> NULL .)
    DIV             reduce using rule 145 (literal -> NULL .)
    AND             reduce using rule 145 (literal -> NULL .)
    OR              reduce using rule 145 (literal -> NULL .)
    LESS            reduce using rule 145 (literal -> NULL .)
    LTEQ            reduce using rule 145 (literal -> NULL .)
    GREATER         reduce using rule 145 (literal -> NULL .)
    GTEQ            reduce using rule 145 (literal -> NULL .)
    EQ              reduce using rule 145 (literal -> NULL .)
    NEQ             reduce using rule 145 (literal -> NULL .)
    ;               reduce using rule 145 (literal -> NULL .)
    )               reduce using rule 145 (literal -> NULL .)
    ,               reduce using rule 145 (literal -> NULL .)
    ]               reduce using rule 145 (literal -> NULL .)


state 105

    (14) tmain -> tmain_header opening_bracket method_body . closing_bracket
    (13) closing_bracket -> . }

    }               shift and go to state 38

    closing_bracket                shift and go to state 169

state 106

    (22) field_declartaion -> modifiers_opt type variable_declarators . ;
    (66) variable_declarators -> variable_declarators . , variable_declarator

    ;               shift and go to state 170
    ,               shift and go to state 171


state 107

    (25) method_header_name -> modifiers_opt type name .
    (28) variable_declarator_id -> name .

    (               reduce using rule 25 (method_header_name -> modifiers_opt type name .)
    ASSIGN          reduce using rule 28 (variable_declarator_id -> name .)
    ;               reduce using rule 28 (variable_declarator_id -> name .)
    ,               reduce using rule 28 (variable_declarator_id -> name .)


state 108

    (16) tmain_name -> modifiers_opt type MAIN .

    (               reduce using rule 16 (tmain_name -> modifiers_opt type MAIN .)


state 109

    (65) variable_declarators -> variable_declarator .

    ;               reduce using rule 65 (variable_declarators -> variable_declarator .)
    ,               reduce using rule 65 (variable_declarators -> variable_declarator .)


state 110

    (67) variable_declarator -> variable_declarator_id .
    (68) variable_declarator -> variable_declarator_id . ASSIGN Expr

    ;               reduce using rule 67 (variable_declarator -> variable_declarator_id .)
    ,               reduce using rule 67 (variable_declarator -> variable_declarator_id .)
    ASSIGN          shift and go to state 172


state 111

    (36) array_type -> name dims .
    (38) dims -> dims . [ ]

    MAIN            reduce using rule 36 (array_type -> name dims .)
    NAME            reduce using rule 36 (array_type -> name dims .)
    [               shift and go to state 173


state 112

    (37) dims -> [ . ]

    ]               shift and go to state 174


state 113

    (35) array_type -> primitive_type dims .
    (38) dims -> dims . [ ]

    MAIN            reduce using rule 35 (array_type -> primitive_type dims .)
    NAME            reduce using rule 35 (array_type -> primitive_type dims .)
    [               shift and go to state 173


state 114

    (24) method_header -> method_header_name ( formal_parameter_list_opt . )

    )               shift and go to state 175


state 115

    (29) formal_parameter_list_opt -> formal_parameter_list .
    (32) formal_parameter_list -> formal_parameter_list . , formal_parameter

    )               reduce using rule 29 (formal_parameter_list_opt -> formal_parameter_list .)
    ,               shift and go to state 176


state 116

    (30) formal_parameter_list_opt -> empty .

    )               reduce using rule 30 (formal_parameter_list_opt -> empty .)


state 117

    (31) formal_parameter_list -> formal_parameter .

    ,               reduce using rule 31 (formal_parameter_list -> formal_parameter .)
    )               reduce using rule 31 (formal_parameter_list -> formal_parameter .)


state 118

    (27) formal_parameter -> type . variable_declarator_id
    (28) variable_declarator_id -> . name
    (56) name -> . NAME

    NAME            shift and go to state 35

    variable_declarator_id         shift and go to state 177
    name                           shift and go to state 124

state 119

    (15) tmain_header -> tmain_name ( formal_parameter_list_opt . )

    )               shift and go to state 178


state 120

    (23) method_declaration -> method_header opening_bracket method_body closing_bracket .

    }               reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    PUBLIC          reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    PROTECTED       reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    PRIVATE         reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    STATIC          reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    ABSTRACT        reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    FINAL           reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    NATIVE          reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    BOOLEAN         reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    VOID            reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    BYTE            reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    SHORT           reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    INT             reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    LONG            reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    CHAR            reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    FLOAT           reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    DOUBLE          reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    STRING          reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)
    NAME            reduce using rule 23 (method_declaration -> method_header opening_bracket method_body closing_bracket .)


state 121

    (59) block_statements -> block_statements block_statement .

    ;               reduce using rule 59 (block_statements -> block_statements block_statement .)
    IF              reduce using rule 59 (block_statements -> block_statements block_statement .)
    BREAK           reduce using rule 59 (block_statements -> block_statements block_statement .)
    RETURN          reduce using rule 59 (block_statements -> block_statements block_statement .)
    WHILE           reduce using rule 59 (block_statements -> block_statements block_statement .)
    DO              reduce using rule 59 (block_statements -> block_statements block_statement .)
    BOOLEAN         reduce using rule 59 (block_statements -> block_statements block_statement .)
    VOID            reduce using rule 59 (block_statements -> block_statements block_statement .)
    BYTE            reduce using rule 59 (block_statements -> block_statements block_statement .)
    SHORT           reduce using rule 59 (block_statements -> block_statements block_statement .)
    INT             reduce using rule 59 (block_statements -> block_statements block_statement .)
    LONG            reduce using rule 59 (block_statements -> block_statements block_statement .)
    CHAR            reduce using rule 59 (block_statements -> block_statements block_statement .)
    FLOAT           reduce using rule 59 (block_statements -> block_statements block_statement .)
    DOUBLE          reduce using rule 59 (block_statements -> block_statements block_statement .)
    STRING          reduce using rule 59 (block_statements -> block_statements block_statement .)
    PUBLIC          reduce using rule 59 (block_statements -> block_statements block_statement .)
    PROTECTED       reduce using rule 59 (block_statements -> block_statements block_statement .)
    PRIVATE         reduce using rule 59 (block_statements -> block_statements block_statement .)
    STATIC          reduce using rule 59 (block_statements -> block_statements block_statement .)
    ABSTRACT        reduce using rule 59 (block_statements -> block_statements block_statement .)
    FINAL           reduce using rule 59 (block_statements -> block_statements block_statement .)
    NATIVE          reduce using rule 59 (block_statements -> block_statements block_statement .)
    NAME            reduce using rule 59 (block_statements -> block_statements block_statement .)
    UMINUS          reduce using rule 59 (block_statements -> block_statements block_statement .)
    PLUSPLUS        reduce using rule 59 (block_statements -> block_statements block_statement .)
    MINUSMINUS      reduce using rule 59 (block_statements -> block_statements block_statement .)
    NUM             reduce using rule 59 (block_statements -> block_statements block_statement .)
    CHAR_LITERAL    reduce using rule 59 (block_statements -> block_statements block_statement .)
    STRING_LITERAL  reduce using rule 59 (block_statements -> block_statements block_statement .)
    TRUE            reduce using rule 59 (block_statements -> block_statements block_statement .)
    FALSE           reduce using rule 59 (block_statements -> block_statements block_statement .)
    NULL            reduce using rule 59 (block_statements -> block_statements block_statement .)
    }               reduce using rule 59 (block_statements -> block_statements block_statement .)


state 122

    (62) local_variable_declaration_statement -> local_variable_declaration ; .

    ;               reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    IF              reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    BREAK           reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    RETURN          reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    WHILE           reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    DO              reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    BOOLEAN         reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    VOID            reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    BYTE            reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    SHORT           reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    INT             reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    LONG            reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    CHAR            reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    FLOAT           reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    DOUBLE          reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    STRING          reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    PUBLIC          reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    PROTECTED       reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    PRIVATE         reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    STATIC          reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    ABSTRACT        reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    FINAL           reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    NATIVE          reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    NAME            reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    UMINUS          reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    PLUSPLUS        reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    MINUSMINUS      reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    NUM             reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    CHAR_LITERAL    reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    STRING_LITERAL  reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    TRUE            reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    FALSE           reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    NULL            reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)
    }               reduce using rule 62 (local_variable_declaration_statement -> local_variable_declaration ; .)


state 123

    (63) local_variable_declaration -> type variable_declarators .
    (66) variable_declarators -> variable_declarators . , variable_declarator

    ;               reduce using rule 63 (local_variable_declaration -> type variable_declarators .)
    ,               shift and go to state 171


state 124

    (28) variable_declarator_id -> name .

    ASSIGN          reduce using rule 28 (variable_declarator_id -> name .)
    ,               reduce using rule 28 (variable_declarator_id -> name .)
    ;               reduce using rule 28 (variable_declarator_id -> name .)
    )               reduce using rule 28 (variable_declarator_id -> name .)


state 125

    (64) local_variable_declaration -> modifiers type . variable_declarators
    (65) variable_declarators -> . variable_declarator
    (66) variable_declarators -> . variable_declarators , variable_declarator
    (67) variable_declarator -> . variable_declarator_id
    (68) variable_declarator -> . variable_declarator_id ASSIGN Expr
    (28) variable_declarator_id -> . name
    (56) name -> . NAME

    NAME            shift and go to state 35

    variable_declarators           shift and go to state 179
    variable_declarator            shift and go to state 109
    variable_declarator_id         shift and go to state 110
    name                           shift and go to state 124

state 126

    (91) if_then_statement -> IF ( . expression closing_parantheses_if opening_bracket block_statements closing_bracket
    (93) if_then_else_statement -> IF ( . expression closing_parantheses_if opening_bracket block_statements closing_bracket else
    (101) expression -> . assignment_expression
    (102) assignment_expression -> . assignment
    (103) assignment_expression -> . Expr
    (104) assignment -> . Location assignment_operator Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (105) Location -> . name
    (106) Location -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    expression                     shift and go to state 180
    assignment_expression          shift and go to state 136
    assignment                     shift and go to state 137
    Expr                           shift and go to state 138
    Location                       shift and go to state 87
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 140
    array_access                   shift and go to state 141
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 127

    (96) while_statement -> while ( . expression closing_parantheses opening_bracket block_statements closing_bracket
    (101) expression -> . assignment_expression
    (102) assignment_expression -> . assignment
    (103) assignment_expression -> . Expr
    (104) assignment -> . Location assignment_operator Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (105) Location -> . name
    (106) Location -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    expression                     shift and go to state 181
    assignment_expression          shift and go to state 136
    assignment                     shift and go to state 137
    Expr                           shift and go to state 138
    Location                       shift and go to state 87
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 140
    array_access                   shift and go to state 141
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 128

    (99) do_while_statement -> do opening_bracket . block_statements closing_bracket WHILE ( expression ) ;
    (58) block_statements -> . block_statement
    (59) block_statements -> . block_statements block_statement
    (60) block_statement -> . local_variable_declaration_statement
    (61) block_statement -> . statement
    (62) local_variable_declaration_statement -> . local_variable_declaration ;
    (69) statement -> . other_statement
    (70) statement -> . if_then_statement
    (71) statement -> . if_then_else_statement
    (72) statement -> . while_statement
    (73) statement -> . do_while_statement
    (63) local_variable_declaration -> . type variable_declarators
    (64) local_variable_declaration -> . modifiers type variable_declarators
    (74) other_statement -> . expression_statement
    (75) other_statement -> . break_statement
    (76) other_statement -> . return_statement
    (77) other_statement -> . ;
    (91) if_then_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket
    (93) if_then_else_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else
    (96) while_statement -> . while ( expression closing_parantheses opening_bracket block_statements closing_bracket
    (99) do_while_statement -> . do opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (33) type -> . primitive_type
    (34) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (78) expression_statement -> . statement_expression ;
    (86) break_statement -> . BREAK ;
    (87) break_statement -> . BREAK NAME ;
    (88) return_statement -> . RETURN expression_opt ;
    (98) while -> . WHILE
    (100) do -> . DO
    (39) primitive_type -> . BOOLEAN
    (40) primitive_type -> . VOID
    (41) primitive_type -> . BYTE
    (42) primitive_type -> . SHORT
    (43) primitive_type -> . INT
    (44) primitive_type -> . LONG
    (45) primitive_type -> . CHAR
    (46) primitive_type -> . FLOAT
    (47) primitive_type -> . DOUBLE
    (48) primitive_type -> . STRING
    (35) array_type -> . primitive_type dims
    (36) array_type -> . name dims
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE
    (79) statement_expression -> . assignment
    (80) statement_expression -> . unary_expression
    (81) statement_expression -> . method_invocation
    (56) name -> . NAME
    (104) assignment -> . Location assignment_operator Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (82) method_invocation -> . NAME ( argument_list )
    (83) method_invocation -> . NAME ( )
    (105) Location -> . name
    (106) Location -> . array_access
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS
    (139) array_access -> . name [ Expr ]
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL

    ;               shift and go to state 63
    IF              shift and go to state 74
    BREAK           shift and go to state 79
    RETURN          shift and go to state 81
    WHILE           shift and go to state 77
    DO              shift and go to state 82
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 46
    BYTE            shift and go to state 47
    SHORT           shift and go to state 48
    INT             shift and go to state 49
    LONG            shift and go to state 50
    CHAR            shift and go to state 51
    FLOAT           shift and go to state 52
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 54
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    NAME            shift and go to state 80
    UMINUS          shift and go to state 91
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104

    do                             shift and go to state 76
    block_statements               shift and go to state 182
    block_statement                shift and go to state 59
    local_variable_declaration_statement shift and go to state 60
    statement                      shift and go to state 61
    local_variable_declaration     shift and go to state 62
    other_statement                shift and go to state 64
    if_then_statement              shift and go to state 65
    if_then_else_statement         shift and go to state 66
    while_statement                shift and go to state 67
    do_while_statement             shift and go to state 68
    type                           shift and go to state 69
    modifiers                      shift and go to state 70
    expression_statement           shift and go to state 71
    break_statement                shift and go to state 72
    return_statement               shift and go to state 73
    while                          shift and go to state 75
    primitive_type                 shift and go to state 43
    array_type                     shift and go to state 44
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 78
    name                           shift and go to state 83
    assignment                     shift and go to state 84
    unary_expression               shift and go to state 85
    method_invocation              shift and go to state 86
    Location                       shift and go to state 87
    Expr                           shift and go to state 88
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93
    array_access                   shift and go to state 94
    exprbinaryexpr                 shift and go to state 97
    literal                        shift and go to state 98

state 129

    (78) expression_statement -> statement_expression ; .

    ;               reduce using rule 78 (expression_statement -> statement_expression ; .)
    IF              reduce using rule 78 (expression_statement -> statement_expression ; .)
    BREAK           reduce using rule 78 (expression_statement -> statement_expression ; .)
    RETURN          reduce using rule 78 (expression_statement -> statement_expression ; .)
    WHILE           reduce using rule 78 (expression_statement -> statement_expression ; .)
    DO              reduce using rule 78 (expression_statement -> statement_expression ; .)
    BOOLEAN         reduce using rule 78 (expression_statement -> statement_expression ; .)
    VOID            reduce using rule 78 (expression_statement -> statement_expression ; .)
    BYTE            reduce using rule 78 (expression_statement -> statement_expression ; .)
    SHORT           reduce using rule 78 (expression_statement -> statement_expression ; .)
    INT             reduce using rule 78 (expression_statement -> statement_expression ; .)
    LONG            reduce using rule 78 (expression_statement -> statement_expression ; .)
    CHAR            reduce using rule 78 (expression_statement -> statement_expression ; .)
    FLOAT           reduce using rule 78 (expression_statement -> statement_expression ; .)
    DOUBLE          reduce using rule 78 (expression_statement -> statement_expression ; .)
    STRING          reduce using rule 78 (expression_statement -> statement_expression ; .)
    PUBLIC          reduce using rule 78 (expression_statement -> statement_expression ; .)
    PROTECTED       reduce using rule 78 (expression_statement -> statement_expression ; .)
    PRIVATE         reduce using rule 78 (expression_statement -> statement_expression ; .)
    STATIC          reduce using rule 78 (expression_statement -> statement_expression ; .)
    ABSTRACT        reduce using rule 78 (expression_statement -> statement_expression ; .)
    FINAL           reduce using rule 78 (expression_statement -> statement_expression ; .)
    NATIVE          reduce using rule 78 (expression_statement -> statement_expression ; .)
    NAME            reduce using rule 78 (expression_statement -> statement_expression ; .)
    UMINUS          reduce using rule 78 (expression_statement -> statement_expression ; .)
    PLUSPLUS        reduce using rule 78 (expression_statement -> statement_expression ; .)
    MINUSMINUS      reduce using rule 78 (expression_statement -> statement_expression ; .)
    NUM             reduce using rule 78 (expression_statement -> statement_expression ; .)
    CHAR_LITERAL    reduce using rule 78 (expression_statement -> statement_expression ; .)
    STRING_LITERAL  reduce using rule 78 (expression_statement -> statement_expression ; .)
    TRUE            reduce using rule 78 (expression_statement -> statement_expression ; .)
    FALSE           reduce using rule 78 (expression_statement -> statement_expression ; .)
    NULL            reduce using rule 78 (expression_statement -> statement_expression ; .)
    }               reduce using rule 78 (expression_statement -> statement_expression ; .)


state 130

    (86) break_statement -> BREAK ; .

    ;               reduce using rule 86 (break_statement -> BREAK ; .)
    IF              reduce using rule 86 (break_statement -> BREAK ; .)
    BREAK           reduce using rule 86 (break_statement -> BREAK ; .)
    RETURN          reduce using rule 86 (break_statement -> BREAK ; .)
    WHILE           reduce using rule 86 (break_statement -> BREAK ; .)
    DO              reduce using rule 86 (break_statement -> BREAK ; .)
    BOOLEAN         reduce using rule 86 (break_statement -> BREAK ; .)
    VOID            reduce using rule 86 (break_statement -> BREAK ; .)
    BYTE            reduce using rule 86 (break_statement -> BREAK ; .)
    SHORT           reduce using rule 86 (break_statement -> BREAK ; .)
    INT             reduce using rule 86 (break_statement -> BREAK ; .)
    LONG            reduce using rule 86 (break_statement -> BREAK ; .)
    CHAR            reduce using rule 86 (break_statement -> BREAK ; .)
    FLOAT           reduce using rule 86 (break_statement -> BREAK ; .)
    DOUBLE          reduce using rule 86 (break_statement -> BREAK ; .)
    STRING          reduce using rule 86 (break_statement -> BREAK ; .)
    PUBLIC          reduce using rule 86 (break_statement -> BREAK ; .)
    PROTECTED       reduce using rule 86 (break_statement -> BREAK ; .)
    PRIVATE         reduce using rule 86 (break_statement -> BREAK ; .)
    STATIC          reduce using rule 86 (break_statement -> BREAK ; .)
    ABSTRACT        reduce using rule 86 (break_statement -> BREAK ; .)
    FINAL           reduce using rule 86 (break_statement -> BREAK ; .)
    NATIVE          reduce using rule 86 (break_statement -> BREAK ; .)
    NAME            reduce using rule 86 (break_statement -> BREAK ; .)
    UMINUS          reduce using rule 86 (break_statement -> BREAK ; .)
    PLUSPLUS        reduce using rule 86 (break_statement -> BREAK ; .)
    MINUSMINUS      reduce using rule 86 (break_statement -> BREAK ; .)
    NUM             reduce using rule 86 (break_statement -> BREAK ; .)
    CHAR_LITERAL    reduce using rule 86 (break_statement -> BREAK ; .)
    STRING_LITERAL  reduce using rule 86 (break_statement -> BREAK ; .)
    TRUE            reduce using rule 86 (break_statement -> BREAK ; .)
    FALSE           reduce using rule 86 (break_statement -> BREAK ; .)
    NULL            reduce using rule 86 (break_statement -> BREAK ; .)
    }               reduce using rule 86 (break_statement -> BREAK ; .)


state 131

    (87) break_statement -> BREAK NAME . ;

    ;               shift and go to state 183


state 132

    (82) method_invocation -> NAME ( . argument_list )
    (83) method_invocation -> NAME ( . )
    (84) argument_list -> . expression
    (85) argument_list -> . argument_list , expression
    (101) expression -> . assignment_expression
    (102) assignment_expression -> . assignment
    (103) assignment_expression -> . Expr
    (104) assignment -> . Location assignment_operator Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (105) Location -> . name
    (106) Location -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    )               shift and go to state 185
    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    argument_list                  shift and go to state 184
    expression                     shift and go to state 186
    assignment_expression          shift and go to state 136
    assignment                     shift and go to state 137
    Expr                           shift and go to state 138
    Location                       shift and go to state 87
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 140
    array_access                   shift and go to state 141
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 133

    (88) return_statement -> RETURN expression_opt . ;

    ;               shift and go to state 187


state 134

    (89) expression_opt -> expression .

    ;               reduce using rule 89 (expression_opt -> expression .)


state 135

    (90) expression_opt -> empty .

    ;               reduce using rule 90 (expression_opt -> empty .)


state 136

    (101) expression -> assignment_expression .

    ;               reduce using rule 101 (expression -> assignment_expression .)
    )               reduce using rule 101 (expression -> assignment_expression .)
    ,               reduce using rule 101 (expression -> assignment_expression .)


state 137

    (102) assignment_expression -> assignment .

    ;               reduce using rule 102 (assignment_expression -> assignment .)
    )               reduce using rule 102 (assignment_expression -> assignment .)
    ,               reduce using rule 102 (assignment_expression -> assignment .)


state 138

    (103) assignment_expression -> Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    ;               reduce using rule 103 (assignment_expression -> Expr .)
    )               reduce using rule 103 (assignment_expression -> Expr .)
    ,               reduce using rule 103 (assignment_expression -> Expr .)
    ADD             shift and go to state 152
    SUB             shift and go to state 153
    MUL             shift and go to state 154
    DIV             shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    LESS            shift and go to state 158
    LTEQ            shift and go to state 159
    GREATER         shift and go to state 160
    GTEQ            shift and go to state 161
    EQ              shift and go to state 162
    NEQ             shift and go to state 163
    PLUSPLUS        shift and go to state 150
    MINUSMINUS      shift and go to state 151


state 139

    (114) Expr -> unary_expression .

    ADD             reduce using rule 114 (Expr -> unary_expression .)
    SUB             reduce using rule 114 (Expr -> unary_expression .)
    MUL             reduce using rule 114 (Expr -> unary_expression .)
    DIV             reduce using rule 114 (Expr -> unary_expression .)
    AND             reduce using rule 114 (Expr -> unary_expression .)
    OR              reduce using rule 114 (Expr -> unary_expression .)
    LESS            reduce using rule 114 (Expr -> unary_expression .)
    LTEQ            reduce using rule 114 (Expr -> unary_expression .)
    GREATER         reduce using rule 114 (Expr -> unary_expression .)
    GTEQ            reduce using rule 114 (Expr -> unary_expression .)
    EQ              reduce using rule 114 (Expr -> unary_expression .)
    NEQ             reduce using rule 114 (Expr -> unary_expression .)
    PLUSPLUS        reduce using rule 114 (Expr -> unary_expression .)
    MINUSMINUS      reduce using rule 114 (Expr -> unary_expression .)
    ;               reduce using rule 114 (Expr -> unary_expression .)
    )               reduce using rule 114 (Expr -> unary_expression .)
    ,               reduce using rule 114 (Expr -> unary_expression .)
    ]               reduce using rule 114 (Expr -> unary_expression .)


state 140

    (116) Expr -> name .
    (105) Location -> name .
    (139) array_access -> name . [ Expr ]

    ADD             reduce using rule 116 (Expr -> name .)
    SUB             reduce using rule 116 (Expr -> name .)
    MUL             reduce using rule 116 (Expr -> name .)
    DIV             reduce using rule 116 (Expr -> name .)
    AND             reduce using rule 116 (Expr -> name .)
    OR              reduce using rule 116 (Expr -> name .)
    LESS            reduce using rule 116 (Expr -> name .)
    LTEQ            reduce using rule 116 (Expr -> name .)
    GREATER         reduce using rule 116 (Expr -> name .)
    GTEQ            reduce using rule 116 (Expr -> name .)
    EQ              reduce using rule 116 (Expr -> name .)
    NEQ             reduce using rule 116 (Expr -> name .)
    PLUSPLUS        reduce using rule 116 (Expr -> name .)
    MINUSMINUS      reduce using rule 116 (Expr -> name .)
    ;               reduce using rule 116 (Expr -> name .)
    )               reduce using rule 116 (Expr -> name .)
    ,               reduce using rule 116 (Expr -> name .)
    ASSIGN          reduce using rule 105 (Location -> name .)
    TIMES_ASSIGN    reduce using rule 105 (Location -> name .)
    DIVIDE_ASSIGN   reduce using rule 105 (Location -> name .)
    REMAINDER_ASSIGN reduce using rule 105 (Location -> name .)
    PLUS_ASSIGN     reduce using rule 105 (Location -> name .)
    MINUS_ASSIGN    reduce using rule 105 (Location -> name .)
    [               shift and go to state 188


state 141

    (117) Expr -> array_access .
    (106) Location -> array_access .

    ADD             reduce using rule 117 (Expr -> array_access .)
    SUB             reduce using rule 117 (Expr -> array_access .)
    MUL             reduce using rule 117 (Expr -> array_access .)
    DIV             reduce using rule 117 (Expr -> array_access .)
    AND             reduce using rule 117 (Expr -> array_access .)
    OR              reduce using rule 117 (Expr -> array_access .)
    LESS            reduce using rule 117 (Expr -> array_access .)
    LTEQ            reduce using rule 117 (Expr -> array_access .)
    GREATER         reduce using rule 117 (Expr -> array_access .)
    GTEQ            reduce using rule 117 (Expr -> array_access .)
    EQ              reduce using rule 117 (Expr -> array_access .)
    NEQ             reduce using rule 117 (Expr -> array_access .)
    PLUSPLUS        reduce using rule 117 (Expr -> array_access .)
    MINUSMINUS      reduce using rule 117 (Expr -> array_access .)
    ;               reduce using rule 117 (Expr -> array_access .)
    )               reduce using rule 117 (Expr -> array_access .)
    ,               reduce using rule 117 (Expr -> array_access .)
    ASSIGN          reduce using rule 106 (Location -> array_access .)
    TIMES_ASSIGN    reduce using rule 106 (Location -> array_access .)
    DIVIDE_ASSIGN   reduce using rule 106 (Location -> array_access .)
    REMAINDER_ASSIGN reduce using rule 106 (Location -> array_access .)
    PLUS_ASSIGN     reduce using rule 106 (Location -> array_access .)
    MINUS_ASSIGN    reduce using rule 106 (Location -> array_access .)


state 142

    (139) array_access -> name [ . Expr ]
    (37) dims -> [ . ]
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    ]               shift and go to state 174
    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    name                           shift and go to state 165
    Expr                           shift and go to state 189
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 143

    (104) assignment -> Location assignment_operator . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 190
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 144

    (107) assignment_operator -> ASSIGN .

    UMINUS          reduce using rule 107 (assignment_operator -> ASSIGN .)
    NUM             reduce using rule 107 (assignment_operator -> ASSIGN .)
    CHAR_LITERAL    reduce using rule 107 (assignment_operator -> ASSIGN .)
    STRING_LITERAL  reduce using rule 107 (assignment_operator -> ASSIGN .)
    TRUE            reduce using rule 107 (assignment_operator -> ASSIGN .)
    FALSE           reduce using rule 107 (assignment_operator -> ASSIGN .)
    NULL            reduce using rule 107 (assignment_operator -> ASSIGN .)
    NAME            reduce using rule 107 (assignment_operator -> ASSIGN .)
    PLUSPLUS        reduce using rule 107 (assignment_operator -> ASSIGN .)
    MINUSMINUS      reduce using rule 107 (assignment_operator -> ASSIGN .)


state 145

    (108) assignment_operator -> TIMES_ASSIGN .

    UMINUS          reduce using rule 108 (assignment_operator -> TIMES_ASSIGN .)
    NUM             reduce using rule 108 (assignment_operator -> TIMES_ASSIGN .)
    CHAR_LITERAL    reduce using rule 108 (assignment_operator -> TIMES_ASSIGN .)
    STRING_LITERAL  reduce using rule 108 (assignment_operator -> TIMES_ASSIGN .)
    TRUE            reduce using rule 108 (assignment_operator -> TIMES_ASSIGN .)
    FALSE           reduce using rule 108 (assignment_operator -> TIMES_ASSIGN .)
    NULL            reduce using rule 108 (assignment_operator -> TIMES_ASSIGN .)
    NAME            reduce using rule 108 (assignment_operator -> TIMES_ASSIGN .)
    PLUSPLUS        reduce using rule 108 (assignment_operator -> TIMES_ASSIGN .)
    MINUSMINUS      reduce using rule 108 (assignment_operator -> TIMES_ASSIGN .)


state 146

    (109) assignment_operator -> DIVIDE_ASSIGN .

    UMINUS          reduce using rule 109 (assignment_operator -> DIVIDE_ASSIGN .)
    NUM             reduce using rule 109 (assignment_operator -> DIVIDE_ASSIGN .)
    CHAR_LITERAL    reduce using rule 109 (assignment_operator -> DIVIDE_ASSIGN .)
    STRING_LITERAL  reduce using rule 109 (assignment_operator -> DIVIDE_ASSIGN .)
    TRUE            reduce using rule 109 (assignment_operator -> DIVIDE_ASSIGN .)
    FALSE           reduce using rule 109 (assignment_operator -> DIVIDE_ASSIGN .)
    NULL            reduce using rule 109 (assignment_operator -> DIVIDE_ASSIGN .)
    NAME            reduce using rule 109 (assignment_operator -> DIVIDE_ASSIGN .)
    PLUSPLUS        reduce using rule 109 (assignment_operator -> DIVIDE_ASSIGN .)
    MINUSMINUS      reduce using rule 109 (assignment_operator -> DIVIDE_ASSIGN .)


state 147

    (110) assignment_operator -> REMAINDER_ASSIGN .

    UMINUS          reduce using rule 110 (assignment_operator -> REMAINDER_ASSIGN .)
    NUM             reduce using rule 110 (assignment_operator -> REMAINDER_ASSIGN .)
    CHAR_LITERAL    reduce using rule 110 (assignment_operator -> REMAINDER_ASSIGN .)
    STRING_LITERAL  reduce using rule 110 (assignment_operator -> REMAINDER_ASSIGN .)
    TRUE            reduce using rule 110 (assignment_operator -> REMAINDER_ASSIGN .)
    FALSE           reduce using rule 110 (assignment_operator -> REMAINDER_ASSIGN .)
    NULL            reduce using rule 110 (assignment_operator -> REMAINDER_ASSIGN .)
    NAME            reduce using rule 110 (assignment_operator -> REMAINDER_ASSIGN .)
    PLUSPLUS        reduce using rule 110 (assignment_operator -> REMAINDER_ASSIGN .)
    MINUSMINUS      reduce using rule 110 (assignment_operator -> REMAINDER_ASSIGN .)


state 148

    (111) assignment_operator -> PLUS_ASSIGN .

    UMINUS          reduce using rule 111 (assignment_operator -> PLUS_ASSIGN .)
    NUM             reduce using rule 111 (assignment_operator -> PLUS_ASSIGN .)
    CHAR_LITERAL    reduce using rule 111 (assignment_operator -> PLUS_ASSIGN .)
    STRING_LITERAL  reduce using rule 111 (assignment_operator -> PLUS_ASSIGN .)
    TRUE            reduce using rule 111 (assignment_operator -> PLUS_ASSIGN .)
    FALSE           reduce using rule 111 (assignment_operator -> PLUS_ASSIGN .)
    NULL            reduce using rule 111 (assignment_operator -> PLUS_ASSIGN .)
    NAME            reduce using rule 111 (assignment_operator -> PLUS_ASSIGN .)
    PLUSPLUS        reduce using rule 111 (assignment_operator -> PLUS_ASSIGN .)
    MINUSMINUS      reduce using rule 111 (assignment_operator -> PLUS_ASSIGN .)


state 149

    (112) assignment_operator -> MINUS_ASSIGN .

    UMINUS          reduce using rule 112 (assignment_operator -> MINUS_ASSIGN .)
    NUM             reduce using rule 112 (assignment_operator -> MINUS_ASSIGN .)
    CHAR_LITERAL    reduce using rule 112 (assignment_operator -> MINUS_ASSIGN .)
    STRING_LITERAL  reduce using rule 112 (assignment_operator -> MINUS_ASSIGN .)
    TRUE            reduce using rule 112 (assignment_operator -> MINUS_ASSIGN .)
    FALSE           reduce using rule 112 (assignment_operator -> MINUS_ASSIGN .)
    NULL            reduce using rule 112 (assignment_operator -> MINUS_ASSIGN .)
    NAME            reduce using rule 112 (assignment_operator -> MINUS_ASSIGN .)
    PLUSPLUS        reduce using rule 112 (assignment_operator -> MINUS_ASSIGN .)
    MINUSMINUS      reduce using rule 112 (assignment_operator -> MINUS_ASSIGN .)


state 150

    (137) post_increment_expression -> Expr PLUSPLUS .

    ;               reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    PLUSPLUS        reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    MINUSMINUS      reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    ADD             reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    SUB             reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    MUL             reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    DIV             reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    AND             reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    OR              reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    LESS            reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    LTEQ            reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    GREATER         reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    GTEQ            reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    EQ              reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    NEQ             reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    )               reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    ,               reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)
    ]               reduce using rule 137 (post_increment_expression -> Expr PLUSPLUS .)


state 151

    (138) post_decrement_expression -> Expr MINUSMINUS .

    ;               reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    PLUSPLUS        reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    MINUSMINUS      reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    ADD             reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    SUB             reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    MUL             reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    DIV             reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    AND             reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    OR              reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    LESS            reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    LTEQ            reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    GREATER         reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    GTEQ            reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    EQ              reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    NEQ             reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    )               reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    ,               reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)
    ]               reduce using rule 138 (post_decrement_expression -> Expr MINUSMINUS .)


state 152

    (118) exprbinaryexpr -> Expr ADD . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 191
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 153

    (119) exprbinaryexpr -> Expr SUB . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 192
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 154

    (120) exprbinaryexpr -> Expr MUL . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 193
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 155

    (121) exprbinaryexpr -> Expr DIV . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 194
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 156

    (122) exprbinaryexpr -> Expr AND . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 195
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 157

    (123) exprbinaryexpr -> Expr OR . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 196
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 158

    (124) exprbinaryexpr -> Expr LESS . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 197
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 159

    (125) exprbinaryexpr -> Expr LTEQ . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 198
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 160

    (126) exprbinaryexpr -> Expr GREATER . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 199
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 161

    (127) exprbinaryexpr -> Expr GTEQ . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 200
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 162

    (128) exprbinaryexpr -> Expr EQ . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 201
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 163

    (129) exprbinaryexpr -> Expr NEQ . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 202
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 164

    (132) unary_expression -> UMINUS Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    ;               reduce using rule 132 (unary_expression -> UMINUS Expr .)
    PLUSPLUS        reduce using rule 132 (unary_expression -> UMINUS Expr .)
    MINUSMINUS      reduce using rule 132 (unary_expression -> UMINUS Expr .)
    ADD             reduce using rule 132 (unary_expression -> UMINUS Expr .)
    SUB             reduce using rule 132 (unary_expression -> UMINUS Expr .)
    MUL             reduce using rule 132 (unary_expression -> UMINUS Expr .)
    DIV             reduce using rule 132 (unary_expression -> UMINUS Expr .)
    AND             reduce using rule 132 (unary_expression -> UMINUS Expr .)
    OR              reduce using rule 132 (unary_expression -> UMINUS Expr .)
    LESS            reduce using rule 132 (unary_expression -> UMINUS Expr .)
    LTEQ            reduce using rule 132 (unary_expression -> UMINUS Expr .)
    GREATER         reduce using rule 132 (unary_expression -> UMINUS Expr .)
    GTEQ            reduce using rule 132 (unary_expression -> UMINUS Expr .)
    EQ              reduce using rule 132 (unary_expression -> UMINUS Expr .)
    NEQ             reduce using rule 132 (unary_expression -> UMINUS Expr .)
    )               reduce using rule 132 (unary_expression -> UMINUS Expr .)
    ,               reduce using rule 132 (unary_expression -> UMINUS Expr .)
    ]               reduce using rule 132 (unary_expression -> UMINUS Expr .)

  ! ADD             [ shift and go to state 152 ]
  ! SUB             [ shift and go to state 153 ]
  ! MUL             [ shift and go to state 154 ]
  ! DIV             [ shift and go to state 155 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! LESS            [ shift and go to state 158 ]
  ! LTEQ            [ shift and go to state 159 ]
  ! GREATER         [ shift and go to state 160 ]
  ! GTEQ            [ shift and go to state 161 ]
  ! EQ              [ shift and go to state 162 ]
  ! NEQ             [ shift and go to state 163 ]
  ! PLUSPLUS        [ shift and go to state 150 ]
  ! MINUSMINUS      [ shift and go to state 151 ]


state 165

    (116) Expr -> name .
    (139) array_access -> name . [ Expr ]

    ADD             reduce using rule 116 (Expr -> name .)
    SUB             reduce using rule 116 (Expr -> name .)
    MUL             reduce using rule 116 (Expr -> name .)
    DIV             reduce using rule 116 (Expr -> name .)
    AND             reduce using rule 116 (Expr -> name .)
    OR              reduce using rule 116 (Expr -> name .)
    LESS            reduce using rule 116 (Expr -> name .)
    LTEQ            reduce using rule 116 (Expr -> name .)
    GREATER         reduce using rule 116 (Expr -> name .)
    GTEQ            reduce using rule 116 (Expr -> name .)
    EQ              reduce using rule 116 (Expr -> name .)
    NEQ             reduce using rule 116 (Expr -> name .)
    PLUSPLUS        reduce using rule 116 (Expr -> name .)
    MINUSMINUS      reduce using rule 116 (Expr -> name .)
    ;               reduce using rule 116 (Expr -> name .)
    )               reduce using rule 116 (Expr -> name .)
    ,               reduce using rule 116 (Expr -> name .)
    ]               reduce using rule 116 (Expr -> name .)
    [               shift and go to state 188


state 166

    (117) Expr -> array_access .

    ADD             reduce using rule 117 (Expr -> array_access .)
    SUB             reduce using rule 117 (Expr -> array_access .)
    MUL             reduce using rule 117 (Expr -> array_access .)
    DIV             reduce using rule 117 (Expr -> array_access .)
    AND             reduce using rule 117 (Expr -> array_access .)
    OR              reduce using rule 117 (Expr -> array_access .)
    LESS            reduce using rule 117 (Expr -> array_access .)
    LTEQ            reduce using rule 117 (Expr -> array_access .)
    GREATER         reduce using rule 117 (Expr -> array_access .)
    GTEQ            reduce using rule 117 (Expr -> array_access .)
    EQ              reduce using rule 117 (Expr -> array_access .)
    NEQ             reduce using rule 117 (Expr -> array_access .)
    PLUSPLUS        reduce using rule 117 (Expr -> array_access .)
    MINUSMINUS      reduce using rule 117 (Expr -> array_access .)
    ;               reduce using rule 117 (Expr -> array_access .)
    )               reduce using rule 117 (Expr -> array_access .)
    ,               reduce using rule 117 (Expr -> array_access .)
    ]               reduce using rule 117 (Expr -> array_access .)


state 167

    (135) pre_increment_expression -> PLUSPLUS Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    ;               reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .)
    PLUSPLUS        reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .)
    MINUSMINUS      reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .)
    )               reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .)
    ,               reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .)
    ]               reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .)
    ADD             shift and go to state 152
    SUB             shift and go to state 153
    MUL             shift and go to state 154
    DIV             shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    LESS            shift and go to state 158
    LTEQ            shift and go to state 159
    GREATER         shift and go to state 160
    GTEQ            shift and go to state 161
    EQ              shift and go to state 162
    NEQ             shift and go to state 163

  ! ADD             [ reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .) ]
  ! SUB             [ reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .) ]
  ! MUL             [ reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .) ]
  ! DIV             [ reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .) ]
  ! AND             [ reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .) ]
  ! OR              [ reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .) ]
  ! LESS            [ reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .) ]
  ! LTEQ            [ reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .) ]
  ! GREATER         [ reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .) ]
  ! GTEQ            [ reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .) ]
  ! EQ              [ reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .) ]
  ! NEQ             [ reduce using rule 135 (pre_increment_expression -> PLUSPLUS Expr .) ]
  ! PLUSPLUS        [ shift and go to state 150 ]
  ! MINUSMINUS      [ shift and go to state 151 ]


state 168

    (136) pre_decrement_expression -> MINUSMINUS Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    ;               reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .)
    PLUSPLUS        reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .)
    MINUSMINUS      reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .)
    )               reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .)
    ,               reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .)
    ]               reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .)
    ADD             shift and go to state 152
    SUB             shift and go to state 153
    MUL             shift and go to state 154
    DIV             shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    LESS            shift and go to state 158
    LTEQ            shift and go to state 159
    GREATER         shift and go to state 160
    GTEQ            shift and go to state 161
    EQ              shift and go to state 162
    NEQ             shift and go to state 163

  ! ADD             [ reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .) ]
  ! SUB             [ reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .) ]
  ! MUL             [ reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .) ]
  ! DIV             [ reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .) ]
  ! AND             [ reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .) ]
  ! OR              [ reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .) ]
  ! LESS            [ reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .) ]
  ! LTEQ            [ reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .) ]
  ! GREATER         [ reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .) ]
  ! GTEQ            [ reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .) ]
  ! EQ              [ reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .) ]
  ! NEQ             [ reduce using rule 136 (pre_decrement_expression -> MINUSMINUS Expr .) ]
  ! PLUSPLUS        [ shift and go to state 150 ]
  ! MINUSMINUS      [ shift and go to state 151 ]


state 169

    (14) tmain -> tmain_header opening_bracket method_body closing_bracket .

    }               reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    PUBLIC          reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    PROTECTED       reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    PRIVATE         reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    STATIC          reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    ABSTRACT        reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    FINAL           reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    NATIVE          reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    BOOLEAN         reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    VOID            reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    BYTE            reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    SHORT           reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    INT             reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    LONG            reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    CHAR            reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    FLOAT           reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    DOUBLE          reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    STRING          reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)
    NAME            reduce using rule 14 (tmain -> tmain_header opening_bracket method_body closing_bracket .)


state 170

    (22) field_declartaion -> modifiers_opt type variable_declarators ; .

    }               reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    PUBLIC          reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    PROTECTED       reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    PRIVATE         reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    STATIC          reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    ABSTRACT        reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    FINAL           reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    NATIVE          reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    BOOLEAN         reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    VOID            reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    BYTE            reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    SHORT           reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    INT             reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    LONG            reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    CHAR            reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    FLOAT           reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    DOUBLE          reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    STRING          reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)
    NAME            reduce using rule 22 (field_declartaion -> modifiers_opt type variable_declarators ; .)


state 171

    (66) variable_declarators -> variable_declarators , . variable_declarator
    (67) variable_declarator -> . variable_declarator_id
    (68) variable_declarator -> . variable_declarator_id ASSIGN Expr
    (28) variable_declarator_id -> . name
    (56) name -> . NAME

    NAME            shift and go to state 35

    variable_declarator            shift and go to state 203
    variable_declarator_id         shift and go to state 110
    name                           shift and go to state 124

state 172

    (68) variable_declarator -> variable_declarator_id ASSIGN . Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    Expr                           shift and go to state 204
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 165
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 173

    (38) dims -> dims [ . ]

    ]               shift and go to state 205


state 174

    (37) dims -> [ ] .

    [               reduce using rule 37 (dims -> [ ] .)
    MAIN            reduce using rule 37 (dims -> [ ] .)
    NAME            reduce using rule 37 (dims -> [ ] .)


state 175

    (24) method_header -> method_header_name ( formal_parameter_list_opt ) .

    {               reduce using rule 24 (method_header -> method_header_name ( formal_parameter_list_opt ) .)


state 176

    (32) formal_parameter_list -> formal_parameter_list , . formal_parameter
    (27) formal_parameter -> . type variable_declarator_id
    (33) type -> . primitive_type
    (34) type -> . array_type
    (39) primitive_type -> . BOOLEAN
    (40) primitive_type -> . VOID
    (41) primitive_type -> . BYTE
    (42) primitive_type -> . SHORT
    (43) primitive_type -> . INT
    (44) primitive_type -> . LONG
    (45) primitive_type -> . CHAR
    (46) primitive_type -> . FLOAT
    (47) primitive_type -> . DOUBLE
    (48) primitive_type -> . STRING
    (35) array_type -> . primitive_type dims
    (36) array_type -> . name dims
    (56) name -> . NAME

    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 46
    BYTE            shift and go to state 47
    SHORT           shift and go to state 48
    INT             shift and go to state 49
    LONG            shift and go to state 50
    CHAR            shift and go to state 51
    FLOAT           shift and go to state 52
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 54
    NAME            shift and go to state 35

    formal_parameter               shift and go to state 206
    type                           shift and go to state 118
    primitive_type                 shift and go to state 43
    array_type                     shift and go to state 44
    name                           shift and go to state 42

state 177

    (27) formal_parameter -> type variable_declarator_id .

    ,               reduce using rule 27 (formal_parameter -> type variable_declarator_id .)
    )               reduce using rule 27 (formal_parameter -> type variable_declarator_id .)


state 178

    (15) tmain_header -> tmain_name ( formal_parameter_list_opt ) .

    {               reduce using rule 15 (tmain_header -> tmain_name ( formal_parameter_list_opt ) .)


state 179

    (64) local_variable_declaration -> modifiers type variable_declarators .
    (66) variable_declarators -> variable_declarators . , variable_declarator

    ;               reduce using rule 64 (local_variable_declaration -> modifiers type variable_declarators .)
    ,               shift and go to state 171


state 180

    (91) if_then_statement -> IF ( expression . closing_parantheses_if opening_bracket block_statements closing_bracket
    (93) if_then_else_statement -> IF ( expression . closing_parantheses_if opening_bracket block_statements closing_bracket else
    (92) closing_parantheses_if -> . )

    )               shift and go to state 208

    closing_parantheses_if         shift and go to state 207

state 181

    (96) while_statement -> while ( expression . closing_parantheses opening_bracket block_statements closing_bracket
    (97) closing_parantheses -> . )

    )               shift and go to state 210

    closing_parantheses            shift and go to state 209

state 182

    (99) do_while_statement -> do opening_bracket block_statements . closing_bracket WHILE ( expression ) ;
    (59) block_statements -> block_statements . block_statement
    (13) closing_bracket -> . }
    (60) block_statement -> . local_variable_declaration_statement
    (61) block_statement -> . statement
    (62) local_variable_declaration_statement -> . local_variable_declaration ;
    (69) statement -> . other_statement
    (70) statement -> . if_then_statement
    (71) statement -> . if_then_else_statement
    (72) statement -> . while_statement
    (73) statement -> . do_while_statement
    (63) local_variable_declaration -> . type variable_declarators
    (64) local_variable_declaration -> . modifiers type variable_declarators
    (74) other_statement -> . expression_statement
    (75) other_statement -> . break_statement
    (76) other_statement -> . return_statement
    (77) other_statement -> . ;
    (91) if_then_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket
    (93) if_then_else_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else
    (96) while_statement -> . while ( expression closing_parantheses opening_bracket block_statements closing_bracket
    (99) do_while_statement -> . do opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (33) type -> . primitive_type
    (34) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (78) expression_statement -> . statement_expression ;
    (86) break_statement -> . BREAK ;
    (87) break_statement -> . BREAK NAME ;
    (88) return_statement -> . RETURN expression_opt ;
    (98) while -> . WHILE
    (100) do -> . DO
    (39) primitive_type -> . BOOLEAN
    (40) primitive_type -> . VOID
    (41) primitive_type -> . BYTE
    (42) primitive_type -> . SHORT
    (43) primitive_type -> . INT
    (44) primitive_type -> . LONG
    (45) primitive_type -> . CHAR
    (46) primitive_type -> . FLOAT
    (47) primitive_type -> . DOUBLE
    (48) primitive_type -> . STRING
    (35) array_type -> . primitive_type dims
    (36) array_type -> . name dims
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE
    (79) statement_expression -> . assignment
    (80) statement_expression -> . unary_expression
    (81) statement_expression -> . method_invocation
    (56) name -> . NAME
    (104) assignment -> . Location assignment_operator Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (82) method_invocation -> . NAME ( argument_list )
    (83) method_invocation -> . NAME ( )
    (105) Location -> . name
    (106) Location -> . array_access
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS
    (139) array_access -> . name [ Expr ]
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL

    }               shift and go to state 38
    ;               shift and go to state 63
    IF              shift and go to state 74
    BREAK           shift and go to state 79
    RETURN          shift and go to state 81
    WHILE           shift and go to state 77
    DO              shift and go to state 82
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 46
    BYTE            shift and go to state 47
    SHORT           shift and go to state 48
    INT             shift and go to state 49
    LONG            shift and go to state 50
    CHAR            shift and go to state 51
    FLOAT           shift and go to state 52
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 54
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    NAME            shift and go to state 80
    UMINUS          shift and go to state 91
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104

    do                             shift and go to state 76
    closing_bracket                shift and go to state 211
    block_statement                shift and go to state 121
    local_variable_declaration_statement shift and go to state 60
    statement                      shift and go to state 61
    local_variable_declaration     shift and go to state 62
    other_statement                shift and go to state 64
    if_then_statement              shift and go to state 65
    if_then_else_statement         shift and go to state 66
    while_statement                shift and go to state 67
    do_while_statement             shift and go to state 68
    type                           shift and go to state 69
    modifiers                      shift and go to state 70
    expression_statement           shift and go to state 71
    break_statement                shift and go to state 72
    return_statement               shift and go to state 73
    while                          shift and go to state 75
    primitive_type                 shift and go to state 43
    array_type                     shift and go to state 44
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 78
    name                           shift and go to state 83
    assignment                     shift and go to state 84
    unary_expression               shift and go to state 85
    method_invocation              shift and go to state 86
    Location                       shift and go to state 87
    Expr                           shift and go to state 88
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93
    array_access                   shift and go to state 94
    exprbinaryexpr                 shift and go to state 97
    literal                        shift and go to state 98

state 183

    (87) break_statement -> BREAK NAME ; .

    ;               reduce using rule 87 (break_statement -> BREAK NAME ; .)
    IF              reduce using rule 87 (break_statement -> BREAK NAME ; .)
    BREAK           reduce using rule 87 (break_statement -> BREAK NAME ; .)
    RETURN          reduce using rule 87 (break_statement -> BREAK NAME ; .)
    WHILE           reduce using rule 87 (break_statement -> BREAK NAME ; .)
    DO              reduce using rule 87 (break_statement -> BREAK NAME ; .)
    BOOLEAN         reduce using rule 87 (break_statement -> BREAK NAME ; .)
    VOID            reduce using rule 87 (break_statement -> BREAK NAME ; .)
    BYTE            reduce using rule 87 (break_statement -> BREAK NAME ; .)
    SHORT           reduce using rule 87 (break_statement -> BREAK NAME ; .)
    INT             reduce using rule 87 (break_statement -> BREAK NAME ; .)
    LONG            reduce using rule 87 (break_statement -> BREAK NAME ; .)
    CHAR            reduce using rule 87 (break_statement -> BREAK NAME ; .)
    FLOAT           reduce using rule 87 (break_statement -> BREAK NAME ; .)
    DOUBLE          reduce using rule 87 (break_statement -> BREAK NAME ; .)
    STRING          reduce using rule 87 (break_statement -> BREAK NAME ; .)
    PUBLIC          reduce using rule 87 (break_statement -> BREAK NAME ; .)
    PROTECTED       reduce using rule 87 (break_statement -> BREAK NAME ; .)
    PRIVATE         reduce using rule 87 (break_statement -> BREAK NAME ; .)
    STATIC          reduce using rule 87 (break_statement -> BREAK NAME ; .)
    ABSTRACT        reduce using rule 87 (break_statement -> BREAK NAME ; .)
    FINAL           reduce using rule 87 (break_statement -> BREAK NAME ; .)
    NATIVE          reduce using rule 87 (break_statement -> BREAK NAME ; .)
    NAME            reduce using rule 87 (break_statement -> BREAK NAME ; .)
    UMINUS          reduce using rule 87 (break_statement -> BREAK NAME ; .)
    PLUSPLUS        reduce using rule 87 (break_statement -> BREAK NAME ; .)
    MINUSMINUS      reduce using rule 87 (break_statement -> BREAK NAME ; .)
    NUM             reduce using rule 87 (break_statement -> BREAK NAME ; .)
    CHAR_LITERAL    reduce using rule 87 (break_statement -> BREAK NAME ; .)
    STRING_LITERAL  reduce using rule 87 (break_statement -> BREAK NAME ; .)
    TRUE            reduce using rule 87 (break_statement -> BREAK NAME ; .)
    FALSE           reduce using rule 87 (break_statement -> BREAK NAME ; .)
    NULL            reduce using rule 87 (break_statement -> BREAK NAME ; .)
    }               reduce using rule 87 (break_statement -> BREAK NAME ; .)


state 184

    (82) method_invocation -> NAME ( argument_list . )
    (85) argument_list -> argument_list . , expression

    )               shift and go to state 212
    ,               shift and go to state 213


state 185

    (83) method_invocation -> NAME ( ) .

    ;               reduce using rule 83 (method_invocation -> NAME ( ) .)


state 186

    (84) argument_list -> expression .

    )               reduce using rule 84 (argument_list -> expression .)
    ,               reduce using rule 84 (argument_list -> expression .)


state 187

    (88) return_statement -> RETURN expression_opt ; .

    ;               reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    IF              reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    BREAK           reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    RETURN          reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    WHILE           reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    DO              reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    BOOLEAN         reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    VOID            reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    BYTE            reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    SHORT           reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    INT             reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    LONG            reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    CHAR            reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    FLOAT           reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    DOUBLE          reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    STRING          reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    PUBLIC          reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    PROTECTED       reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    PRIVATE         reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    STATIC          reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    ABSTRACT        reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    FINAL           reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    NATIVE          reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    NAME            reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    UMINUS          reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    PLUSPLUS        reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    MINUSMINUS      reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    NUM             reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    CHAR_LITERAL    reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    STRING_LITERAL  reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    TRUE            reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    FALSE           reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    NULL            reduce using rule 88 (return_statement -> RETURN expression_opt ; .)
    }               reduce using rule 88 (return_statement -> RETURN expression_opt ; .)


state 188

    (139) array_access -> name [ . Expr ]
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    name                           shift and go to state 165
    Expr                           shift and go to state 189
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    array_access                   shift and go to state 166
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 189

    (139) array_access -> name [ Expr . ]
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    ]               shift and go to state 214
    ADD             shift and go to state 152
    SUB             shift and go to state 153
    MUL             shift and go to state 154
    DIV             shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    LESS            shift and go to state 158
    LTEQ            shift and go to state 159
    GREATER         shift and go to state 160
    GTEQ            shift and go to state 161
    EQ              shift and go to state 162
    NEQ             shift and go to state 163
    PLUSPLUS        shift and go to state 150
    MINUSMINUS      shift and go to state 151


state 190

    (104) assignment -> Location assignment_operator Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    ;               reduce using rule 104 (assignment -> Location assignment_operator Expr .)
    )               reduce using rule 104 (assignment -> Location assignment_operator Expr .)
    ,               reduce using rule 104 (assignment -> Location assignment_operator Expr .)
    ADD             shift and go to state 152
    SUB             shift and go to state 153
    MUL             shift and go to state 154
    DIV             shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    LESS            shift and go to state 158
    LTEQ            shift and go to state 159
    GREATER         shift and go to state 160
    GTEQ            shift and go to state 161
    EQ              shift and go to state 162
    NEQ             shift and go to state 163
    PLUSPLUS        shift and go to state 150
    MINUSMINUS      shift and go to state 151


state 191

    (118) exprbinaryexpr -> Expr ADD Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    PLUSPLUS        reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .)
    MINUSMINUS      reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .)
    ADD             reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .)
    SUB             reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .)
    AND             reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .)
    OR              reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .)
    LESS            reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .)
    LTEQ            reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .)
    GREATER         reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .)
    GTEQ            reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .)
    EQ              reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .)
    NEQ             reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .)
    ;               reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .)
    )               reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .)
    ,               reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .)
    ]               reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .)
    MUL             shift and go to state 154
    DIV             shift and go to state 155

  ! MUL             [ reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .) ]
  ! DIV             [ reduce using rule 118 (exprbinaryexpr -> Expr ADD Expr .) ]
  ! ADD             [ shift and go to state 152 ]
  ! SUB             [ shift and go to state 153 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! LESS            [ shift and go to state 158 ]
  ! LTEQ            [ shift and go to state 159 ]
  ! GREATER         [ shift and go to state 160 ]
  ! GTEQ            [ shift and go to state 161 ]
  ! EQ              [ shift and go to state 162 ]
  ! NEQ             [ shift and go to state 163 ]
  ! PLUSPLUS        [ shift and go to state 150 ]
  ! MINUSMINUS      [ shift and go to state 151 ]


state 192

    (119) exprbinaryexpr -> Expr SUB Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    PLUSPLUS        reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .)
    MINUSMINUS      reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .)
    ADD             reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .)
    SUB             reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .)
    AND             reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .)
    OR              reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .)
    LESS            reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .)
    LTEQ            reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .)
    GREATER         reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .)
    GTEQ            reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .)
    EQ              reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .)
    NEQ             reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .)
    ;               reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .)
    )               reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .)
    ,               reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .)
    ]               reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .)
    MUL             shift and go to state 154
    DIV             shift and go to state 155

  ! MUL             [ reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .) ]
  ! DIV             [ reduce using rule 119 (exprbinaryexpr -> Expr SUB Expr .) ]
  ! ADD             [ shift and go to state 152 ]
  ! SUB             [ shift and go to state 153 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! LESS            [ shift and go to state 158 ]
  ! LTEQ            [ shift and go to state 159 ]
  ! GREATER         [ shift and go to state 160 ]
  ! GTEQ            [ shift and go to state 161 ]
  ! EQ              [ shift and go to state 162 ]
  ! NEQ             [ shift and go to state 163 ]
  ! PLUSPLUS        [ shift and go to state 150 ]
  ! MINUSMINUS      [ shift and go to state 151 ]


state 193

    (120) exprbinaryexpr -> Expr MUL Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    PLUSPLUS        reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    MINUSMINUS      reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    ADD             reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    SUB             reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    MUL             reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    DIV             reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    AND             reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    OR              reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    LESS            reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    LTEQ            reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    GREATER         reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    GTEQ            reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    EQ              reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    NEQ             reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    ;               reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    )               reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    ,               reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)
    ]               reduce using rule 120 (exprbinaryexpr -> Expr MUL Expr .)

  ! ADD             [ shift and go to state 152 ]
  ! SUB             [ shift and go to state 153 ]
  ! MUL             [ shift and go to state 154 ]
  ! DIV             [ shift and go to state 155 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! LESS            [ shift and go to state 158 ]
  ! LTEQ            [ shift and go to state 159 ]
  ! GREATER         [ shift and go to state 160 ]
  ! GTEQ            [ shift and go to state 161 ]
  ! EQ              [ shift and go to state 162 ]
  ! NEQ             [ shift and go to state 163 ]
  ! PLUSPLUS        [ shift and go to state 150 ]
  ! MINUSMINUS      [ shift and go to state 151 ]


state 194

    (121) exprbinaryexpr -> Expr DIV Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    PLUSPLUS        reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    MINUSMINUS      reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    ADD             reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    SUB             reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    MUL             reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    DIV             reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    AND             reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    OR              reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    LESS            reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    LTEQ            reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    GREATER         reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    GTEQ            reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    EQ              reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    NEQ             reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    ;               reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    )               reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    ,               reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)
    ]               reduce using rule 121 (exprbinaryexpr -> Expr DIV Expr .)

  ! ADD             [ shift and go to state 152 ]
  ! SUB             [ shift and go to state 153 ]
  ! MUL             [ shift and go to state 154 ]
  ! DIV             [ shift and go to state 155 ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! LESS            [ shift and go to state 158 ]
  ! LTEQ            [ shift and go to state 159 ]
  ! GREATER         [ shift and go to state 160 ]
  ! GTEQ            [ shift and go to state 161 ]
  ! EQ              [ shift and go to state 162 ]
  ! NEQ             [ shift and go to state 163 ]
  ! PLUSPLUS        [ shift and go to state 150 ]
  ! MINUSMINUS      [ shift and go to state 151 ]


state 195

    (122) exprbinaryexpr -> Expr AND Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    PLUSPLUS        reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .)
    MINUSMINUS      reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .)
    AND             reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .)
    OR              reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .)
    ;               reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .)
    )               reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .)
    ,               reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .)
    ]               reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .)
    ADD             shift and go to state 152
    SUB             shift and go to state 153
    MUL             shift and go to state 154
    DIV             shift and go to state 155
    LESS            shift and go to state 158
    LTEQ            shift and go to state 159
    GREATER         shift and go to state 160
    GTEQ            shift and go to state 161
    EQ              shift and go to state 162
    NEQ             shift and go to state 163

  ! ADD             [ reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .) ]
  ! SUB             [ reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .) ]
  ! MUL             [ reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .) ]
  ! DIV             [ reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .) ]
  ! LESS            [ reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .) ]
  ! LTEQ            [ reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .) ]
  ! GREATER         [ reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .) ]
  ! GTEQ            [ reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .) ]
  ! EQ              [ reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .) ]
  ! NEQ             [ reduce using rule 122 (exprbinaryexpr -> Expr AND Expr .) ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! PLUSPLUS        [ shift and go to state 150 ]
  ! MINUSMINUS      [ shift and go to state 151 ]


state 196

    (123) exprbinaryexpr -> Expr OR Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    PLUSPLUS        reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .)
    MINUSMINUS      reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .)
    OR              reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .)
    ;               reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .)
    )               reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .)
    ,               reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .)
    ]               reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .)
    ADD             shift and go to state 152
    SUB             shift and go to state 153
    MUL             shift and go to state 154
    DIV             shift and go to state 155
    AND             shift and go to state 156
    LESS            shift and go to state 158
    LTEQ            shift and go to state 159
    GREATER         shift and go to state 160
    GTEQ            shift and go to state 161
    EQ              shift and go to state 162
    NEQ             shift and go to state 163

  ! ADD             [ reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .) ]
  ! SUB             [ reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .) ]
  ! MUL             [ reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .) ]
  ! DIV             [ reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .) ]
  ! AND             [ reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .) ]
  ! LESS            [ reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .) ]
  ! LTEQ            [ reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .) ]
  ! GREATER         [ reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .) ]
  ! GTEQ            [ reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .) ]
  ! EQ              [ reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .) ]
  ! NEQ             [ reduce using rule 123 (exprbinaryexpr -> Expr OR Expr .) ]
  ! OR              [ shift and go to state 157 ]
  ! PLUSPLUS        [ shift and go to state 150 ]
  ! MINUSMINUS      [ shift and go to state 151 ]


state 197

    (124) exprbinaryexpr -> Expr LESS Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    PLUSPLUS        reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .)
    MINUSMINUS      reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .)
    AND             reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .)
    OR              reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .)
    LESS            reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .)
    LTEQ            reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .)
    GREATER         reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .)
    GTEQ            reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .)
    EQ              reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .)
    NEQ             reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .)
    ;               reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .)
    )               reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .)
    ,               reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .)
    ]               reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .)
    ADD             shift and go to state 152
    SUB             shift and go to state 153
    MUL             shift and go to state 154
    DIV             shift and go to state 155

  ! ADD             [ reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .) ]
  ! SUB             [ reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .) ]
  ! MUL             [ reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .) ]
  ! DIV             [ reduce using rule 124 (exprbinaryexpr -> Expr LESS Expr .) ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! LESS            [ shift and go to state 158 ]
  ! LTEQ            [ shift and go to state 159 ]
  ! GREATER         [ shift and go to state 160 ]
  ! GTEQ            [ shift and go to state 161 ]
  ! EQ              [ shift and go to state 162 ]
  ! NEQ             [ shift and go to state 163 ]
  ! PLUSPLUS        [ shift and go to state 150 ]
  ! MINUSMINUS      [ shift and go to state 151 ]


state 198

    (125) exprbinaryexpr -> Expr LTEQ Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    PLUSPLUS        reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .)
    MINUSMINUS      reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .)
    AND             reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .)
    OR              reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .)
    LESS            reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .)
    LTEQ            reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .)
    GREATER         reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .)
    GTEQ            reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .)
    EQ              reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .)
    NEQ             reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .)
    ;               reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .)
    )               reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .)
    ,               reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .)
    ]               reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .)
    ADD             shift and go to state 152
    SUB             shift and go to state 153
    MUL             shift and go to state 154
    DIV             shift and go to state 155

  ! ADD             [ reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .) ]
  ! SUB             [ reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .) ]
  ! MUL             [ reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .) ]
  ! DIV             [ reduce using rule 125 (exprbinaryexpr -> Expr LTEQ Expr .) ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! LESS            [ shift and go to state 158 ]
  ! LTEQ            [ shift and go to state 159 ]
  ! GREATER         [ shift and go to state 160 ]
  ! GTEQ            [ shift and go to state 161 ]
  ! EQ              [ shift and go to state 162 ]
  ! NEQ             [ shift and go to state 163 ]
  ! PLUSPLUS        [ shift and go to state 150 ]
  ! MINUSMINUS      [ shift and go to state 151 ]


state 199

    (126) exprbinaryexpr -> Expr GREATER Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    PLUSPLUS        reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .)
    MINUSMINUS      reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .)
    AND             reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .)
    OR              reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .)
    LESS            reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .)
    LTEQ            reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .)
    GREATER         reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .)
    GTEQ            reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .)
    EQ              reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .)
    NEQ             reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .)
    ;               reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .)
    )               reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .)
    ,               reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .)
    ]               reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .)
    ADD             shift and go to state 152
    SUB             shift and go to state 153
    MUL             shift and go to state 154
    DIV             shift and go to state 155

  ! ADD             [ reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .) ]
  ! SUB             [ reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .) ]
  ! MUL             [ reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .) ]
  ! DIV             [ reduce using rule 126 (exprbinaryexpr -> Expr GREATER Expr .) ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! LESS            [ shift and go to state 158 ]
  ! LTEQ            [ shift and go to state 159 ]
  ! GREATER         [ shift and go to state 160 ]
  ! GTEQ            [ shift and go to state 161 ]
  ! EQ              [ shift and go to state 162 ]
  ! NEQ             [ shift and go to state 163 ]
  ! PLUSPLUS        [ shift and go to state 150 ]
  ! MINUSMINUS      [ shift and go to state 151 ]


state 200

    (127) exprbinaryexpr -> Expr GTEQ Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    PLUSPLUS        reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .)
    MINUSMINUS      reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .)
    AND             reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .)
    OR              reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .)
    LESS            reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .)
    LTEQ            reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .)
    GREATER         reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .)
    GTEQ            reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .)
    EQ              reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .)
    NEQ             reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .)
    ;               reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .)
    )               reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .)
    ,               reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .)
    ]               reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .)
    ADD             shift and go to state 152
    SUB             shift and go to state 153
    MUL             shift and go to state 154
    DIV             shift and go to state 155

  ! ADD             [ reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .) ]
  ! SUB             [ reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .) ]
  ! MUL             [ reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .) ]
  ! DIV             [ reduce using rule 127 (exprbinaryexpr -> Expr GTEQ Expr .) ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! LESS            [ shift and go to state 158 ]
  ! LTEQ            [ shift and go to state 159 ]
  ! GREATER         [ shift and go to state 160 ]
  ! GTEQ            [ shift and go to state 161 ]
  ! EQ              [ shift and go to state 162 ]
  ! NEQ             [ shift and go to state 163 ]
  ! PLUSPLUS        [ shift and go to state 150 ]
  ! MINUSMINUS      [ shift and go to state 151 ]


state 201

    (128) exprbinaryexpr -> Expr EQ Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    PLUSPLUS        reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .)
    MINUSMINUS      reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .)
    AND             reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .)
    OR              reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .)
    EQ              reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .)
    NEQ             reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .)
    ;               reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .)
    )               reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .)
    ,               reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .)
    ]               reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .)
    ADD             shift and go to state 152
    SUB             shift and go to state 153
    MUL             shift and go to state 154
    DIV             shift and go to state 155
    LESS            shift and go to state 158
    LTEQ            shift and go to state 159
    GREATER         shift and go to state 160
    GTEQ            shift and go to state 161

  ! ADD             [ reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .) ]
  ! SUB             [ reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .) ]
  ! MUL             [ reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .) ]
  ! DIV             [ reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .) ]
  ! LESS            [ reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .) ]
  ! LTEQ            [ reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .) ]
  ! GREATER         [ reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .) ]
  ! GTEQ            [ reduce using rule 128 (exprbinaryexpr -> Expr EQ Expr .) ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! EQ              [ shift and go to state 162 ]
  ! NEQ             [ shift and go to state 163 ]
  ! PLUSPLUS        [ shift and go to state 150 ]
  ! MINUSMINUS      [ shift and go to state 151 ]


state 202

    (129) exprbinaryexpr -> Expr NEQ Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    PLUSPLUS        reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .)
    MINUSMINUS      reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .)
    AND             reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .)
    OR              reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .)
    EQ              reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .)
    NEQ             reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .)
    ;               reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .)
    )               reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .)
    ,               reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .)
    ]               reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .)
    ADD             shift and go to state 152
    SUB             shift and go to state 153
    MUL             shift and go to state 154
    DIV             shift and go to state 155
    LESS            shift and go to state 158
    LTEQ            shift and go to state 159
    GREATER         shift and go to state 160
    GTEQ            shift and go to state 161

  ! ADD             [ reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .) ]
  ! SUB             [ reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .) ]
  ! MUL             [ reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .) ]
  ! DIV             [ reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .) ]
  ! LESS            [ reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .) ]
  ! LTEQ            [ reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .) ]
  ! GREATER         [ reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .) ]
  ! GTEQ            [ reduce using rule 129 (exprbinaryexpr -> Expr NEQ Expr .) ]
  ! AND             [ shift and go to state 156 ]
  ! OR              [ shift and go to state 157 ]
  ! EQ              [ shift and go to state 162 ]
  ! NEQ             [ shift and go to state 163 ]
  ! PLUSPLUS        [ shift and go to state 150 ]
  ! MINUSMINUS      [ shift and go to state 151 ]


state 203

    (66) variable_declarators -> variable_declarators , variable_declarator .

    ;               reduce using rule 66 (variable_declarators -> variable_declarators , variable_declarator .)
    ,               reduce using rule 66 (variable_declarators -> variable_declarators , variable_declarator .)


state 204

    (68) variable_declarator -> variable_declarator_id ASSIGN Expr .
    (118) exprbinaryexpr -> Expr . ADD Expr
    (119) exprbinaryexpr -> Expr . SUB Expr
    (120) exprbinaryexpr -> Expr . MUL Expr
    (121) exprbinaryexpr -> Expr . DIV Expr
    (122) exprbinaryexpr -> Expr . AND Expr
    (123) exprbinaryexpr -> Expr . OR Expr
    (124) exprbinaryexpr -> Expr . LESS Expr
    (125) exprbinaryexpr -> Expr . LTEQ Expr
    (126) exprbinaryexpr -> Expr . GREATER Expr
    (127) exprbinaryexpr -> Expr . GTEQ Expr
    (128) exprbinaryexpr -> Expr . EQ Expr
    (129) exprbinaryexpr -> Expr . NEQ Expr
    (137) post_increment_expression -> Expr . PLUSPLUS
    (138) post_decrement_expression -> Expr . MINUSMINUS

    ;               reduce using rule 68 (variable_declarator -> variable_declarator_id ASSIGN Expr .)
    ,               reduce using rule 68 (variable_declarator -> variable_declarator_id ASSIGN Expr .)
    ADD             shift and go to state 152
    SUB             shift and go to state 153
    MUL             shift and go to state 154
    DIV             shift and go to state 155
    AND             shift and go to state 156
    OR              shift and go to state 157
    LESS            shift and go to state 158
    LTEQ            shift and go to state 159
    GREATER         shift and go to state 160
    GTEQ            shift and go to state 161
    EQ              shift and go to state 162
    NEQ             shift and go to state 163
    PLUSPLUS        shift and go to state 150
    MINUSMINUS      shift and go to state 151


state 205

    (38) dims -> dims [ ] .

    [               reduce using rule 38 (dims -> dims [ ] .)
    MAIN            reduce using rule 38 (dims -> dims [ ] .)
    NAME            reduce using rule 38 (dims -> dims [ ] .)


state 206

    (32) formal_parameter_list -> formal_parameter_list , formal_parameter .

    ,               reduce using rule 32 (formal_parameter_list -> formal_parameter_list , formal_parameter .)
    )               reduce using rule 32 (formal_parameter_list -> formal_parameter_list , formal_parameter .)


state 207

    (91) if_then_statement -> IF ( expression closing_parantheses_if . opening_bracket block_statements closing_bracket
    (93) if_then_else_statement -> IF ( expression closing_parantheses_if . opening_bracket block_statements closing_bracket else
    (12) opening_bracket -> . {

    {               shift and go to state 20

    opening_bracket                shift and go to state 215

state 208

    (92) closing_parantheses_if -> ) .

    {               reduce using rule 92 (closing_parantheses_if -> ) .)


state 209

    (96) while_statement -> while ( expression closing_parantheses . opening_bracket block_statements closing_bracket
    (12) opening_bracket -> . {

    {               shift and go to state 20

    opening_bracket                shift and go to state 216

state 210

    (97) closing_parantheses -> ) .

    {               reduce using rule 97 (closing_parantheses -> ) .)


state 211

    (99) do_while_statement -> do opening_bracket block_statements closing_bracket . WHILE ( expression ) ;

    WHILE           shift and go to state 217


state 212

    (82) method_invocation -> NAME ( argument_list ) .

    ;               reduce using rule 82 (method_invocation -> NAME ( argument_list ) .)


state 213

    (85) argument_list -> argument_list , . expression
    (101) expression -> . assignment_expression
    (102) assignment_expression -> . assignment
    (103) assignment_expression -> . Expr
    (104) assignment -> . Location assignment_operator Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (105) Location -> . name
    (106) Location -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    expression                     shift and go to state 218
    assignment_expression          shift and go to state 136
    assignment                     shift and go to state 137
    Expr                           shift and go to state 138
    Location                       shift and go to state 87
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 140
    array_access                   shift and go to state 141
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 214

    (139) array_access -> name [ Expr ] .

    ASSIGN          reduce using rule 139 (array_access -> name [ Expr ] .)
    TIMES_ASSIGN    reduce using rule 139 (array_access -> name [ Expr ] .)
    DIVIDE_ASSIGN   reduce using rule 139 (array_access -> name [ Expr ] .)
    REMAINDER_ASSIGN reduce using rule 139 (array_access -> name [ Expr ] .)
    PLUS_ASSIGN     reduce using rule 139 (array_access -> name [ Expr ] .)
    MINUS_ASSIGN    reduce using rule 139 (array_access -> name [ Expr ] .)
    PLUSPLUS        reduce using rule 139 (array_access -> name [ Expr ] .)
    MINUSMINUS      reduce using rule 139 (array_access -> name [ Expr ] .)
    ADD             reduce using rule 139 (array_access -> name [ Expr ] .)
    SUB             reduce using rule 139 (array_access -> name [ Expr ] .)
    MUL             reduce using rule 139 (array_access -> name [ Expr ] .)
    DIV             reduce using rule 139 (array_access -> name [ Expr ] .)
    AND             reduce using rule 139 (array_access -> name [ Expr ] .)
    OR              reduce using rule 139 (array_access -> name [ Expr ] .)
    LESS            reduce using rule 139 (array_access -> name [ Expr ] .)
    LTEQ            reduce using rule 139 (array_access -> name [ Expr ] .)
    GREATER         reduce using rule 139 (array_access -> name [ Expr ] .)
    GTEQ            reduce using rule 139 (array_access -> name [ Expr ] .)
    EQ              reduce using rule 139 (array_access -> name [ Expr ] .)
    NEQ             reduce using rule 139 (array_access -> name [ Expr ] .)
    ;               reduce using rule 139 (array_access -> name [ Expr ] .)
    )               reduce using rule 139 (array_access -> name [ Expr ] .)
    ,               reduce using rule 139 (array_access -> name [ Expr ] .)
    ]               reduce using rule 139 (array_access -> name [ Expr ] .)


state 215

    (91) if_then_statement -> IF ( expression closing_parantheses_if opening_bracket . block_statements closing_bracket
    (93) if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket . block_statements closing_bracket else
    (58) block_statements -> . block_statement
    (59) block_statements -> . block_statements block_statement
    (60) block_statement -> . local_variable_declaration_statement
    (61) block_statement -> . statement
    (62) local_variable_declaration_statement -> . local_variable_declaration ;
    (69) statement -> . other_statement
    (70) statement -> . if_then_statement
    (71) statement -> . if_then_else_statement
    (72) statement -> . while_statement
    (73) statement -> . do_while_statement
    (63) local_variable_declaration -> . type variable_declarators
    (64) local_variable_declaration -> . modifiers type variable_declarators
    (74) other_statement -> . expression_statement
    (75) other_statement -> . break_statement
    (76) other_statement -> . return_statement
    (77) other_statement -> . ;
    (91) if_then_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket
    (93) if_then_else_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else
    (96) while_statement -> . while ( expression closing_parantheses opening_bracket block_statements closing_bracket
    (99) do_while_statement -> . do opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (33) type -> . primitive_type
    (34) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (78) expression_statement -> . statement_expression ;
    (86) break_statement -> . BREAK ;
    (87) break_statement -> . BREAK NAME ;
    (88) return_statement -> . RETURN expression_opt ;
    (98) while -> . WHILE
    (100) do -> . DO
    (39) primitive_type -> . BOOLEAN
    (40) primitive_type -> . VOID
    (41) primitive_type -> . BYTE
    (42) primitive_type -> . SHORT
    (43) primitive_type -> . INT
    (44) primitive_type -> . LONG
    (45) primitive_type -> . CHAR
    (46) primitive_type -> . FLOAT
    (47) primitive_type -> . DOUBLE
    (48) primitive_type -> . STRING
    (35) array_type -> . primitive_type dims
    (36) array_type -> . name dims
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE
    (79) statement_expression -> . assignment
    (80) statement_expression -> . unary_expression
    (81) statement_expression -> . method_invocation
    (56) name -> . NAME
    (104) assignment -> . Location assignment_operator Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (82) method_invocation -> . NAME ( argument_list )
    (83) method_invocation -> . NAME ( )
    (105) Location -> . name
    (106) Location -> . array_access
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS
    (139) array_access -> . name [ Expr ]
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL

    ;               shift and go to state 63
    IF              shift and go to state 74
    BREAK           shift and go to state 79
    RETURN          shift and go to state 81
    WHILE           shift and go to state 77
    DO              shift and go to state 82
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 46
    BYTE            shift and go to state 47
    SHORT           shift and go to state 48
    INT             shift and go to state 49
    LONG            shift and go to state 50
    CHAR            shift and go to state 51
    FLOAT           shift and go to state 52
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 54
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    NAME            shift and go to state 80
    UMINUS          shift and go to state 91
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104

    block_statements               shift and go to state 219
    block_statement                shift and go to state 59
    local_variable_declaration_statement shift and go to state 60
    statement                      shift and go to state 61
    local_variable_declaration     shift and go to state 62
    other_statement                shift and go to state 64
    if_then_statement              shift and go to state 65
    if_then_else_statement         shift and go to state 66
    while_statement                shift and go to state 67
    do_while_statement             shift and go to state 68
    type                           shift and go to state 69
    modifiers                      shift and go to state 70
    expression_statement           shift and go to state 71
    break_statement                shift and go to state 72
    return_statement               shift and go to state 73
    while                          shift and go to state 75
    do                             shift and go to state 76
    primitive_type                 shift and go to state 43
    array_type                     shift and go to state 44
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 78
    name                           shift and go to state 83
    assignment                     shift and go to state 84
    unary_expression               shift and go to state 85
    method_invocation              shift and go to state 86
    Location                       shift and go to state 87
    Expr                           shift and go to state 88
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93
    array_access                   shift and go to state 94
    exprbinaryexpr                 shift and go to state 97
    literal                        shift and go to state 98

state 216

    (96) while_statement -> while ( expression closing_parantheses opening_bracket . block_statements closing_bracket
    (58) block_statements -> . block_statement
    (59) block_statements -> . block_statements block_statement
    (60) block_statement -> . local_variable_declaration_statement
    (61) block_statement -> . statement
    (62) local_variable_declaration_statement -> . local_variable_declaration ;
    (69) statement -> . other_statement
    (70) statement -> . if_then_statement
    (71) statement -> . if_then_else_statement
    (72) statement -> . while_statement
    (73) statement -> . do_while_statement
    (63) local_variable_declaration -> . type variable_declarators
    (64) local_variable_declaration -> . modifiers type variable_declarators
    (74) other_statement -> . expression_statement
    (75) other_statement -> . break_statement
    (76) other_statement -> . return_statement
    (77) other_statement -> . ;
    (91) if_then_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket
    (93) if_then_else_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else
    (96) while_statement -> . while ( expression closing_parantheses opening_bracket block_statements closing_bracket
    (99) do_while_statement -> . do opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (33) type -> . primitive_type
    (34) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (78) expression_statement -> . statement_expression ;
    (86) break_statement -> . BREAK ;
    (87) break_statement -> . BREAK NAME ;
    (88) return_statement -> . RETURN expression_opt ;
    (98) while -> . WHILE
    (100) do -> . DO
    (39) primitive_type -> . BOOLEAN
    (40) primitive_type -> . VOID
    (41) primitive_type -> . BYTE
    (42) primitive_type -> . SHORT
    (43) primitive_type -> . INT
    (44) primitive_type -> . LONG
    (45) primitive_type -> . CHAR
    (46) primitive_type -> . FLOAT
    (47) primitive_type -> . DOUBLE
    (48) primitive_type -> . STRING
    (35) array_type -> . primitive_type dims
    (36) array_type -> . name dims
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE
    (79) statement_expression -> . assignment
    (80) statement_expression -> . unary_expression
    (81) statement_expression -> . method_invocation
    (56) name -> . NAME
    (104) assignment -> . Location assignment_operator Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (82) method_invocation -> . NAME ( argument_list )
    (83) method_invocation -> . NAME ( )
    (105) Location -> . name
    (106) Location -> . array_access
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS
    (139) array_access -> . name [ Expr ]
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL

    ;               shift and go to state 63
    IF              shift and go to state 74
    BREAK           shift and go to state 79
    RETURN          shift and go to state 81
    WHILE           shift and go to state 77
    DO              shift and go to state 82
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 46
    BYTE            shift and go to state 47
    SHORT           shift and go to state 48
    INT             shift and go to state 49
    LONG            shift and go to state 50
    CHAR            shift and go to state 51
    FLOAT           shift and go to state 52
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 54
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    NAME            shift and go to state 80
    UMINUS          shift and go to state 91
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104

    while                          shift and go to state 75
    block_statements               shift and go to state 220
    block_statement                shift and go to state 59
    local_variable_declaration_statement shift and go to state 60
    statement                      shift and go to state 61
    local_variable_declaration     shift and go to state 62
    other_statement                shift and go to state 64
    if_then_statement              shift and go to state 65
    if_then_else_statement         shift and go to state 66
    while_statement                shift and go to state 67
    do_while_statement             shift and go to state 68
    type                           shift and go to state 69
    modifiers                      shift and go to state 70
    expression_statement           shift and go to state 71
    break_statement                shift and go to state 72
    return_statement               shift and go to state 73
    do                             shift and go to state 76
    primitive_type                 shift and go to state 43
    array_type                     shift and go to state 44
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 78
    name                           shift and go to state 83
    assignment                     shift and go to state 84
    unary_expression               shift and go to state 85
    method_invocation              shift and go to state 86
    Location                       shift and go to state 87
    Expr                           shift and go to state 88
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93
    array_access                   shift and go to state 94
    exprbinaryexpr                 shift and go to state 97
    literal                        shift and go to state 98

state 217

    (99) do_while_statement -> do opening_bracket block_statements closing_bracket WHILE . ( expression ) ;

    (               shift and go to state 221


state 218

    (85) argument_list -> argument_list , expression .

    )               reduce using rule 85 (argument_list -> argument_list , expression .)
    ,               reduce using rule 85 (argument_list -> argument_list , expression .)


state 219

    (91) if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements . closing_bracket
    (93) if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements . closing_bracket else
    (59) block_statements -> block_statements . block_statement
    (13) closing_bracket -> . }
    (60) block_statement -> . local_variable_declaration_statement
    (61) block_statement -> . statement
    (62) local_variable_declaration_statement -> . local_variable_declaration ;
    (69) statement -> . other_statement
    (70) statement -> . if_then_statement
    (71) statement -> . if_then_else_statement
    (72) statement -> . while_statement
    (73) statement -> . do_while_statement
    (63) local_variable_declaration -> . type variable_declarators
    (64) local_variable_declaration -> . modifiers type variable_declarators
    (74) other_statement -> . expression_statement
    (75) other_statement -> . break_statement
    (76) other_statement -> . return_statement
    (77) other_statement -> . ;
    (91) if_then_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket
    (93) if_then_else_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else
    (96) while_statement -> . while ( expression closing_parantheses opening_bracket block_statements closing_bracket
    (99) do_while_statement -> . do opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (33) type -> . primitive_type
    (34) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (78) expression_statement -> . statement_expression ;
    (86) break_statement -> . BREAK ;
    (87) break_statement -> . BREAK NAME ;
    (88) return_statement -> . RETURN expression_opt ;
    (98) while -> . WHILE
    (100) do -> . DO
    (39) primitive_type -> . BOOLEAN
    (40) primitive_type -> . VOID
    (41) primitive_type -> . BYTE
    (42) primitive_type -> . SHORT
    (43) primitive_type -> . INT
    (44) primitive_type -> . LONG
    (45) primitive_type -> . CHAR
    (46) primitive_type -> . FLOAT
    (47) primitive_type -> . DOUBLE
    (48) primitive_type -> . STRING
    (35) array_type -> . primitive_type dims
    (36) array_type -> . name dims
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE
    (79) statement_expression -> . assignment
    (80) statement_expression -> . unary_expression
    (81) statement_expression -> . method_invocation
    (56) name -> . NAME
    (104) assignment -> . Location assignment_operator Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (82) method_invocation -> . NAME ( argument_list )
    (83) method_invocation -> . NAME ( )
    (105) Location -> . name
    (106) Location -> . array_access
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS
    (139) array_access -> . name [ Expr ]
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL

    }               shift and go to state 38
    ;               shift and go to state 63
    IF              shift and go to state 74
    BREAK           shift and go to state 79
    RETURN          shift and go to state 81
    WHILE           shift and go to state 77
    DO              shift and go to state 82
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 46
    BYTE            shift and go to state 47
    SHORT           shift and go to state 48
    INT             shift and go to state 49
    LONG            shift and go to state 50
    CHAR            shift and go to state 51
    FLOAT           shift and go to state 52
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 54
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    NAME            shift and go to state 80
    UMINUS          shift and go to state 91
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104

    closing_bracket                shift and go to state 222
    block_statement                shift and go to state 121
    local_variable_declaration_statement shift and go to state 60
    statement                      shift and go to state 61
    local_variable_declaration     shift and go to state 62
    other_statement                shift and go to state 64
    if_then_statement              shift and go to state 65
    if_then_else_statement         shift and go to state 66
    while_statement                shift and go to state 67
    do_while_statement             shift and go to state 68
    type                           shift and go to state 69
    modifiers                      shift and go to state 70
    expression_statement           shift and go to state 71
    break_statement                shift and go to state 72
    return_statement               shift and go to state 73
    while                          shift and go to state 75
    do                             shift and go to state 76
    primitive_type                 shift and go to state 43
    array_type                     shift and go to state 44
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 78
    name                           shift and go to state 83
    assignment                     shift and go to state 84
    unary_expression               shift and go to state 85
    method_invocation              shift and go to state 86
    Location                       shift and go to state 87
    Expr                           shift and go to state 88
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93
    array_access                   shift and go to state 94
    exprbinaryexpr                 shift and go to state 97
    literal                        shift and go to state 98

state 220

    (96) while_statement -> while ( expression closing_parantheses opening_bracket block_statements . closing_bracket
    (59) block_statements -> block_statements . block_statement
    (13) closing_bracket -> . }
    (60) block_statement -> . local_variable_declaration_statement
    (61) block_statement -> . statement
    (62) local_variable_declaration_statement -> . local_variable_declaration ;
    (69) statement -> . other_statement
    (70) statement -> . if_then_statement
    (71) statement -> . if_then_else_statement
    (72) statement -> . while_statement
    (73) statement -> . do_while_statement
    (63) local_variable_declaration -> . type variable_declarators
    (64) local_variable_declaration -> . modifiers type variable_declarators
    (74) other_statement -> . expression_statement
    (75) other_statement -> . break_statement
    (76) other_statement -> . return_statement
    (77) other_statement -> . ;
    (91) if_then_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket
    (93) if_then_else_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else
    (96) while_statement -> . while ( expression closing_parantheses opening_bracket block_statements closing_bracket
    (99) do_while_statement -> . do opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (33) type -> . primitive_type
    (34) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (78) expression_statement -> . statement_expression ;
    (86) break_statement -> . BREAK ;
    (87) break_statement -> . BREAK NAME ;
    (88) return_statement -> . RETURN expression_opt ;
    (98) while -> . WHILE
    (100) do -> . DO
    (39) primitive_type -> . BOOLEAN
    (40) primitive_type -> . VOID
    (41) primitive_type -> . BYTE
    (42) primitive_type -> . SHORT
    (43) primitive_type -> . INT
    (44) primitive_type -> . LONG
    (45) primitive_type -> . CHAR
    (46) primitive_type -> . FLOAT
    (47) primitive_type -> . DOUBLE
    (48) primitive_type -> . STRING
    (35) array_type -> . primitive_type dims
    (36) array_type -> . name dims
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE
    (79) statement_expression -> . assignment
    (80) statement_expression -> . unary_expression
    (81) statement_expression -> . method_invocation
    (56) name -> . NAME
    (104) assignment -> . Location assignment_operator Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (82) method_invocation -> . NAME ( argument_list )
    (83) method_invocation -> . NAME ( )
    (105) Location -> . name
    (106) Location -> . array_access
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS
    (139) array_access -> . name [ Expr ]
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL

    }               shift and go to state 38
    ;               shift and go to state 63
    IF              shift and go to state 74
    BREAK           shift and go to state 79
    RETURN          shift and go to state 81
    WHILE           shift and go to state 77
    DO              shift and go to state 82
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 46
    BYTE            shift and go to state 47
    SHORT           shift and go to state 48
    INT             shift and go to state 49
    LONG            shift and go to state 50
    CHAR            shift and go to state 51
    FLOAT           shift and go to state 52
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 54
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    NAME            shift and go to state 80
    UMINUS          shift and go to state 91
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104

    while                          shift and go to state 75
    closing_bracket                shift and go to state 223
    block_statement                shift and go to state 121
    local_variable_declaration_statement shift and go to state 60
    statement                      shift and go to state 61
    local_variable_declaration     shift and go to state 62
    other_statement                shift and go to state 64
    if_then_statement              shift and go to state 65
    if_then_else_statement         shift and go to state 66
    while_statement                shift and go to state 67
    do_while_statement             shift and go to state 68
    type                           shift and go to state 69
    modifiers                      shift and go to state 70
    expression_statement           shift and go to state 71
    break_statement                shift and go to state 72
    return_statement               shift and go to state 73
    do                             shift and go to state 76
    primitive_type                 shift and go to state 43
    array_type                     shift and go to state 44
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 78
    name                           shift and go to state 83
    assignment                     shift and go to state 84
    unary_expression               shift and go to state 85
    method_invocation              shift and go to state 86
    Location                       shift and go to state 87
    Expr                           shift and go to state 88
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93
    array_access                   shift and go to state 94
    exprbinaryexpr                 shift and go to state 97
    literal                        shift and go to state 98

state 221

    (99) do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( . expression ) ;
    (101) expression -> . assignment_expression
    (102) assignment_expression -> . assignment
    (103) assignment_expression -> . Expr
    (104) assignment -> . Location assignment_operator Expr
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (105) Location -> . name
    (106) Location -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL
    (56) name -> . NAME
    (139) array_access -> . name [ Expr ]
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS

    UMINUS          shift and go to state 91
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104
    NAME            shift and go to state 35
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96

    expression                     shift and go to state 224
    assignment_expression          shift and go to state 136
    assignment                     shift and go to state 137
    Expr                           shift and go to state 138
    Location                       shift and go to state 87
    exprbinaryexpr                 shift and go to state 97
    unary_expression               shift and go to state 139
    literal                        shift and go to state 98
    name                           shift and go to state 140
    array_access                   shift and go to state 141
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93

state 222

    (91) if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .
    (93) if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket . else
    (94) else -> . else_stmt opening_bracket block_statements closing_bracket
    (95) else_stmt -> . ELSE

    ;               reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    IF              reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    BREAK           reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    RETURN          reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    WHILE           reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    DO              reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    BOOLEAN         reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    VOID            reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    BYTE            reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    SHORT           reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    INT             reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    LONG            reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    CHAR            reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    FLOAT           reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    DOUBLE          reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    STRING          reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    PUBLIC          reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    PROTECTED       reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    PRIVATE         reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    STATIC          reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    ABSTRACT        reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    FINAL           reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    NATIVE          reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    NAME            reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    UMINUS          reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    PLUSPLUS        reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    MINUSMINUS      reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    NUM             reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    CHAR_LITERAL    reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    STRING_LITERAL  reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    TRUE            reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    FALSE           reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    NULL            reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    }               reduce using rule 91 (if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket .)
    ELSE            shift and go to state 227

    else                           shift and go to state 225
    else_stmt                      shift and go to state 226

state 223

    (96) while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .

    ;               reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    IF              reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    BREAK           reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    RETURN          reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    WHILE           reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    DO              reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    BOOLEAN         reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    VOID            reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    BYTE            reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    SHORT           reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    INT             reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    LONG            reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    CHAR            reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    FLOAT           reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    DOUBLE          reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    STRING          reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    PUBLIC          reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    PROTECTED       reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    PRIVATE         reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    STATIC          reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    ABSTRACT        reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    FINAL           reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    NATIVE          reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    NAME            reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    UMINUS          reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    PLUSPLUS        reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    MINUSMINUS      reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    NUM             reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    CHAR_LITERAL    reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    STRING_LITERAL  reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    TRUE            reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    FALSE           reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    NULL            reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)
    }               reduce using rule 96 (while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket .)


state 224

    (99) do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression . ) ;

    )               shift and go to state 228


state 225

    (93) if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .

    ;               reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    IF              reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    BREAK           reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    RETURN          reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    WHILE           reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    DO              reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    BOOLEAN         reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    VOID            reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    BYTE            reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    SHORT           reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    INT             reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    LONG            reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    CHAR            reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    FLOAT           reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    DOUBLE          reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    STRING          reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    PUBLIC          reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    PROTECTED       reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    PRIVATE         reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    STATIC          reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    ABSTRACT        reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    FINAL           reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    NATIVE          reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    NAME            reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    UMINUS          reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    PLUSPLUS        reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    MINUSMINUS      reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    NUM             reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    CHAR_LITERAL    reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    STRING_LITERAL  reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    TRUE            reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    FALSE           reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    NULL            reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)
    }               reduce using rule 93 (if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else .)


state 226

    (94) else -> else_stmt . opening_bracket block_statements closing_bracket
    (12) opening_bracket -> . {

    {               shift and go to state 20

    opening_bracket                shift and go to state 229

state 227

    (95) else_stmt -> ELSE .

    {               reduce using rule 95 (else_stmt -> ELSE .)


state 228

    (99) do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) . ;

    ;               shift and go to state 230


state 229

    (94) else -> else_stmt opening_bracket . block_statements closing_bracket
    (58) block_statements -> . block_statement
    (59) block_statements -> . block_statements block_statement
    (60) block_statement -> . local_variable_declaration_statement
    (61) block_statement -> . statement
    (62) local_variable_declaration_statement -> . local_variable_declaration ;
    (69) statement -> . other_statement
    (70) statement -> . if_then_statement
    (71) statement -> . if_then_else_statement
    (72) statement -> . while_statement
    (73) statement -> . do_while_statement
    (63) local_variable_declaration -> . type variable_declarators
    (64) local_variable_declaration -> . modifiers type variable_declarators
    (74) other_statement -> . expression_statement
    (75) other_statement -> . break_statement
    (76) other_statement -> . return_statement
    (77) other_statement -> . ;
    (91) if_then_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket
    (93) if_then_else_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else
    (96) while_statement -> . while ( expression closing_parantheses opening_bracket block_statements closing_bracket
    (99) do_while_statement -> . do opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (33) type -> . primitive_type
    (34) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (78) expression_statement -> . statement_expression ;
    (86) break_statement -> . BREAK ;
    (87) break_statement -> . BREAK NAME ;
    (88) return_statement -> . RETURN expression_opt ;
    (98) while -> . WHILE
    (100) do -> . DO
    (39) primitive_type -> . BOOLEAN
    (40) primitive_type -> . VOID
    (41) primitive_type -> . BYTE
    (42) primitive_type -> . SHORT
    (43) primitive_type -> . INT
    (44) primitive_type -> . LONG
    (45) primitive_type -> . CHAR
    (46) primitive_type -> . FLOAT
    (47) primitive_type -> . DOUBLE
    (48) primitive_type -> . STRING
    (35) array_type -> . primitive_type dims
    (36) array_type -> . name dims
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE
    (79) statement_expression -> . assignment
    (80) statement_expression -> . unary_expression
    (81) statement_expression -> . method_invocation
    (56) name -> . NAME
    (104) assignment -> . Location assignment_operator Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (82) method_invocation -> . NAME ( argument_list )
    (83) method_invocation -> . NAME ( )
    (105) Location -> . name
    (106) Location -> . array_access
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS
    (139) array_access -> . name [ Expr ]
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL

    ;               shift and go to state 63
    IF              shift and go to state 74
    BREAK           shift and go to state 79
    RETURN          shift and go to state 81
    WHILE           shift and go to state 77
    DO              shift and go to state 82
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 46
    BYTE            shift and go to state 47
    SHORT           shift and go to state 48
    INT             shift and go to state 49
    LONG            shift and go to state 50
    CHAR            shift and go to state 51
    FLOAT           shift and go to state 52
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 54
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    NAME            shift and go to state 80
    UMINUS          shift and go to state 91
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104

    block_statements               shift and go to state 231
    block_statement                shift and go to state 59
    local_variable_declaration_statement shift and go to state 60
    statement                      shift and go to state 61
    local_variable_declaration     shift and go to state 62
    other_statement                shift and go to state 64
    if_then_statement              shift and go to state 65
    if_then_else_statement         shift and go to state 66
    while_statement                shift and go to state 67
    do_while_statement             shift and go to state 68
    type                           shift and go to state 69
    modifiers                      shift and go to state 70
    expression_statement           shift and go to state 71
    break_statement                shift and go to state 72
    return_statement               shift and go to state 73
    while                          shift and go to state 75
    do                             shift and go to state 76
    primitive_type                 shift and go to state 43
    array_type                     shift and go to state 44
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 78
    name                           shift and go to state 83
    assignment                     shift and go to state 84
    unary_expression               shift and go to state 85
    method_invocation              shift and go to state 86
    Location                       shift and go to state 87
    Expr                           shift and go to state 88
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93
    array_access                   shift and go to state 94
    exprbinaryexpr                 shift and go to state 97
    literal                        shift and go to state 98

state 230

    (99) do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .

    ;               reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    IF              reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    BREAK           reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    RETURN          reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    WHILE           reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    DO              reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    BOOLEAN         reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    VOID            reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    BYTE            reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    SHORT           reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    INT             reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    LONG            reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    CHAR            reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    FLOAT           reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    DOUBLE          reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    STRING          reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    PUBLIC          reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    PROTECTED       reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    PRIVATE         reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    STATIC          reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    ABSTRACT        reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    FINAL           reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    NATIVE          reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    NAME            reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    UMINUS          reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    PLUSPLUS        reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    MINUSMINUS      reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    NUM             reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    CHAR_LITERAL    reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    STRING_LITERAL  reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    TRUE            reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    FALSE           reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    NULL            reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)
    }               reduce using rule 99 (do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ; .)


state 231

    (94) else -> else_stmt opening_bracket block_statements . closing_bracket
    (59) block_statements -> block_statements . block_statement
    (13) closing_bracket -> . }
    (60) block_statement -> . local_variable_declaration_statement
    (61) block_statement -> . statement
    (62) local_variable_declaration_statement -> . local_variable_declaration ;
    (69) statement -> . other_statement
    (70) statement -> . if_then_statement
    (71) statement -> . if_then_else_statement
    (72) statement -> . while_statement
    (73) statement -> . do_while_statement
    (63) local_variable_declaration -> . type variable_declarators
    (64) local_variable_declaration -> . modifiers type variable_declarators
    (74) other_statement -> . expression_statement
    (75) other_statement -> . break_statement
    (76) other_statement -> . return_statement
    (77) other_statement -> . ;
    (91) if_then_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket
    (93) if_then_else_statement -> . IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else
    (96) while_statement -> . while ( expression closing_parantheses opening_bracket block_statements closing_bracket
    (99) do_while_statement -> . do opening_bracket block_statements closing_bracket WHILE ( expression ) ;
    (33) type -> . primitive_type
    (34) type -> . array_type
    (9) modifiers -> . modifier
    (10) modifiers -> . modifiers modifier
    (78) expression_statement -> . statement_expression ;
    (86) break_statement -> . BREAK ;
    (87) break_statement -> . BREAK NAME ;
    (88) return_statement -> . RETURN expression_opt ;
    (98) while -> . WHILE
    (100) do -> . DO
    (39) primitive_type -> . BOOLEAN
    (40) primitive_type -> . VOID
    (41) primitive_type -> . BYTE
    (42) primitive_type -> . SHORT
    (43) primitive_type -> . INT
    (44) primitive_type -> . LONG
    (45) primitive_type -> . CHAR
    (46) primitive_type -> . FLOAT
    (47) primitive_type -> . DOUBLE
    (48) primitive_type -> . STRING
    (35) array_type -> . primitive_type dims
    (36) array_type -> . name dims
    (49) modifier -> . PUBLIC
    (50) modifier -> . PROTECTED
    (51) modifier -> . PRIVATE
    (52) modifier -> . STATIC
    (53) modifier -> . ABSTRACT
    (54) modifier -> . FINAL
    (55) modifier -> . NATIVE
    (79) statement_expression -> . assignment
    (80) statement_expression -> . unary_expression
    (81) statement_expression -> . method_invocation
    (56) name -> . NAME
    (104) assignment -> . Location assignment_operator Expr
    (130) unary_expression -> . pre_increment_expression
    (131) unary_expression -> . pre_decrement_expression
    (132) unary_expression -> . UMINUS Expr
    (133) unary_expression -> . post_increment_expression
    (134) unary_expression -> . post_decrement_expression
    (82) method_invocation -> . NAME ( argument_list )
    (83) method_invocation -> . NAME ( )
    (105) Location -> . name
    (106) Location -> . array_access
    (135) pre_increment_expression -> . PLUSPLUS Expr
    (136) pre_decrement_expression -> . MINUSMINUS Expr
    (137) post_increment_expression -> . Expr PLUSPLUS
    (138) post_decrement_expression -> . Expr MINUSMINUS
    (139) array_access -> . name [ Expr ]
    (113) Expr -> . exprbinaryexpr
    (114) Expr -> . unary_expression
    (115) Expr -> . literal
    (116) Expr -> . name
    (117) Expr -> . array_access
    (118) exprbinaryexpr -> . Expr ADD Expr
    (119) exprbinaryexpr -> . Expr SUB Expr
    (120) exprbinaryexpr -> . Expr MUL Expr
    (121) exprbinaryexpr -> . Expr DIV Expr
    (122) exprbinaryexpr -> . Expr AND Expr
    (123) exprbinaryexpr -> . Expr OR Expr
    (124) exprbinaryexpr -> . Expr LESS Expr
    (125) exprbinaryexpr -> . Expr LTEQ Expr
    (126) exprbinaryexpr -> . Expr GREATER Expr
    (127) exprbinaryexpr -> . Expr GTEQ Expr
    (128) exprbinaryexpr -> . Expr EQ Expr
    (129) exprbinaryexpr -> . Expr NEQ Expr
    (140) literal -> . NUM
    (141) literal -> . CHAR_LITERAL
    (142) literal -> . STRING_LITERAL
    (143) literal -> . TRUE
    (144) literal -> . FALSE
    (145) literal -> . NULL

    }               shift and go to state 38
    ;               shift and go to state 63
    IF              shift and go to state 74
    BREAK           shift and go to state 79
    RETURN          shift and go to state 81
    WHILE           shift and go to state 77
    DO              shift and go to state 82
    BOOLEAN         shift and go to state 45
    VOID            shift and go to state 46
    BYTE            shift and go to state 47
    SHORT           shift and go to state 48
    INT             shift and go to state 49
    LONG            shift and go to state 50
    CHAR            shift and go to state 51
    FLOAT           shift and go to state 52
    DOUBLE          shift and go to state 53
    STRING          shift and go to state 54
    PUBLIC          shift and go to state 10
    PROTECTED       shift and go to state 11
    PRIVATE         shift and go to state 12
    STATIC          shift and go to state 13
    ABSTRACT        shift and go to state 14
    FINAL           shift and go to state 15
    NATIVE          shift and go to state 16
    NAME            shift and go to state 80
    UMINUS          shift and go to state 91
    PLUSPLUS        shift and go to state 95
    MINUSMINUS      shift and go to state 96
    NUM             shift and go to state 99
    CHAR_LITERAL    shift and go to state 100
    STRING_LITERAL  shift and go to state 101
    TRUE            shift and go to state 102
    FALSE           shift and go to state 103
    NULL            shift and go to state 104

    closing_bracket                shift and go to state 232
    block_statement                shift and go to state 121
    local_variable_declaration_statement shift and go to state 60
    statement                      shift and go to state 61
    local_variable_declaration     shift and go to state 62
    other_statement                shift and go to state 64
    if_then_statement              shift and go to state 65
    if_then_else_statement         shift and go to state 66
    while_statement                shift and go to state 67
    do_while_statement             shift and go to state 68
    type                           shift and go to state 69
    modifiers                      shift and go to state 70
    expression_statement           shift and go to state 71
    break_statement                shift and go to state 72
    return_statement               shift and go to state 73
    while                          shift and go to state 75
    do                             shift and go to state 76
    primitive_type                 shift and go to state 43
    array_type                     shift and go to state 44
    modifier                       shift and go to state 9
    statement_expression           shift and go to state 78
    name                           shift and go to state 83
    assignment                     shift and go to state 84
    unary_expression               shift and go to state 85
    method_invocation              shift and go to state 86
    Location                       shift and go to state 87
    Expr                           shift and go to state 88
    pre_increment_expression       shift and go to state 89
    pre_decrement_expression       shift and go to state 90
    post_increment_expression      shift and go to state 92
    post_decrement_expression      shift and go to state 93
    array_access                   shift and go to state 94
    exprbinaryexpr                 shift and go to state 97
    literal                        shift and go to state 98

state 232

    (94) else -> else_stmt opening_bracket block_statements closing_bracket .

    ;               reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    IF              reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    BREAK           reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    RETURN          reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    WHILE           reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    DO              reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    BOOLEAN         reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    VOID            reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    BYTE            reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    SHORT           reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    INT             reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    LONG            reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    CHAR            reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    FLOAT           reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    DOUBLE          reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    STRING          reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    PUBLIC          reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    PROTECTED       reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    PRIVATE         reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    STATIC          reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    ABSTRACT        reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    FINAL           reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    NATIVE          reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    NAME            reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    UMINUS          reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    PLUSPLUS        reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    MINUSMINUS      reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    NUM             reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    CHAR_LITERAL    reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    STRING_LITERAL  reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    TRUE            reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    FALSE           reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    NULL            reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)
    }               reduce using rule 94 (else -> else_stmt opening_bracket block_statements closing_bracket .)



# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "rightASSIGNleftPLUSPLUSMINUSMINUSleftORleftANDleftNEQEQleftGREATERLESSGTEQLTEQleftADDSUBleftMULDIVrightUMINUSABSTRACT ADD AND ASSIGN BOOLEAN BREAK BYTE CHAR CHAR_LITERAL CLASS DIV DIVIDE_ASSIGN DO DOUBLE ELSE EQ FALSE FINAL FLOAT GREATER GTEQ IF INT LESS LONG LTEQ MAIN MINUSMINUS MINUS_ASSIGN MUL NAME NATIVE NEQ NULL NUM OR PLUSPLUS PLUS_ASSIGN PRIVATE PROTECTED PUBLIC REMAINDER_ASSIGN RETURN SHORT STATIC STRING STRING_LITERAL SUB TIMES_ASSIGN TRUE UMINUS VOID WHILEstart : type_declarations\n    \n    type_declarations : type_declaration\n                      | type_declarations ',' type_declaration\n    \n    type_declaration : class_declaration\n    \n    class_declaration : class_header_name class_body\n    \n    class_header_name : modifiers_opt CLASS name\n    \n    modifiers_opt : modifiers \n                  | empty\n    modifiers : modifier\n              | modifiers modifier\n    \n    class_body : opening_bracket classbodydecllist closing_bracket\n    opening_bracket : '{'\n    closing_bracket : '}'\n    \n    tmain : tmain_header opening_bracket method_body closing_bracket\n    \n    tmain_header : tmain_name '(' formal_parameter_list_opt ')'\n    \n    \n    tmain_name : modifiers_opt type MAIN\n    \n    classbodydecllist : classbodydecl \n                      | classbodydecllist classbodydecl\n    \n    classbodydecl : method_declaration \n                  | tmain\n                  | field_declartaion\n    \n    field_declartaion : modifiers_opt type variable_declarators ';'\n     \n    method_declaration : method_header opening_bracket method_body closing_bracket\n    \n    method_header : method_header_name '(' formal_parameter_list_opt ')'\n    \n    method_header_name : modifiers_opt type name \n    method_body : block_statements \n\n    formal_parameter : type variable_declarator_id   \n    variable_declarator_id : name \n    \n    formal_parameter_list_opt : formal_parameter_list\n                              | empty\n    \n    formal_parameter_list : formal_parameter\n                          | formal_parameter_list ',' formal_parameter\n    type : primitive_type\n            | array_type\n    array_type : primitive_type dims\n               | name dims\n    dims : '[' ']'\n         | dims '[' ']' \n    primitive_type : BOOLEAN\n                   | VOID\n                   | BYTE\n                   | SHORT\n                   | INT\n                   | LONG\n                   | CHAR\n                   | FLOAT\n                   | DOUBLE \n                   | STRING\n    modifier : PUBLIC\n                | PROTECTED\n                | PRIVATE\n                | STATIC\n                | ABSTRACT\n                | FINAL\n                | NATIVE\n    \n    name : NAME\n    empty :\n    block_statements : block_statement\n                    | block_statements block_statement\n    \n    block_statement : local_variable_declaration_statement\n                    | statement\n    \n    local_variable_declaration_statement : local_variable_declaration ';'\n    local_variable_declaration : type variable_declarators\n                               | modifiers type variable_declarators\n    \n    variable_declarators : variable_declarator\n                         | variable_declarators ',' variable_declarator\n    variable_declarator : variable_declarator_id\n                        | variable_declarator_id ASSIGN Expr\n    \n    statement : other_statement\n              | if_then_statement\n              | if_then_else_statement\n              | while_statement\n              | do_while_statement\n    \n    other_statement : expression_statement\n                    | break_statement\n                    | return_statement\n                    | ';'\n    \n    expression_statement : statement_expression ';'\n    statement_expression : assignment\n                         | unary_expression\n                         | method_invocation\n    \n    method_invocation : NAME '(' argument_list ')'\n                      | NAME '(' ')'\n    \n    argument_list : expression\n                  | argument_list ',' expression\n    \n    break_statement : BREAK ';'\n                    | BREAK NAME ';'\n    \n    return_statement : RETURN expression_opt ';'\n    expression_opt : expression\n                   | empty\n    \n    if_then_statement : IF '(' expression closing_parantheses_if opening_bracket block_statements closing_bracket\n    \n    closing_parantheses_if : ')'\n    \n    if_then_else_statement : IF '(' expression closing_parantheses_if opening_bracket block_statements closing_bracket else\n    else : else_stmt opening_bracket block_statements closing_bracket\n    \n    else_stmt : ELSE\n    \n    while_statement : while '(' expression closing_parantheses opening_bracket block_statements closing_bracket\n    \n    closing_parantheses : ')'\n    \n    while : WHILE\n    \n    do_while_statement : do opening_bracket block_statements closing_bracket WHILE '(' expression ')' ';'\n    \n        do : DO\n    \n    expression : assignment_expression\n    \n    assignment_expression : assignment\n                          | Expr\n    assignment : Location assignment_operator Expr\n    \n    Location : name\n              | array_access\n    \n    assignment_operator : ASSIGN\n                        | TIMES_ASSIGN\n                        | DIVIDE_ASSIGN\n                        | REMAINDER_ASSIGN\n                        | PLUS_ASSIGN\n                        | MINUS_ASSIGN\n    \n    Expr : exprbinaryexpr\n         | unary_expression\n         | literal\n         | name\n         | array_access\n    exprbinaryexpr : Expr ADD Expr\n                      | Expr SUB Expr\n                      | Expr MUL Expr\n                      | Expr DIV Expr\n                      | Expr AND Expr\n                      | Expr OR Expr\n                      | Expr LESS Expr\n                      | Expr LTEQ Expr\n                      | Expr GREATER Expr\n                      | Expr GTEQ Expr\n                      | Expr EQ Expr\n                      | Expr NEQ Expr\n    unary_expression : pre_increment_expression\n                     | pre_decrement_expression\n                     | UMINUS Expr %prec UMINUS\n                     | post_increment_expression\n                     | post_decrement_expression\n    \n    pre_increment_expression : PLUSPLUS Expr\n    pre_decrement_expression : MINUSMINUS Expr\n    \n    post_increment_expression : Expr PLUSPLUS\n    post_decrement_expression : Expr MINUSMINUS\n     \n    array_access : name '[' Expr ']'\n    literal : NUM\n               | CHAR_LITERAL\n               | STRING_LITERAL\n               | TRUE\n               | FALSE\n               | NULL"
    
_lr_action_items = {'CLASS':([0,6,7,8,9,10,11,12,13,14,15,16,17,22,],[-57,21,-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-10,]),'PUBLIC':([0,7,9,10,11,12,13,14,15,16,17,19,20,22,24,25,26,27,28,37,38,39,40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[10,10,-9,-49,-50,-51,-52,-53,-54,-55,10,10,-12,-10,10,-17,-19,-20,-21,-18,-13,10,10,10,-58,-60,-61,-77,-69,-70,-71,-72,-73,10,-74,-75,-76,-23,-59,-62,10,-78,-86,-14,-22,10,-87,-88,10,10,10,10,-91,-96,-93,10,-99,10,-94,]),'PROTECTED':([0,7,9,10,11,12,13,14,15,16,17,19,20,22,24,25,26,27,28,37,38,39,40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[11,11,-9,-49,-50,-51,-52,-53,-54,-55,11,11,-12,-10,11,-17,-19,-20,-21,-18,-13,11,11,11,-58,-60,-61,-77,-69,-70,-71,-72,-73,11,-74,-75,-76,-23,-59,-62,11,-78,-86,-14,-22,11,-87,-88,11,11,11,11,-91,-96,-93,11,-99,11,-94,]),'PRIVATE':([0,7,9,10,11,12,13,14,15,16,17,19,20,22,24,25,26,27,28,37,38,39,40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[12,12,-9,-49,-50,-51,-52,-53,-54,-55,12,12,-12,-10,12,-17,-19,-20,-21,-18,-13,12,12,12,-58,-60,-61,-77,-69,-70,-71,-72,-73,12,-74,-75,-76,-23,-59,-62,12,-78,-86,-14,-22,12,-87,-88,12,12,12,12,-91,-96,-93,12,-99,12,-94,]),'STATIC':([0,7,9,10,11,12,13,14,15,16,17,19,20,22,24,25,26,27,28,37,38,39,40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[13,13,-9,-49,-50,-51,-52,-53,-54,-55,13,13,-12,-10,13,-17,-19,-20,-21,-18,-13,13,13,13,-58,-60,-61,-77,-69,-70,-71,-72,-73,13,-74,-75,-76,-23,-59,-62,13,-78,-86,-14,-22,13,-87,-88,13,13,13,13,-91,-96,-93,13,-99,13,-94,]),'ABSTRACT':([0,7,9,10,11,12,13,14,15,16,17,19,20,22,24,25,26,27,28,37,38,39,40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[14,14,-9,-49,-50,-51,-52,-53,-54,-55,14,14,-12,-10,14,-17,-19,-20,-21,-18,-13,14,14,14,-58,-60,-61,-77,-69,-70,-71,-72,-73,14,-74,-75,-76,-23,-59,-62,14,-78,-86,-14,-22,14,-87,-88,14,14,14,14,-91,-96,-93,14,-99,14,-94,]),'FINAL':([0,7,9,10,11,12,13,14,15,16,17,19,20,22,24,25,26,27,28,37,38,39,40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[15,15,-9,-49,-50,-51,-52,-53,-54,-55,15,15,-12,-10,15,-17,-19,-20,-21,-18,-13,15,15,15,-58,-60,-61,-77,-69,-70,-71,-72,-73,15,-74,-75,-76,-23,-59,-62,15,-78,-86,-14,-22,15,-87,-88,15,15,15,15,-91,-96,-93,15,-99,15,-94,]),'NATIVE':([0,7,9,10,11,12,13,14,15,16,17,19,20,22,24,25,26,27,28,37,38,39,40,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[16,16,-9,-49,-50,-51,-52,-53,-54,-55,16,16,-12,-10,16,-17,-19,-20,-21,-18,-13,16,16,16,-58,-60,-61,-77,-69,-70,-71,-72,-73,16,-74,-75,-76,-23,-59,-62,16,-78,-86,-14,-22,16,-87,-88,16,16,16,16,-91,-96,-93,16,-99,16,-94,]),'$end':([1,2,3,4,18,23,36,38,],[0,-1,-2,-4,-5,-3,-11,-13,]),',':([2,3,4,18,23,35,36,38,89,90,92,93,97,98,99,100,101,102,103,104,106,107,109,110,115,117,123,124,136,137,138,139,140,141,150,151,164,165,166,167,168,177,179,184,186,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,206,214,218,],[17,-2,-4,-5,-3,-56,-11,-13,-130,-131,-133,-134,-113,-115,-140,-141,-142,-143,-144,-145,171,-28,-65,-67,176,-31,171,-28,-101,-102,-103,-114,-116,-117,-137,-138,-132,-116,-117,-135,-136,-27,171,213,-84,-104,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-66,-68,-32,-139,-85,]),'{':([5,29,30,34,35,76,82,175,178,207,208,209,210,226,227,],[20,20,20,-6,-56,20,-100,-24,-15,20,-92,20,-97,20,-95,]),'BOOLEAN':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,176,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,45,-18,-13,45,45,45,45,45,-58,-60,-61,-77,-69,-70,-71,-72,-73,45,-74,-75,-76,-23,-59,-62,45,-78,-86,-14,-22,45,45,-87,-88,45,45,45,45,-91,-96,-93,45,-99,45,-94,]),'VOID':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,176,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,46,-18,-13,46,46,46,46,46,-58,-60,-61,-77,-69,-70,-71,-72,-73,46,-74,-75,-76,-23,-59,-62,46,-78,-86,-14,-22,46,46,-87,-88,46,46,46,46,-91,-96,-93,46,-99,46,-94,]),'BYTE':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,176,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,47,-18,-13,47,47,47,47,47,-58,-60,-61,-77,-69,-70,-71,-72,-73,47,-74,-75,-76,-23,-59,-62,47,-78,-86,-14,-22,47,47,-87,-88,47,47,47,47,-91,-96,-93,47,-99,47,-94,]),'SHORT':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,176,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,48,-18,-13,48,48,48,48,48,-58,-60,-61,-77,-69,-70,-71,-72,-73,48,-74,-75,-76,-23,-59,-62,48,-78,-86,-14,-22,48,48,-87,-88,48,48,48,48,-91,-96,-93,48,-99,48,-94,]),'INT':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,176,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,49,-18,-13,49,49,49,49,49,-58,-60,-61,-77,-69,-70,-71,-72,-73,49,-74,-75,-76,-23,-59,-62,49,-78,-86,-14,-22,49,49,-87,-88,49,49,49,49,-91,-96,-93,49,-99,49,-94,]),'LONG':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,176,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,50,-18,-13,50,50,50,50,50,-58,-60,-61,-77,-69,-70,-71,-72,-73,50,-74,-75,-76,-23,-59,-62,50,-78,-86,-14,-22,50,50,-87,-88,50,50,50,50,-91,-96,-93,50,-99,50,-94,]),'CHAR':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,176,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,51,-18,-13,51,51,51,51,51,-58,-60,-61,-77,-69,-70,-71,-72,-73,51,-74,-75,-76,-23,-59,-62,51,-78,-86,-14,-22,51,51,-87,-88,51,51,51,51,-91,-96,-93,51,-99,51,-94,]),'FLOAT':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,176,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,52,-18,-13,52,52,52,52,52,-58,-60,-61,-77,-69,-70,-71,-72,-73,52,-74,-75,-76,-23,-59,-62,52,-78,-86,-14,-22,52,52,-87,-88,52,52,52,52,-91,-96,-93,52,-99,52,-94,]),'DOUBLE':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,176,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,53,-18,-13,53,53,53,53,53,-58,-60,-61,-77,-69,-70,-71,-72,-73,53,-74,-75,-76,-23,-59,-62,53,-78,-86,-14,-22,53,53,-87,-88,53,53,53,53,-91,-96,-93,53,-99,53,-94,]),'STRING':([7,8,9,10,11,12,13,14,15,16,19,20,22,24,25,26,27,28,31,37,38,39,40,55,56,58,59,60,61,63,64,65,66,67,68,70,71,72,73,120,121,122,128,129,130,169,170,176,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,-10,-57,-17,-19,-20,-21,54,-18,-13,54,54,54,54,54,-58,-60,-61,-77,-69,-70,-71,-72,-73,54,-74,-75,-76,-23,-59,-62,54,-78,-86,-14,-22,54,54,-87,-88,54,54,54,54,-91,-96,-93,54,-99,54,-94,]),'NAME':([7,8,9,10,11,12,13,14,15,16,19,20,21,22,24,25,26,27,28,31,37,38,39,40,41,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,79,81,91,95,96,111,113,118,120,121,122,125,126,127,128,129,130,132,142,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,169,170,171,172,174,176,182,183,187,188,205,213,215,216,219,220,221,222,223,225,229,230,231,232,],[-7,-8,-9,-49,-50,-51,-52,-53,-54,-55,-57,-12,35,-10,-57,-17,-19,-20,-21,35,-18,-13,80,80,35,-33,-34,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,35,35,80,-58,-60,-61,-77,-69,-70,-71,-72,-73,35,35,-74,-75,-76,131,35,35,35,35,-36,-35,35,-23,-59,-62,35,35,35,80,-78,-86,35,35,35,-107,-108,-109,-110,-111,-112,35,35,35,35,35,35,35,35,35,35,35,35,-14,-22,35,35,-37,35,80,-87,-88,35,-38,35,80,80,80,80,35,-91,-96,-93,80,-99,80,-94,]),';':([20,35,38,39,40,58,59,60,61,62,63,64,65,66,67,68,71,72,73,78,79,81,84,85,86,89,90,92,93,97,98,99,100,101,102,103,104,106,107,109,110,121,122,123,124,128,129,130,131,133,134,135,136,137,138,139,140,141,150,151,164,165,166,167,168,179,182,183,185,187,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,212,214,215,216,219,220,222,223,225,228,229,230,231,232,],[-12,-56,-13,63,63,63,-58,-60,-61,122,-77,-69,-70,-71,-72,-73,-74,-75,-76,129,130,-57,-79,-80,-81,-130,-131,-133,-134,-113,-115,-140,-141,-142,-143,-144,-145,170,-28,-65,-67,-59,-62,-63,-28,63,-78,-86,183,187,-89,-90,-101,-102,-103,-114,-116,-117,-137,-138,-132,-116,-117,-135,-136,-64,63,-87,-83,-88,-104,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-66,-68,-82,-139,63,63,63,63,-91,-96,-93,230,63,-99,63,-94,]),'IF':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,121,122,128,129,130,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[-12,-13,74,74,74,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,-59,-62,74,-78,-86,74,-87,-88,74,74,74,74,-91,-96,-93,74,-99,74,-94,]),'BREAK':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,121,122,128,129,130,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[-12,-13,79,79,79,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,-59,-62,79,-78,-86,79,-87,-88,79,79,79,79,-91,-96,-93,79,-99,79,-94,]),'RETURN':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,121,122,128,129,130,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[-12,-13,81,81,81,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,-59,-62,81,-78,-86,81,-87,-88,81,81,81,81,-91,-96,-93,81,-99,81,-94,]),'WHILE':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,121,122,128,129,130,182,183,187,211,215,216,219,220,222,223,225,229,230,231,232,],[-12,-13,77,77,77,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,-59,-62,77,-78,-86,77,-87,-88,217,77,77,77,77,-91,-96,-93,77,-99,77,-94,]),'DO':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,121,122,128,129,130,182,183,187,215,216,219,220,222,223,225,229,230,231,232,],[-12,-13,82,82,82,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,-59,-62,82,-78,-86,82,-87,-88,82,82,82,82,-91,-96,-93,82,-99,82,-94,]),'UMINUS':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,81,91,95,96,121,122,126,127,128,129,130,132,142,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,172,182,183,187,188,213,215,216,219,220,221,222,223,225,229,230,231,232,],[-12,-13,91,91,91,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,91,91,91,91,-59,-62,91,91,91,-78,-86,91,91,91,-107,-108,-109,-110,-111,-112,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-87,-88,91,91,91,91,91,91,91,-91,-96,-93,91,-99,91,-94,]),'PLUSPLUS':([20,35,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,80,81,83,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,121,122,126,127,128,129,130,132,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,172,182,183,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,213,214,215,216,219,220,221,222,223,225,229,230,231,232,],[-12,-56,-13,95,95,95,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,-56,95,-116,-114,150,-130,-131,95,-133,-134,-117,95,95,-113,-115,-140,-141,-142,-143,-144,-145,-59,-62,95,95,95,-78,-86,95,150,-114,-116,-117,95,95,-107,-108,-109,-110,-111,-112,-137,-138,95,95,95,95,95,95,95,95,95,95,95,95,-132,-116,-117,-135,-136,95,95,-87,-88,95,150,150,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,150,95,-139,95,95,95,95,95,-91,-96,-93,95,-99,95,-94,]),'MINUSMINUS':([20,35,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,80,81,83,85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,121,122,126,127,128,129,130,132,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,172,182,183,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,213,214,215,216,219,220,221,222,223,225,229,230,231,232,],[-12,-56,-13,96,96,96,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,-56,96,-116,-114,151,-130,-131,96,-133,-134,-117,96,96,-113,-115,-140,-141,-142,-143,-144,-145,-59,-62,96,96,96,-78,-86,96,151,-114,-116,-117,96,96,-107,-108,-109,-110,-111,-112,-137,-138,96,96,96,96,96,96,96,96,96,96,96,96,-132,-116,-117,-135,-136,96,96,-87,-88,96,151,151,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,151,96,-139,96,96,96,96,96,-91,-96,-93,96,-99,96,-94,]),'NUM':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,81,91,95,96,121,122,126,127,128,129,130,132,142,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,172,182,183,187,188,213,215,216,219,220,221,222,223,225,229,230,231,232,],[-12,-13,99,99,99,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,99,99,99,99,-59,-62,99,99,99,-78,-86,99,99,99,-107,-108,-109,-110,-111,-112,99,99,99,99,99,99,99,99,99,99,99,99,99,99,-87,-88,99,99,99,99,99,99,99,-91,-96,-93,99,-99,99,-94,]),'CHAR_LITERAL':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,81,91,95,96,121,122,126,127,128,129,130,132,142,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,172,182,183,187,188,213,215,216,219,220,221,222,223,225,229,230,231,232,],[-12,-13,100,100,100,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,100,100,100,100,-59,-62,100,100,100,-78,-86,100,100,100,-107,-108,-109,-110,-111,-112,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-87,-88,100,100,100,100,100,100,100,-91,-96,-93,100,-99,100,-94,]),'STRING_LITERAL':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,81,91,95,96,121,122,126,127,128,129,130,132,142,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,172,182,183,187,188,213,215,216,219,220,221,222,223,225,229,230,231,232,],[-12,-13,101,101,101,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,101,101,101,101,-59,-62,101,101,101,-78,-86,101,101,101,-107,-108,-109,-110,-111,-112,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-87,-88,101,101,101,101,101,101,101,-91,-96,-93,101,-99,101,-94,]),'TRUE':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,81,91,95,96,121,122,126,127,128,129,130,132,142,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,172,182,183,187,188,213,215,216,219,220,221,222,223,225,229,230,231,232,],[-12,-13,102,102,102,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,102,102,102,102,-59,-62,102,102,102,-78,-86,102,102,102,-107,-108,-109,-110,-111,-112,102,102,102,102,102,102,102,102,102,102,102,102,102,102,-87,-88,102,102,102,102,102,102,102,-91,-96,-93,102,-99,102,-94,]),'FALSE':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,81,91,95,96,121,122,126,127,128,129,130,132,142,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,172,182,183,187,188,213,215,216,219,220,221,222,223,225,229,230,231,232,],[-12,-13,103,103,103,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,103,103,103,103,-59,-62,103,103,103,-78,-86,103,103,103,-107,-108,-109,-110,-111,-112,103,103,103,103,103,103,103,103,103,103,103,103,103,103,-87,-88,103,103,103,103,103,103,103,-91,-96,-93,103,-99,103,-94,]),'NULL':([20,38,39,40,58,59,60,61,63,64,65,66,67,68,71,72,73,81,91,95,96,121,122,126,127,128,129,130,132,142,143,144,145,146,147,148,149,152,153,154,155,156,157,158,159,160,161,162,163,172,182,183,187,188,213,215,216,219,220,221,222,223,225,229,230,231,232,],[-12,-13,104,104,104,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,104,104,104,104,-59,-62,104,104,104,-78,-86,104,104,104,-107,-108,-109,-110,-111,-112,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-87,-88,104,104,104,104,104,104,104,-91,-96,-93,104,-99,104,-94,]),'}':([24,25,26,27,28,37,38,57,58,59,60,61,63,64,65,66,67,68,71,72,73,105,120,121,122,129,130,169,170,182,183,187,219,220,222,223,225,230,231,232,],[38,-17,-19,-20,-21,-18,-13,38,-26,-58,-60,-61,-77,-69,-70,-71,-72,-73,-74,-75,-76,38,-23,-59,-62,-78,-86,-14,-22,38,-87,-88,38,38,-91,-96,-93,-99,38,-94,]),'(':([32,33,35,74,75,77,80,107,108,217,],[55,56,-56,126,127,-98,132,-25,-16,221,]),'[':([35,42,43,45,46,47,48,49,50,51,52,53,54,80,83,111,113,140,165,174,205,],[-56,112,112,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-56,142,173,173,188,188,-37,-38,]),'ASSIGN':([35,80,83,87,94,107,110,124,140,141,214,],[-56,-56,-105,144,-106,-28,172,-28,-105,-106,-139,]),'ADD':([35,80,83,85,88,89,90,92,93,94,97,98,99,100,101,102,103,104,138,139,140,141,150,151,164,165,166,167,168,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,214,],[-56,-56,-116,-114,152,-130,-131,-133,-134,-117,-113,-115,-140,-141,-142,-143,-144,-145,152,-114,-116,-117,-137,-138,-132,-116,-117,152,152,152,152,-118,-119,-120,-121,152,152,152,152,152,152,152,152,152,-139,]),'SUB':([35,80,83,85,88,89,90,92,93,94,97,98,99,100,101,102,103,104,138,139,140,141,150,151,164,165,166,167,168,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,214,],[-56,-56,-116,-114,153,-130,-131,-133,-134,-117,-113,-115,-140,-141,-142,-143,-144,-145,153,-114,-116,-117,-137,-138,-132,-116,-117,153,153,153,153,-118,-119,-120,-121,153,153,153,153,153,153,153,153,153,-139,]),'MUL':([35,80,83,85,88,89,90,92,93,94,97,98,99,100,101,102,103,104,138,139,140,141,150,151,164,165,166,167,168,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,214,],[-56,-56,-116,-114,154,-130,-131,-133,-134,-117,-113,-115,-140,-141,-142,-143,-144,-145,154,-114,-116,-117,-137,-138,-132,-116,-117,154,154,154,154,154,154,-120,-121,154,154,154,154,154,154,154,154,154,-139,]),'DIV':([35,80,83,85,88,89,90,92,93,94,97,98,99,100,101,102,103,104,138,139,140,141,150,151,164,165,166,167,168,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,214,],[-56,-56,-116,-114,155,-130,-131,-133,-134,-117,-113,-115,-140,-141,-142,-143,-144,-145,155,-114,-116,-117,-137,-138,-132,-116,-117,155,155,155,155,155,155,-120,-121,155,155,155,155,155,155,155,155,155,-139,]),'AND':([35,80,83,85,88,89,90,92,93,94,97,98,99,100,101,102,103,104,138,139,140,141,150,151,164,165,166,167,168,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,214,],[-56,-56,-116,-114,156,-130,-131,-133,-134,-117,-113,-115,-140,-141,-142,-143,-144,-145,156,-114,-116,-117,-137,-138,-132,-116,-117,156,156,156,156,-118,-119,-120,-121,-122,156,-124,-125,-126,-127,-128,-129,156,-139,]),'OR':([35,80,83,85,88,89,90,92,93,94,97,98,99,100,101,102,103,104,138,139,140,141,150,151,164,165,166,167,168,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,214,],[-56,-56,-116,-114,157,-130,-131,-133,-134,-117,-113,-115,-140,-141,-142,-143,-144,-145,157,-114,-116,-117,-137,-138,-132,-116,-117,157,157,157,157,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,157,-139,]),'LESS':([35,80,83,85,88,89,90,92,93,94,97,98,99,100,101,102,103,104,138,139,140,141,150,151,164,165,166,167,168,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,214,],[-56,-56,-116,-114,158,-130,-131,-133,-134,-117,-113,-115,-140,-141,-142,-143,-144,-145,158,-114,-116,-117,-137,-138,-132,-116,-117,158,158,158,158,-118,-119,-120,-121,158,158,-124,-125,-126,-127,158,158,158,-139,]),'LTEQ':([35,80,83,85,88,89,90,92,93,94,97,98,99,100,101,102,103,104,138,139,140,141,150,151,164,165,166,167,168,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,214,],[-56,-56,-116,-114,159,-130,-131,-133,-134,-117,-113,-115,-140,-141,-142,-143,-144,-145,159,-114,-116,-117,-137,-138,-132,-116,-117,159,159,159,159,-118,-119,-120,-121,159,159,-124,-125,-126,-127,159,159,159,-139,]),'GREATER':([35,80,83,85,88,89,90,92,93,94,97,98,99,100,101,102,103,104,138,139,140,141,150,151,164,165,166,167,168,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,214,],[-56,-56,-116,-114,160,-130,-131,-133,-134,-117,-113,-115,-140,-141,-142,-143,-144,-145,160,-114,-116,-117,-137,-138,-132,-116,-117,160,160,160,160,-118,-119,-120,-121,160,160,-124,-125,-126,-127,160,160,160,-139,]),'GTEQ':([35,80,83,85,88,89,90,92,93,94,97,98,99,100,101,102,103,104,138,139,140,141,150,151,164,165,166,167,168,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,214,],[-56,-56,-116,-114,161,-130,-131,-133,-134,-117,-113,-115,-140,-141,-142,-143,-144,-145,161,-114,-116,-117,-137,-138,-132,-116,-117,161,161,161,161,-118,-119,-120,-121,161,161,-124,-125,-126,-127,161,161,161,-139,]),'EQ':([35,80,83,85,88,89,90,92,93,94,97,98,99,100,101,102,103,104,138,139,140,141,150,151,164,165,166,167,168,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,214,],[-56,-56,-116,-114,162,-130,-131,-133,-134,-117,-113,-115,-140,-141,-142,-143,-144,-145,162,-114,-116,-117,-137,-138,-132,-116,-117,162,162,162,162,-118,-119,-120,-121,162,162,-124,-125,-126,-127,-128,-129,162,-139,]),'NEQ':([35,80,83,85,88,89,90,92,93,94,97,98,99,100,101,102,103,104,138,139,140,141,150,151,164,165,166,167,168,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,214,],[-56,-56,-116,-114,163,-130,-131,-133,-134,-117,-113,-115,-140,-141,-142,-143,-144,-145,163,-114,-116,-117,-137,-138,-132,-116,-117,163,163,163,163,-118,-119,-120,-121,163,163,-124,-125,-126,-127,-128,-129,163,-139,]),'TIMES_ASSIGN':([35,80,83,87,94,140,141,214,],[-56,-56,-105,145,-106,-105,-106,-139,]),'DIVIDE_ASSIGN':([35,80,83,87,94,140,141,214,],[-56,-56,-105,146,-106,-105,-106,-139,]),'REMAINDER_ASSIGN':([35,80,83,87,94,140,141,214,],[-56,-56,-105,147,-106,-105,-106,-139,]),'PLUS_ASSIGN':([35,80,83,87,94,140,141,214,],[-56,-56,-105,148,-106,-105,-106,-139,]),'MINUS_ASSIGN':([35,80,83,87,94,140,141,214,],[-56,-56,-105,149,-106,-105,-106,-139,]),')':([35,55,56,89,90,92,93,97,98,99,100,101,102,103,104,114,115,116,117,119,124,132,136,137,138,139,140,141,150,151,164,165,166,167,168,177,180,181,184,186,190,191,192,193,194,195,196,197,198,199,200,201,202,206,214,218,224,],[-56,-57,-57,-130,-131,-133,-134,-113,-115,-140,-141,-142,-143,-144,-145,175,-29,-30,-31,178,-28,185,-101,-102,-103,-114,-116,-117,-137,-138,-132,-116,-117,-135,-136,-27,208,210,212,-84,-104,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-32,-139,-85,228,]),']':([35,89,90,92,93,97,98,99,100,101,102,103,104,112,139,142,150,151,164,165,166,167,168,173,189,191,192,193,194,195,196,197,198,199,200,201,202,214,],[-56,-130,-131,-133,-134,-113,-115,-140,-141,-142,-143,-144,-145,174,-114,174,-137,-138,-132,-116,-117,-135,-136,205,214,-118,-119,-120,-121,-122,-123,-124,-125,-126,-127,-128,-129,-139,]),'ELSE':([38,222,],[-13,227,]),'MAIN':([41,43,44,45,46,47,48,49,50,51,52,53,54,111,113,174,205,],[108,-33,-34,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-36,-35,-37,-38,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'type_declarations':([0,],[2,]),'type_declaration':([0,17,],[3,23,]),'class_declaration':([0,17,],[4,4,]),'class_header_name':([0,17,],[5,5,]),'modifiers_opt':([0,17,19,24,],[6,6,31,31,]),'modifiers':([0,17,19,24,39,40,58,128,182,215,216,219,220,229,231,],[7,7,7,7,70,70,70,70,70,70,70,70,70,70,70,]),'empty':([0,17,19,24,55,56,81,],[8,8,8,8,116,116,135,]),'modifier':([0,7,17,19,24,39,40,58,70,128,182,215,216,219,220,229,231,],[9,22,9,9,9,9,9,9,22,9,9,9,9,9,9,9,9,]),'class_body':([5,],[18,]),'opening_bracket':([5,29,30,76,207,209,226,],[19,39,40,128,215,216,229,]),'classbodydecllist':([19,],[24,]),'classbodydecl':([19,24,],[25,37,]),'method_declaration':([19,24,],[26,26,]),'tmain':([19,24,],[27,27,]),'field_declartaion':([19,24,],[28,28,]),'method_header':([19,24,],[29,29,]),'tmain_header':([19,24,],[30,30,]),'method_header_name':([19,24,],[32,32,]),'tmain_name':([19,24,],[33,33,]),'name':([21,31,39,40,41,55,56,58,69,70,81,91,95,96,118,125,126,127,128,132,142,143,152,153,154,155,156,157,158,159,160,161,162,163,171,172,176,182,188,213,215,216,219,220,221,229,231,],[34,42,83,83,107,42,42,83,124,42,140,165,165,165,124,124,140,140,83,140,165,165,165,165,165,165,165,165,165,165,165,165,165,165,124,165,42,83,165,140,83,83,83,83,140,83,83,]),'closing_bracket':([24,57,105,182,219,220,231,],[36,120,169,211,222,223,232,]),'type':([31,39,40,55,56,58,70,128,176,182,215,216,219,220,229,231,],[41,69,69,118,118,69,125,69,118,69,69,69,69,69,69,69,]),'primitive_type':([31,39,40,55,56,58,70,128,176,182,215,216,219,220,229,231,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'array_type':([31,39,40,55,56,58,70,128,176,182,215,216,219,220,229,231,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'method_body':([39,40,],[57,105,]),'block_statements':([39,40,128,215,216,229,],[58,58,182,219,220,231,]),'block_statement':([39,40,58,128,182,215,216,219,220,229,231,],[59,59,121,59,121,59,59,121,121,59,121,]),'local_variable_declaration_statement':([39,40,58,128,182,215,216,219,220,229,231,],[60,60,60,60,60,60,60,60,60,60,60,]),'statement':([39,40,58,128,182,215,216,219,220,229,231,],[61,61,61,61,61,61,61,61,61,61,61,]),'local_variable_declaration':([39,40,58,128,182,215,216,219,220,229,231,],[62,62,62,62,62,62,62,62,62,62,62,]),'other_statement':([39,40,58,128,182,215,216,219,220,229,231,],[64,64,64,64,64,64,64,64,64,64,64,]),'if_then_statement':([39,40,58,128,182,215,216,219,220,229,231,],[65,65,65,65,65,65,65,65,65,65,65,]),'if_then_else_statement':([39,40,58,128,182,215,216,219,220,229,231,],[66,66,66,66,66,66,66,66,66,66,66,]),'while_statement':([39,40,58,128,182,215,216,219,220,229,231,],[67,67,67,67,67,67,67,67,67,67,67,]),'do_while_statement':([39,40,58,128,182,215,216,219,220,229,231,],[68,68,68,68,68,68,68,68,68,68,68,]),'expression_statement':([39,40,58,128,182,215,216,219,220,229,231,],[71,71,71,71,71,71,71,71,71,71,71,]),'break_statement':([39,40,58,128,182,215,216,219,220,229,231,],[72,72,72,72,72,72,72,72,72,72,72,]),'return_statement':([39,40,58,128,182,215,216,219,220,229,231,],[73,73,73,73,73,73,73,73,73,73,73,]),'while':([39,40,58,128,182,215,216,219,220,229,231,],[75,75,75,75,75,75,75,75,75,75,75,]),'do':([39,40,58,128,182,215,216,219,220,229,231,],[76,76,76,76,76,76,76,76,76,76,76,]),'statement_expression':([39,40,58,128,182,215,216,219,220,229,231,],[78,78,78,78,78,78,78,78,78,78,78,]),'assignment':([39,40,58,81,126,127,128,132,182,213,215,216,219,220,221,229,231,],[84,84,84,137,137,137,84,137,84,137,84,84,84,84,137,84,84,]),'unary_expression':([39,40,58,81,91,95,96,126,127,128,132,142,143,152,153,154,155,156,157,158,159,160,161,162,163,172,182,188,213,215,216,219,220,221,229,231,],[85,85,85,139,139,139,139,139,139,85,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,85,139,139,85,85,85,85,139,85,85,]),'method_invocation':([39,40,58,128,182,215,216,219,220,229,231,],[86,86,86,86,86,86,86,86,86,86,86,]),'Location':([39,40,58,81,126,127,128,132,182,213,215,216,219,220,221,229,231,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'Expr':([39,40,58,81,91,95,96,126,127,128,132,142,143,152,153,154,155,156,157,158,159,160,161,162,163,172,182,188,213,215,216,219,220,221,229,231,],[88,88,88,138,164,167,168,138,138,88,138,189,190,191,192,193,194,195,196,197,198,199,200,201,202,204,88,189,138,88,88,88,88,138,88,88,]),'pre_increment_expression':([39,40,58,81,91,95,96,126,127,128,132,142,143,152,153,154,155,156,157,158,159,160,161,162,163,172,182,188,213,215,216,219,220,221,229,231,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'pre_decrement_expression':([39,40,58,81,91,95,96,126,127,128,132,142,143,152,153,154,155,156,157,158,159,160,161,162,163,172,182,188,213,215,216,219,220,221,229,231,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'post_increment_expression':([39,40,58,81,91,95,96,126,127,128,132,142,143,152,153,154,155,156,157,158,159,160,161,162,163,172,182,188,213,215,216,219,220,221,229,231,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'post_decrement_expression':([39,40,58,81,91,95,96,126,127,128,132,142,143,152,153,154,155,156,157,158,159,160,161,162,163,172,182,188,213,215,216,219,220,221,229,231,],[93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,]),'array_access':([39,40,58,81,91,95,96,126,127,128,132,142,143,152,153,154,155,156,157,158,159,160,161,162,163,172,182,188,213,215,216,219,220,221,229,231,],[94,94,94,141,166,166,166,141,141,94,141,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,94,166,141,94,94,94,94,141,94,94,]),'exprbinaryexpr':([39,40,58,81,91,95,96,126,127,128,132,142,143,152,153,154,155,156,157,158,159,160,161,162,163,172,182,188,213,215,216,219,220,221,229,231,],[97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,]),'literal':([39,40,58,81,91,95,96,126,127,128,132,142,143,152,153,154,155,156,157,158,159,160,161,162,163,172,182,188,213,215,216,219,220,221,229,231,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'variable_declarators':([41,69,125,],[106,123,179,]),'variable_declarator':([41,69,125,171,],[109,109,109,203,]),'variable_declarator_id':([41,69,118,125,171,],[110,110,177,110,110,]),'dims':([42,43,83,],[111,113,111,]),'formal_parameter_list_opt':([55,56,],[114,119,]),'formal_parameter_list':([55,56,],[115,115,]),'formal_parameter':([55,56,176,],[117,117,206,]),'expression_opt':([81,],[133,]),'expression':([81,126,127,132,213,221,],[134,180,181,186,218,224,]),'assignment_expression':([81,126,127,132,213,221,],[136,136,136,136,136,136,]),'assignment_operator':([87,],[143,]),'argument_list':([132,],[184,]),'closing_parantheses_if':([180,],[207,]),'closing_parantheses':([181,],[209,]),'else':([222,],[225,]),'else_stmt':([222,],[226,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> type_declarations','start',1,'p_start','parser.py',30),
  ('type_declarations -> type_declaration','type_declarations',1,'p_type_declarations','parser.py',36),
  ('type_declarations -> type_declarations , type_declaration','type_declarations',3,'p_type_declarations','parser.py',37),
  ('type_declaration -> class_declaration','type_declaration',1,'p_type_declarations','parser.py',39),
  ('class_declaration -> class_header_name class_body','class_declaration',2,'p_class_declaration','parser.py',44),
  ('class_header_name -> modifiers_opt CLASS name','class_header_name',3,'p_class_header','parser.py',50),
  ('modifiers_opt -> modifiers','modifiers_opt',1,'p_modifiers_opt','parser.py',58),
  ('modifiers_opt -> empty','modifiers_opt',1,'p_modifiers_opt','parser.py',59),
  ('modifiers -> modifier','modifiers',1,'p_modifiers_opt','parser.py',60),
  ('modifiers -> modifiers modifier','modifiers',2,'p_modifiers_opt','parser.py',61),
  ('class_body -> opening_bracket classbodydecllist closing_bracket','class_body',3,'p_class_body','parser.py',67),
  ('opening_bracket -> {','opening_bracket',1,'p_class_body','parser.py',68),
  ('closing_bracket -> }','closing_bracket',1,'p_class_body','parser.py',69),
  ('tmain -> tmain_header opening_bracket method_body closing_bracket','tmain',4,'p_main_func','parser.py',87),
  ('tmain_header -> tmain_name ( formal_parameter_list_opt )','tmain_header',4,'p_main_head','parser.py',93),
  ('tmain_name -> modifiers_opt type MAIN','tmain_name',3,'p_main_name','parser.py',101),
  ('classbodydecllist -> classbodydecl','classbodydecllist',1,'p_classbodydecllist','parser.py',107),
  ('classbodydecllist -> classbodydecllist classbodydecl','classbodydecllist',2,'p_classbodydecllist','parser.py',108),
  ('classbodydecl -> method_declaration','classbodydecl',1,'p_singleclassbody','parser.py',115),
  ('classbodydecl -> tmain','classbodydecl',1,'p_singleclassbody','parser.py',116),
  ('classbodydecl -> field_declartaion','classbodydecl',1,'p_singleclassbody','parser.py',117),
  ('field_declartaion -> modifiers_opt type variable_declarators ;','field_declartaion',4,'p_field_declartaion','parser.py',122),
  ('method_declaration -> method_header opening_bracket method_body closing_bracket','method_declaration',4,'p_method_declaration','parser.py',132),
  ('method_header -> method_header_name ( formal_parameter_list_opt )','method_header',4,'p_method_header','parser.py',139),
  ('method_header_name -> modifiers_opt type name','method_header_name',3,'p_method_name','parser.py',147),
  ('method_body -> block_statements','method_body',1,'p_method_name','parser.py',148),
  ('formal_parameter -> type variable_declarator_id','formal_parameter',2,'p_method_name','parser.py',150),
  ('variable_declarator_id -> name','variable_declarator_id',1,'p_method_name','parser.py',151),
  ('formal_parameter_list_opt -> formal_parameter_list','formal_parameter_list_opt',1,'p_formal_param_list_opt','parser.py',174),
  ('formal_parameter_list_opt -> empty','formal_parameter_list_opt',1,'p_formal_param_list_opt','parser.py',175),
  ('formal_parameter_list -> formal_parameter','formal_parameter_list',1,'p_formalparamlist','parser.py',180),
  ('formal_parameter_list -> formal_parameter_list , formal_parameter','formal_parameter_list',3,'p_formalparamlist','parser.py',181),
  ('type -> primitive_type','type',1,'p_type','parser.py',186),
  ('type -> array_type','type',1,'p_type','parser.py',187),
  ('array_type -> primitive_type dims','array_type',2,'p_type','parser.py',188),
  ('array_type -> name dims','array_type',2,'p_type','parser.py',189),
  ('dims -> [ ]','dims',2,'p_type','parser.py',190),
  ('dims -> dims [ ]','dims',3,'p_type','parser.py',191),
  ('primitive_type -> BOOLEAN','primitive_type',1,'p_type','parser.py',192),
  ('primitive_type -> VOID','primitive_type',1,'p_type','parser.py',193),
  ('primitive_type -> BYTE','primitive_type',1,'p_type','parser.py',194),
  ('primitive_type -> SHORT','primitive_type',1,'p_type','parser.py',195),
  ('primitive_type -> INT','primitive_type',1,'p_type','parser.py',196),
  ('primitive_type -> LONG','primitive_type',1,'p_type','parser.py',197),
  ('primitive_type -> CHAR','primitive_type',1,'p_type','parser.py',198),
  ('primitive_type -> FLOAT','primitive_type',1,'p_type','parser.py',199),
  ('primitive_type -> DOUBLE','primitive_type',1,'p_type','parser.py',200),
  ('primitive_type -> STRING','primitive_type',1,'p_type','parser.py',201),
  ('modifier -> PUBLIC','modifier',1,'p_modifier_type','parser.py',206),
  ('modifier -> PROTECTED','modifier',1,'p_modifier_type','parser.py',207),
  ('modifier -> PRIVATE','modifier',1,'p_modifier_type','parser.py',208),
  ('modifier -> STATIC','modifier',1,'p_modifier_type','parser.py',209),
  ('modifier -> ABSTRACT','modifier',1,'p_modifier_type','parser.py',210),
  ('modifier -> FINAL','modifier',1,'p_modifier_type','parser.py',211),
  ('modifier -> NATIVE','modifier',1,'p_modifier_type','parser.py',212),
  ('name -> NAME','name',1,'p_name','parser.py',217),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',223),
  ('block_statements -> block_statement','block_statements',1,'p_blocks','parser.py',229),
  ('block_statements -> block_statements block_statement','block_statements',2,'p_blocks','parser.py',230),
  ('block_statement -> local_variable_declaration_statement','block_statement',1,'p_block','parser.py',238),
  ('block_statement -> statement','block_statement',1,'p_block','parser.py',239),
  ('local_variable_declaration_statement -> local_variable_declaration ;','local_variable_declaration_statement',2,'p_local_variable_declaration','parser.py',247),
  ('local_variable_declaration -> type variable_declarators','local_variable_declaration',2,'p_local_variable_declaration','parser.py',248),
  ('local_variable_declaration -> modifiers type variable_declarators','local_variable_declaration',3,'p_local_variable_declaration','parser.py',249),
  ('variable_declarators -> variable_declarator','variable_declarators',1,'p_variable_declarations','parser.py',260),
  ('variable_declarators -> variable_declarators , variable_declarator','variable_declarators',3,'p_variable_declarations','parser.py',261),
  ('variable_declarator -> variable_declarator_id','variable_declarator',1,'p_variable_declarations','parser.py',262),
  ('variable_declarator -> variable_declarator_id ASSIGN Expr','variable_declarator',3,'p_variable_declarations','parser.py',263),
  ('statement -> other_statement','statement',1,'p_statement','parser.py',278),
  ('statement -> if_then_statement','statement',1,'p_statement','parser.py',279),
  ('statement -> if_then_else_statement','statement',1,'p_statement','parser.py',280),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',281),
  ('statement -> do_while_statement','statement',1,'p_statement','parser.py',282),
  ('other_statement -> expression_statement','other_statement',1,'p_other_statement','parser.py',288),
  ('other_statement -> break_statement','other_statement',1,'p_other_statement','parser.py',289),
  ('other_statement -> return_statement','other_statement',1,'p_other_statement','parser.py',290),
  ('other_statement -> ;','other_statement',1,'p_other_statement','parser.py',291),
  ('expression_statement -> statement_expression ;','expression_statement',2,'p_expression_statement','parser.py',297),
  ('statement_expression -> assignment','statement_expression',1,'p_expression_statement','parser.py',298),
  ('statement_expression -> unary_expression','statement_expression',1,'p_expression_statement','parser.py',299),
  ('statement_expression -> method_invocation','statement_expression',1,'p_expression_statement','parser.py',300),
  ('method_invocation -> NAME ( argument_list )','method_invocation',4,'p_method_invocation','parser.py',306),
  ('method_invocation -> NAME ( )','method_invocation',3,'p_method_invocation','parser.py',307),
  ('argument_list -> expression','argument_list',1,'p_argument_list','parser.py',313),
  ('argument_list -> argument_list , expression','argument_list',3,'p_argument_list','parser.py',314),
  ('break_statement -> BREAK ;','break_statement',2,'p_break_statement','parser.py',320),
  ('break_statement -> BREAK NAME ;','break_statement',3,'p_break_statement','parser.py',321),
  ('return_statement -> RETURN expression_opt ;','return_statement',3,'p_return_statement','parser.py',327),
  ('expression_opt -> expression','expression_opt',1,'p_return_statement','parser.py',328),
  ('expression_opt -> empty','expression_opt',1,'p_return_statement','parser.py',329),
  ('if_then_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket','if_then_statement',7,'p_if_statements','parser.py',335),
  ('closing_parantheses_if -> )','closing_parantheses_if',1,'p_closing_parantheses_if','parser.py',345),
  ('if_then_else_statement -> IF ( expression closing_parantheses_if opening_bracket block_statements closing_bracket else','if_then_else_statement',8,'p_if_then_else_statements','parser.py',357),
  ('else -> else_stmt opening_bracket block_statements closing_bracket','else',4,'p_if_then_else_statements','parser.py',358),
  ('else_stmt -> ELSE','else_stmt',1,'p_else_stmt','parser.py',368),
  ('while_statement -> while ( expression closing_parantheses opening_bracket block_statements closing_bracket','while_statement',7,'p_while_statements','parser.py',377),
  ('closing_parantheses -> )','closing_parantheses',1,'p_closing_paranthese','parser.py',389),
  ('while -> WHILE','while',1,'p_while','parser.py',398),
  ('do_while_statement -> do opening_bracket block_statements closing_bracket WHILE ( expression ) ;','do_while_statement',9,'p_do_while_statement','parser.py',409),
  ('do -> DO','do',1,'p_do','parser.py',424),
  ('expression -> assignment_expression','expression',1,'p_expressions','parser.py',433),
  ('assignment_expression -> assignment','assignment_expression',1,'p_assignment_expression','parser.py',440),
  ('assignment_expression -> Expr','assignment_expression',1,'p_assignment_expression','parser.py',441),
  ('assignment -> Location assignment_operator Expr','assignment',3,'p_assignment_expression','parser.py',442),
  ('Location -> name','Location',1,'p_location','parser.py',454),
  ('Location -> array_access','Location',1,'p_location','parser.py',455),
  ('assignment_operator -> ASSIGN','assignment_operator',1,'p_assign_op','parser.py',460),
  ('assignment_operator -> TIMES_ASSIGN','assignment_operator',1,'p_assign_op','parser.py',461),
  ('assignment_operator -> DIVIDE_ASSIGN','assignment_operator',1,'p_assign_op','parser.py',462),
  ('assignment_operator -> REMAINDER_ASSIGN','assignment_operator',1,'p_assign_op','parser.py',463),
  ('assignment_operator -> PLUS_ASSIGN','assignment_operator',1,'p_assign_op','parser.py',464),
  ('assignment_operator -> MINUS_ASSIGN','assignment_operator',1,'p_assign_op','parser.py',465),
  ('Expr -> exprbinaryexpr','Expr',1,'p_conditional_expression','parser.py',471),
  ('Expr -> unary_expression','Expr',1,'p_conditional_expression','parser.py',472),
  ('Expr -> literal','Expr',1,'p_conditional_expression','parser.py',473),
  ('Expr -> name','Expr',1,'p_conditional_expression','parser.py',474),
  ('Expr -> array_access','Expr',1,'p_conditional_expression','parser.py',475),
  ('exprbinaryexpr -> Expr ADD Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',487),
  ('exprbinaryexpr -> Expr SUB Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',488),
  ('exprbinaryexpr -> Expr MUL Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',489),
  ('exprbinaryexpr -> Expr DIV Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',490),
  ('exprbinaryexpr -> Expr AND Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',491),
  ('exprbinaryexpr -> Expr OR Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',492),
  ('exprbinaryexpr -> Expr LESS Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',493),
  ('exprbinaryexpr -> Expr LTEQ Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',494),
  ('exprbinaryexpr -> Expr GREATER Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',495),
  ('exprbinaryexpr -> Expr GTEQ Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',496),
  ('exprbinaryexpr -> Expr EQ Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',497),
  ('exprbinaryexpr -> Expr NEQ Expr','exprbinaryexpr',3,'p_ExprBinaryExpr','parser.py',498),
  ('unary_expression -> pre_increment_expression','unary_expression',1,'p_unary_expression','parser.py',512),
  ('unary_expression -> pre_decrement_expression','unary_expression',1,'p_unary_expression','parser.py',513),
  ('unary_expression -> UMINUS Expr','unary_expression',2,'p_unary_expression','parser.py',514),
  ('unary_expression -> post_increment_expression','unary_expression',1,'p_unary_expression','parser.py',515),
  ('unary_expression -> post_decrement_expression','unary_expression',1,'p_unary_expression','parser.py',516),
  ('pre_increment_expression -> PLUSPLUS Expr','pre_increment_expression',2,'p_pre_expressions','parser.py',524),
  ('pre_decrement_expression -> MINUSMINUS Expr','pre_decrement_expression',2,'p_pre_expressions','parser.py',525),
  ('post_increment_expression -> Expr PLUSPLUS','post_increment_expression',2,'p_post_expressions','parser.py',531),
  ('post_decrement_expression -> Expr MINUSMINUS','post_decrement_expression',2,'p_post_expressions','parser.py',532),
  ('array_access -> name [ Expr ]','array_access',4,'p_primary','parser.py',538),
  ('literal -> NUM','literal',1,'p_literal','parser.py',545),
  ('literal -> CHAR_LITERAL','literal',1,'p_literal','parser.py',546),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','parser.py',547),
  ('literal -> TRUE','literal',1,'p_literal','parser.py',548),
  ('literal -> FALSE','literal',1,'p_literal','parser.py',549),
  ('literal -> NULL','literal',1,'p_literal','parser.py',550),
]
